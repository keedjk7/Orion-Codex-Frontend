version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: orion-postgres
    environment:
      POSTGRES_DB: orion
      POSTGRES_USER: orion_user
      POSTGRES_PASSWORD: orion_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - orion-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U orion_user -d orion"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Keycloak Authentication Server
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: orion-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/keycloak
      KC_DB_USERNAME: orion_user
      KC_DB_PASSWORD: orion_password
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - orion-network
    command: start-dev
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/localhost/8080 && echo 'Keycloak is ready' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped

  # Orion Application
  orion-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: orion-app
    env_file:
      - .env
    environment:
      NODE_ENV: production
      PORT: 5000
      # Database Configuration
      DATABASE_URL: postgresql://orion_user:orion_password@postgres:5432/orion
      # Keycloak Configuration
      VITE_KEYCLOAK_URL: http://localhost:8080
      VITE_KEYCLOAK_REALM: orion
      VITE_KEYCLOAK_CLIENT_ID: orion-client
      # Session Configuration
      SESSION_SECRET: your-super-secret-session-key-change-this-in-production
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - orion-network
    volumes:
      # Mount uploads directory for file persistence
      - uploads_data:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Redis for Session Storage (Optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: orion-redis
    ports:
      - "6379:6379"
    networks:
      - orion-network
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: orion-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - orion-app
      - keycloak
    networks:
      - orion-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local

networks:
  orion-network:
    driver: bridge
