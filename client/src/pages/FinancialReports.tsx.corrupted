import { useState, useMemo } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  FileText, 
  Filter, 
  Save, 
  Edit2, 
  Check, 
  X,
  Calculator,
  TrendingUp,
  BarChart3,
  AlertCircle,
  DollarSign,
  PieChart,
  Activity,
  ArrowUpRight,
  ArrowDownRight,
  Download,
  FileDown,
  Printer,
  ChevronDown,
  ChevronRight,
  Plus,
  Minus
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";
import Navigation from "@/components/Navigation";
import heroBackground from "@assets/generated_images/Gradient_mesh_hero_background_83768b02.png";
import type { 
  ProfitLossStatement,
  BalanceSheet,
  CashFlowStatement 
} from "@shared/schema";

export default function FinancialReports() {
  const [selectedTopic, setSelectedTopic] = useState<string>("all");
  const [startPeriod, setStartPeriod] = useState<string>("none");
  const [endPeriod, setEndPeriod] = useState<string>("none");
  const [activeTab, setActiveTab] = useState<string>("pl");
  const [editingCells, setEditingCells] = useState<Record<string, any>>({});
  const queryClient = useQueryClient();
  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});
  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});
  const { toast } = useToast();

  // Fetch financial reports data
  const { data: plStatements = [], isLoading: plLoading } = useQuery({
    queryKey: ['/api/profit-loss', selectedTopic, startPeriod, endPeriod],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);
      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);
      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);
      
      const response = await fetch(`/api/profit-loss?${params}`);
      if (!response.ok) throw new Error('Failed to fetch P&L statements');
      return response.json() as Promise<ProfitLossStatement[]>;
    }
  });

  const { data: balanceSheets = [], isLoading: bsLoading } = useQuery({
    queryKey: ['/api/balance-sheet', selectedTopic, startPeriod, endPeriod],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);
      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);
      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);
      
      const response = await fetch(`/api/balance-sheet?${params}`);
      if (!response.ok) throw new Error('Failed to fetch balance sheets');
      return response.json() as Promise<BalanceSheet[]>;
    }
  });

  const { data: cashFlowStatements = [], isLoading: cfLoading } = useQuery({
    queryKey: ['/api/cash-flow', selectedTopic, startPeriod, endPeriod],
    queryFn: async () => {
      const params = new URLSearchParams();
      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);
      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);
      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);
      
      const response = await fetch(`/api/cash-flow?${params}`);
      if (!response.ok) throw new Error('Failed to fetch cash flow statements');
      return response.json() as Promise<CashFlowStatement[]>;
    }
  });

  // Get unique topics and periods for filtering
  const uniqueTopics = useMemo(() => {
    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];
    return Array.from(new Set(allData.map(item => item.topic)));
  }, [plStatements, balanceSheets, cashFlowStatements]);

  const uniquePeriods = useMemo(() => {
    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];
    const periods = Array.from(new Set(allData.map(item => item.period)));
    // Sort periods properly for YYYY-MM format, then reverse for newest first
    return periods.sort((a, b) => {
      // Handle 'none' values
      if (a === 'none') return 1;
      if (b === 'none') return -1;
      // Standard string comparison works for YYYY-MM format
      return a.localeCompare(b);
    }).reverse();
  }, [plStatements, balanceSheets, cashFlowStatements]);

  // Helper function for safe number parsing
  const safeParseFloat = (value: string | undefined): number => {
    if (!value) return 0;
    const parsed = parseFloat(value);
    return isNaN(parsed) ? 0 : parsed;
  };

  // Helper function for percentage change calculation
  const calculatePercentageChange = (current: number, previous: number): number => {
    if (previous === 0) return 0;
    return ((current - previous) / Math.abs(previous)) * 100;
  };

  // Helper functions for collapsible sections
  const toggleSection = (sectionKey: string) => {
    setCollapsedSections(prev => ({
      ...prev,
      [sectionKey]: !prev[sectionKey]
    }));
  };

  const isCollapsed = (sectionKey: string) => {
    return collapsedSections[sectionKey] || false;
  };

  // Helper function to calculate section totals
  const calculateSectionTotal = (statements: any[], fields: string[]) => {
    return statements.map(statement => {
      const total = fields.reduce((sum, field) => {
        const value = parseFloat(statement[field] || '0');
        return sum + (isNaN(value) ? 0 : value);
      }, 0);
      return total;
    });
  };

  // Export helper functions
  const exportToCSV = (data: any[], fileName: string, reportType: string) => {
    try {
      let csvContent = '';
      
      if (reportType === 'pl') {
        // Profit & Loss CSV format
        csvContent = 'Topic,Period,Total Revenue,Cost of Goods Sold,Gross Profit,Operating Expenses,Operating Income,Other Income,Other Expenses,Net Income Before Tax,Tax Expense,Net Income\n';
        data.forEach(item => {
          csvContent += `"${item.topic}","${item.period}","${item.totalRevenue}","${item.costOfGoodsSold}","${item.grossProfit}","${item.operatingExpenses}","${item.operatingIncome}","${item.otherIncome}","${item.otherExpenses}","${item.netIncomeBeforeTax}","${item.taxExpense}","${item.netIncome}"\n`;
        });
      } else if (reportType === 'bs') {
        // Balance Sheet CSV format
        csvContent = 'Topic,Period,Current Assets,Cash,Accounts Receivable,Inventory,Non-Current Assets,Property Plant Equipment,Intangible Assets,Total Assets,Current Liabilities,Accounts Payable,Short Term Debt,Long Term Liabilities,Long Term Debt,Total Liabilities,Shareholders Equity,Retained Earnings\n';
        data.forEach(item => {
          csvContent += `"${item.topic}","${item.period}","${item.currentAssets}","${item.cash}","${item.accountsReceivable}","${item.inventory}","${item.nonCurrentAssets}","${item.propertyPlantEquipment}","${item.intangibleAssets}","${item.totalAssets}","${item.currentLiabilities}","${item.accountsPayable}","${item.shortTermDebt}","${item.longTermLiabilities}","${item.longTermDebt}","${item.totalLiabilities}","${item.shareholdersEquity}","${item.retainedEarnings}"\n`;
        });
      } else if (reportType === 'cf') {
        // Cash Flow CSV format
        csvContent = 'Topic,Period,Operating Cash Flow,Net Income,Depreciation,Change in Working Capital,Investing Cash Flow,Capital Expenditures,Acquisitions,Financing Cash Flow,Debt Issuance,Debt Repayment,Dividends Paid,Net Change in Cash,Beginning Cash Balance,Ending Cash Balance\n';
        data.forEach(item => {
          csvContent += `"${item.topic}","${item.period}","${item.operatingCashFlow}","${item.netIncome}","${item.depreciation}","${item.changeInWorkingCapital}","${item.investingCashFlow}","${item.capitalExpenditures}","${item.acquisitions}","${item.financingCashFlow}","${item.debtIssuance}","${item.debtRepayment}","${item.dividendsPaid}","${item.netChangeInCash}","${item.beginningCashBalance}","${item.endingCashBalance}"\n`;
        });
      }

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', fileName);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      
      toast({ description: `${fileName} exported successfully` });
    } catch (error) {
      console.error('Export error:', error);
      toast({ description: 'Export failed. Please try again.', variant: 'destructive' });
    }
  };

  const exportToPDF = (reportType: string) => {
    try {
      // Get the current tab content
      const activeTabElement = document.querySelector(`[data-testid="tab-content-${reportType}"]`);
      if (!activeTabElement) {
        toast({ description: 'No data to export', variant: 'destructive' });
        return;
      }

      // Create a new window for printing
      const printWindow = window.open('', '_blank');
      if (!printWindow) {
        toast({ description: 'Popup blocked. Please allow popups and try again.', variant: 'destructive' });
        return;
      }

      const reportTitle = reportType === 'pl' ? 'Profit & Loss Statement' : 
                         reportType === 'bs' ? 'Balance Sheet' : 'Cash Flow Statement';

      printWindow.document.write(`
        <html>
          <head>
            <title>${reportTitle}</title>
            <style>
              body { font-family: Arial, sans-serif; margin: 20px; }
              h1 { color: #333; text-align: center; }
              table { width: 100%; border-collapse: collapse; margin: 20px 0; }
              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
              th { background-color: #f2f2f2; font-weight: bold; }
              .number { text-align: right; }
              @media print {
                body { margin: 0; }
                .no-print { display: none; }
              }
            </style>
          </head>
          <body>
            <h1>${reportTitle}</h1>
            <div>${activeTabElement.innerHTML}</div>
            <script>
              window.onload = function() {
                // Clean up the content for printing
                const editButtons = document.querySelectorAll('button');
                editButtons.forEach(btn => btn.style.display = 'none');
                
                // Auto print
                window.print();
                window.close();
              };
            </script>
          </body>
        </html>
      `);
      
      printWindow.document.close();
      
      toast({ description: `${reportTitle} PDF export initiated` });
    } catch (error) {
      console.error('PDF export error:', error);
      toast({ description: 'PDF export failed. Please try again.', variant: 'destructive' });
    }
  };

  // Calculate key financial metrics
  const financialMetrics = useMemo(() => {
    // Get latest periods for each statement type
    const plPeriods = plStatements.map(pl => pl.period).sort().reverse();
    const bsPeriods = balanceSheets.map(bs => bs.period).sort().reverse();
    const cfPeriods = cashFlowStatements.map(cf => cf.period).sort().reverse();
    
    const latestPLPeriod = plPeriods[0] || '';
    const previousPLPeriod = plPeriods[1] || '';
    const latestBSPeriod = bsPeriods[0] || '';
    const previousBSPeriod = bsPeriods[1] || '';
    const latestCFPeriod = cfPeriods[0] || '';
    const previousCFPeriod = cfPeriods[1] || '';
    
    // P&L Metrics
    const latestPL = plStatements.find(pl => pl.period === latestPLPeriod);
    const previousPL = plStatements.find(pl => pl.period === previousPLPeriod);
    
    const currentRevenue = latestPL ? safeParseFloat(latestPL.totalRevenue) : 0;
    const currentExpenses = latestPL ? 
      safeParseFloat(latestPL.costOfGoodsSold) + 
      safeParseFloat(latestPL.operatingExpenses) + 
      safeParseFloat(latestPL.otherExpenses) + 
      safeParseFloat(latestPL.taxExpense) : 0;
    const currentNetIncome = latestPL ? safeParseFloat(latestPL.netIncome) : 0;
    
    const previousRevenue = previousPL ? safeParseFloat(previousPL.totalRevenue) : 0;
    const previousExpenses = previousPL ? 
      safeParseFloat(previousPL.costOfGoodsSold) + 
      safeParseFloat(previousPL.operatingExpenses) + 
      safeParseFloat(previousPL.otherExpenses) + 
      safeParseFloat(previousPL.taxExpense) : 0;
    const previousNetIncome = previousPL ? safeParseFloat(previousPL.netIncome) : 0;
    
    // Balance Sheet Metrics
    const latestBS = balanceSheets.find(bs => bs.period === latestBSPeriod);
    const previousBS = balanceSheets.find(bs => bs.period === previousBSPeriod);
    
    const currentTotalAssets = latestBS ? safeParseFloat(latestBS.totalAssets) : 0;
    const currentCurrentAssets = latestBS ? safeParseFloat(latestBS.currentAssets) : 0;
    const currentCurrentLiabilities = latestBS ? safeParseFloat(latestBS.currentLiabilities) : 0;
    const workingCapital = currentCurrentAssets - currentCurrentLiabilities;
    
    const previousTotalAssets = previousBS ? safeParseFloat(previousBS.totalAssets) : 0;
    const previousCurrentAssets = previousBS ? safeParseFloat(previousBS.currentAssets) : 0;
    const previousCurrentLiabilities = previousBS ? safeParseFloat(previousBS.currentLiabilities) : 0;
    const previousWorkingCapital = previousCurrentAssets - previousCurrentLiabilities;
    
    // Cash Flow Metrics
    const latestCF = cashFlowStatements.find(cf => cf.period === latestCFPeriod);
    const previousCF = cashFlowStatements.find(cf => cf.period === previousCFPeriod);
    
    const operatingCashFlow = latestCF ? safeParseFloat(latestCF.operatingCashFlow) : 0;
    const previousOperatingCashFlow = previousCF ? safeParseFloat(previousCF.operatingCashFlow) : 0;
    
    // Calculate percentage changes
    const revenueChange = calculatePercentageChange(currentRevenue, previousRevenue);
    const expenseChange = calculatePercentageChange(currentExpenses, previousExpenses);
    const netIncomeChange = calculatePercentageChange(currentNetIncome, previousNetIncome);
    const assetsChange = calculatePercentageChange(currentTotalAssets, previousTotalAssets);
    const workingCapitalChange = calculatePercentageChange(workingCapital, previousWorkingCapital);
    const operatingCashFlowChange = calculatePercentageChange(operatingCashFlow, previousOperatingCashFlow);
    
    return {
      currentRevenue,
      currentExpenses,
      currentNetIncome,
      currentTotalAssets,
      workingCapital,
      operatingCashFlow,
      revenueChange,
      expenseChange,
      netIncomeChange,
      assetsChange,
      workingCapitalChange,
      operatingCashFlowChange,
      latestPLPeriod,
      latestBSPeriod,
      latestCFPeriod,
      hasPreviousPL: !!previousPL,
      hasPreviousBS: !!previousBS,
      hasPreviousCF: !!previousCF
    };
  }, [plStatements, balanceSheets, cashFlowStatements]);

  // Date range validation
  const validateDateRange = (start: string, end: string): boolean => {
    if (start === 'none' || end === 'none') return true;
    if (start > end) {
      toast({
        description: "Start period must be before or equal to end period",
        variant: "destructive"
      });
      return false;
    }
    return true;
  };

  // Enhanced period change handlers with validation
  const handleStartPeriodChange = (value: string) => {
    if (validateDateRange(value, endPeriod)) {
      setStartPeriod(value);
    }
  };

  const handleEndPeriodChange = (value: string) => {
    if (validateDateRange(startPeriod, value)) {
      setEndPeriod(value);
    }
  };

  // Validation helper function
  const validateNumericInput = (value: string): string | null => {
    if (value.trim() === '') return 'Value is required';
    
    const num = parseFloat(value);
    if (isNaN(num)) return 'Must be a valid number';
    
    // Check decimal places
    if (value.includes('.') && value.split('.')[1].length > 2) {
      return 'Maximum 2 decimal places allowed';
    }
    
    return null;
  };

  // Update mutations with improved error handling
  const updatePLMutation = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      const response = await apiRequest('PUT', `/api/profit-loss/${id}`, data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/profit-loss'] });
      toast({ description: "Profit & Loss statement updated successfully" });
    },
    onError: (error: any) => {
      console.error('P&L update error:', error);
      let errorMessage = "An error occurred while updating";
      
      if (error.message.includes('400')) {
        errorMessage = "Invalid data. Please check the entered values";
      } else if (error.message.includes('404')) {
        errorMessage = "Data to be updated not found";
      }
      
      toast({ description: errorMessage, variant: "destructive" });
    }
  });

  const updateBSMutation = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      const response = await apiRequest('PUT', `/api/balance-sheet/${id}`, data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/balance-sheet'] });
      toast({ description: "Balance sheet updated successfully" });
    },
    onError: (error: any) => {
      console.error('Balance sheet update error:', error);
      let errorMessage = "An error occurred while updating";
      
      if (error.message.includes('400')) {
        errorMessage = "Invalid data. Please check the entered values";
      } else if (error.message.includes('404')) {
        errorMessage = "Data to be updated not found";
      }
      
      toast({ description: errorMessage, variant: "destructive" });
    }
  });

  const updateCFMutation = useMutation({
    mutationFn: async ({ id, data }: { id: string; data: any }) => {
      const response = await apiRequest('PUT', `/api/cash-flow/${id}`, data);
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/cash-flow'] });
      toast({ description: "Cash flow statement updated successfully" });
    },
    onError: (error: any) => {
      console.error('Cash flow update error:', error);
      let errorMessage = "An error occurred while updating";
      
      if (error.message.includes('400')) {
        errorMessage = "Invalid data. Please check the entered values";
      } else if (error.message.includes('404')) {
        errorMessage = "Data to be updated not found";
      }
      
      toast({ description: errorMessage, variant: "destructive" });
    }
  });

  // Edit cell functions
  const startEditing = (cellKey: string, currentValue: string) => {
    setEditingCells(prev => ({ ...prev, [cellKey]: currentValue }));
  };

  const saveEdit = async (cellKey: string, itemId: string, field: string, reportType: 'pl' | 'bs' | 'cf') => {
    const newValue = editingCells[cellKey];
    
    // Client-side validation
    const validationError = validateNumericInput(newValue);
    if (validationError) {
      setValidationErrors(prev => ({ ...prev, [cellKey]: validationError }));
      toast({ 
        description: validationError, 
        variant: "destructive" 
      });
      return;
    }

    // Clear any existing validation errors for this cell
    setValidationErrors(prev => {
      const newState = { ...prev };
      delete newState[cellKey];
      return newState;
    });
    
    try {
      if (reportType === 'pl') {
        await updatePLMutation.mutateAsync({ 
          id: itemId, 
          data: { [field]: newValue } 
        });
      } else if (reportType === 'bs') {
        await updateBSMutation.mutateAsync({ 
          id: itemId, 
          data: { [field]: newValue } 
        });
      } else if (reportType === 'cf') {
        await updateCFMutation.mutateAsync({ 
          id: itemId, 
          data: { [field]: newValue } 
        });
      }

      setEditingCells(prev => {
        const newState = { ...prev };
        delete newState[cellKey];
        return newState;
      });
    } catch (error) {
      // Error handling is done in the mutation onError callbacks
      console.error('Save edit error:', error);
    }
  };

  const cancelEdit = (cellKey: string) => {
    setEditingCells(prev => {
      const newState = { ...prev };
      delete newState[cellKey];
      return newState;
    });
    
    // Clear any validation errors for this cell
    setValidationErrors(prev => {
      const newState = { ...prev };
      delete newState[cellKey];
      return newState;
    });
  };

  // Format number for display
  const formatNumber = (value: string | number) => {
    const num = typeof value === 'string' ? parseFloat(value) : value;
    return new Intl.NumberFormat('en-US', {
      minimumFractionDigits: 0,
      maximumFractionDigits: 2
    }).format(num);
  };

  // Editable cell component
  const EditableCell = ({ 
    value, 
    itemId, 
    field, 
    reportType, 
    isEditable = true, 
    className = "" 
  }: {
    value: string;
    itemId: string;
    field: string;
    reportType: 'pl' | 'bs' | 'cf';
    isEditable?: boolean;
    className?: string;
  }) => {
    const cellKey = `${itemId}-${field}`;
    const isEditing = cellKey in editingCells;
    const hasError = cellKey in validationErrors;
    const isSaving = updatePLMutation.isPending || updateBSMutation.isPending || updateCFMutation.isPending;

    if (!isEditable) {
      return (
        <TableCell className={`text-right font-medium text-base py-4 px-6 ${className}`} data-testid={`cell-readonly-${field}`}>
          <span className="text-foreground">{formatNumber(value)}</span>
        </TableCell>
      );
    }

    if (isEditing) {
      return (
        <TableCell className="text-right p-2" data-testid={`cell-editing-${field}`}>
          <div className="flex flex-col gap-1">
            <div className="flex items-center gap-1">
              <Input
                value={editingCells[cellKey]}
                onChange={(e) => {
                  setEditingCells(prev => ({ ...prev, [cellKey]: e.target.value }));
                  // Clear validation error on input change
                  if (hasError) {
                    setValidationErrors(prev => {
                      const newState = { ...prev };
                      delete newState[cellKey];
                      return newState;
                    });
                  }
                }}
                className={`h-8 text-right ${hasError ? 'border-red-500 focus:border-red-500' : ''}`}
                type="number"
                step="0.01"
                disabled={isSaving}
                data-testid={`input-edit-${field}`}
              />
              <Button
                size="sm"
                variant="ghost"
                onClick={() => saveEdit(cellKey, itemId, field, reportType)}
                className="h-8 w-8 p-0"
                disabled={isSaving}
                data-testid={`button-save-${field}`}
              >
                {isSaving ? (
                  <div className="h-4 w-4 animate-spin rounded-full border-2 border-green-600 border-t-transparent" />
                ) : (
                  <Check className="h-4 w-4 text-green-600" />
                )}
              </Button>
              <Button
                size="sm"
                variant="ghost"
                onClick={() => cancelEdit(cellKey)}
                className="h-8 w-8 p-0"
                disabled={isSaving}
                data-testid={`button-cancel-${field}`}
              >
                <X className="h-4 w-4 text-red-600" />
              </Button>
            </div>
            {hasError && (
              <div className="flex items-center gap-1 text-xs text-red-600">
                <AlertCircle className="h-3 w-3" />
                <span>{validationErrors[cellKey]}</span>
              </div>
            )}
          </div>
        </TableCell>
      );
    }

    return (
      <TableCell 
        className={`text-right cursor-pointer hover:bg-muted/50 ${className}`}
        onClick={() => startEditing(cellKey, value)}
        data-testid={`cell-editable-${field}`}
      >
        <div className="flex items-center justify-end gap-2">
          {formatNumber(value)}
          <Edit2 className="h-3 w-3 opacity-50" />
        </div>
      </TableCell>
    );
  };

  // Collapsible Table Section Component
  interface CollapsibleSectionProps {
    title: string;
    sectionKey: string;
    children: React.ReactNode;
    statements: any[];
    className?: string;
    isSubSection?: boolean;
    showToggle?: boolean;
    prefix?: string;
    calculateTotal?: boolean;
    totalFields?: string[];
  }

  const CollapsibleTableSection = ({ 
    title, 
    sectionKey, 
    children, 
    statements,
    className = "",
    isSubSection = false,
    showToggle = true,
    prefix = "",
    calculateTotal = false,
    totalFields = []
  }: CollapsibleSectionProps) => {
    const namespacedKey = prefix ? `${prefix}-${sectionKey}` : sectionKey;
    const collapsed = isCollapsed(namespacedKey);
    const indentClass = isSubSection ? "pl-8" : "pl-6";
    
    // Calculate totals if needed
    const sectionTotals = calculateTotal && totalFields.length > 0 
      ? calculateSectionTotal(statements, totalFields)
      : [];
    
    return (
      <>
        <TableRow 
          className={`${className} ${collapsed ? 'border-b border-border/30' : ''}`}
        >
          <TableCell 
            className={`font-bold sticky left-0 bg-muted/60 z-10 border-r border-border/50 py-3 px-4 text-foreground ${indentClass}`}
            onClick={showToggle ? () => toggleSection(namespacedKey) : undefined}
            style={{ cursor: showToggle ? 'pointer' : 'default' }}
            data-testid={`section-${sectionKey}`}
            role={showToggle ? "button" : undefined}
            aria-expanded={showToggle ? !collapsed : undefined}
            aria-controls={showToggle ? `section-content-${namespacedKey}` : undefined}
          >
            <div className="flex items-center gap-2">
              {showToggle && (
                <Button
                  variant="ghost"
                  size="sm"
                  className="h-6 w-6 p-0 hover:bg-muted/80"
                  onClick={(e) => {
                    e.stopPropagation();
                    toggleSection(namespacedKey);
                  }}
                  data-testid={`toggle-${sectionKey}`}
                  aria-label={`${collapsed ? 'Expand' : 'Collapse'} ${title} section`}
                >
                  {collapsed ? (
                    <Plus className="h-4 w-4 text-muted-foreground" />
                  ) : (
                    <Minus className="h-4 w-4 text-muted-foreground" />
                  )}
                </Button>
              )}
              <span className={isSubSection ? "text-sm" : "text-base"}>{title}</span>
            </div>
          </TableCell>
          {statements.map((statement, index) => (
            <TableCell 
              key={`${statement.id}-${sectionKey}`}
              className="text-right font-medium bg-muted/40 py-3 px-6"
              data-testid={`total-${namespacedKey}-${statement.period}`}
            >
              {calculateTotal && sectionTotals.length > 0 && sectionTotals[index] !== undefined ? (
                <span className="text-foreground font-semibold">{formatNumber(sectionTotals[index])}</span>
              ) : (
                <span className="text-muted-foreground">—</span>
              )}
            </TableCell>
          ))}
        </TableRow>
        {!collapsed && children}
      </>
    );
  };

  // Section hierarchy definitions based on financial statement structure
  const financialSections = {
    profitLoss: {
      income: {
        title: "Income",
        key: "income",
        items: [
          { field: "totalRevenue", title: "Total Revenue" }
        ]
      },
      cost: {
        title: "Cost",
        key: "cost", 
        items: [
          { field: "costOfGoodsSold", title: "Cost of Goods Sold" }
        ]
      },
      grossProfit: {
        title: "Gross Profit",
        key: "grossProfit",
        isCalculated: true,
        items: [
          { field: "grossProfit", title: "Gross Profit" }
        ]
      },
      operatingExpenses: {
        title: "Operating Expenses",
        key: "operatingExpenses",
        items: [
          { field: "operatingExpenses", title: "Total Operating Expenses" }
        ]
      },
      operatingIncome: {
        title: "Operating Income",
        key: "operatingIncome",
        isCalculated: true,
        items: [
          { field: "operatingIncome", title: "Operating Income" }
        ]
      },
      otherItems: {
        title: "Other Items",
        key: "otherItems",
        items: [
          { field: "otherIncome", title: "Other Income" },
          { field: "otherExpenses", title: "Other Expenses" }
        ]
      },
      netIncome: {
        title: "Net Income",
        key: "netIncome",
        isCalculated: true,
        items: [
          { field: "netIncomeBeforeTax", title: "Income Before Tax" },
          { field: "taxExpense", title: "Tax Expense" },
          { field: "netIncome", title: "Net Income" }
        ]
      }
    },
    balanceSheet: {
      assets: {
        title: "Assets",
        key: "assets",
        sections: {
          currentAssets: {
            title: "Current Assets",
            key: "currentAssets",
            items: [
              { field: "cash", title: "Cash" },
              { field: "accountsReceivable", title: "Accounts Receivable" },
              { field: "inventory", title: "Inventory" }
            ]
          },
          nonCurrentAssets: {
            title: "Non-Current Assets", 
            key: "nonCurrentAssets",
            items: [
              { field: "propertyPlantEquipment", title: "Property, Plant & Equipment" },
              { field: "intangibleAssets", title: "Intangible Assets" }
            ]
          }
        }
      },
      liabilities: {
        title: "Liabilities",
        key: "liabilities", 
        sections: {
          currentLiabilities: {
            title: "Current Liabilities",
            key: "currentLiabilities",
            items: [
              { field: "accountsPayable", title: "Accounts Payable" },
              { field: "shortTermDebt", title: "Short-term Debt" }
            ]
          },
          longTermLiabilities: {
            title: "Long-term Liabilities",
            key: "longTermLiabilities", 
            items: [
              { field: "longTermDebt", title: "Long-term Debt" }
            ]
          }
        }
      },
      equity: {
        title: "Shareholders' Equity",
        key: "equity",
        items: [
          { field: "shareholdersEquity", title: "Total Shareholders' Equity" },
          { field: "retainedEarnings", title: "Retained Earnings" }
        ]
      }
    },
    cashFlow: {
      operating: {
        title: "Operating Activities",
        key: "operating",
        items: [
          { field: "netIncome", title: "Net Income" },
          { field: "depreciation", title: "Depreciation" },
          { field: "changeInWorkingCapital", title: "Change in Working Capital" },
          { field: "operatingCashFlow", title: "Operating Cash Flow" }
        ]
      },
      investing: {
        title: "Investing Activities", 
        key: "investing",
        items: [
          { field: "capitalExpenditures", title: "Capital Expenditures" },
          { field: "acquisitions", title: "Acquisitions" },
          { field: "investingCashFlow", title: "Investing Cash Flow" }
        ]
      },
      financing: {
        title: "Financing Activities",
        key: "financing",
        items: [
          { field: "debtIssuance", title: "Debt Issuance" },
          { field: "debtRepayment", title: "Debt Repayment" },
          { field: "dividendsPaid", title: "Dividends Paid" },
          { field: "financingCashFlow", title: "Financing Cash Flow" }
        ]
      },
      netCashChange: {
        title: "Net Change in Cash",
        key: "netCashChange",
        isCalculated: true,
        items: [
          { field: "netChangeInCash", title: "Net Change in Cash" },
          { field: "beginningCashBalance", title: "Beginning Cash Balance" },
          { field: "endingCashBalance", title: "Ending Cash Balance" }
        ]
      }
    }
  };

  // Profit & Loss Table Component - Comparative View
  const ProfitLossTable = () => {
    if (plLoading) {
      return (
        <div className="p-12 text-center" data-testid="loading-pl">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <span className="text-lg font-medium text-muted-foreground">Loading data...</span>
          </div>
          <p className="text-sm text-muted-foreground">Please wait</p>
        </div>
      );
    }

    if (plStatements.length === 0) {
      return <div className="p-8 text-center text-muted-foreground">No profit & loss data available</div>;
    }

    // Group statements by topic and sort periods
    const groupedStatements = plStatements.reduce((acc, statement) => {
      if (!acc[statement.topic]) acc[statement.topic] = [];
      acc[statement.topic].push(statement);
      return acc;
    }, {} as Record<string, ProfitLossStatement[]>);

    // Sort periods for each topic
    Object.keys(groupedStatements).forEach(topic => {
      groupedStatements[topic].sort((a, b) => a.period.localeCompare(b.period));
    });

    return (
      <div className="space-y-6">
        {Object.entries(groupedStatements).map(([topic, statements]) => {
          const firstStatement = statements[0];
          const editableFields = JSON.parse(firstStatement?.isEditable || '{}');

          return (
            <Card key={topic} className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid={`pl-comparative-${topic}`}>
              <CardHeader className="bg-muted/50 border-b border-border/50">
                <CardTitle className="flex items-center gap-3 text-xl font-bold">
                  <div className="p-2 rounded-lg bg-primary/10 border border-primary/20">
                    <Calculator className="h-6 w-6 text-primary" />
                  </div>
                  <div>
                    <span className="text-foreground">Profit & Loss Statement</span>
                    <div className="text-sm font-normal text-muted-foreground">{topic}</div>
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent className="p-0">
                <div className="overflow-x-auto">
                  <Table className="min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden">
                    <TableHeader>
                      <TableRow className="bg-muted/70 border-b-2 border-border">
                        <TableHead className="sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6">Line Item</TableHead>
                        {statements.map((statement) => (
                          <TableHead key={statement.period} className="text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6" data-testid={`header-${statement.period}`}>
                            {statement.period}
                          </TableHead>
                        ))}
                      </TableRow>
                    </TableHeader>
                  <TableBody>
                    {/* Income Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.income.title}
                      sectionKey={financialSections.profitLoss.income.key}
                      statements={statements}
                      className="bg-muted/30 dark:bg-muted/20"
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['totalRevenue']}
                    >
                      {financialSections.profitLoss.income.items.map((item) => (
                        <TableRow key={item.field}>
                          <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Cost Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.cost.title}
                      sectionKey={financialSections.profitLoss.cost.key}
                      statements={statements}
                      className="bg-muted/30 dark:bg-muted/20"
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['costOfGoodsSold']}
                    >
                      {financialSections.profitLoss.cost.items.map((item) => (
                        <TableRow key={item.field}>
                          <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Gross Profit - Calculated Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.grossProfit.title}
                      sectionKey={financialSections.profitLoss.grossProfit.key}
                      statements={statements}
                      className="border-t-2 bg-primary/10 dark:bg-primary/5"
                      showToggle={false}
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['grossProfit']}
                    >
                      {financialSections.profitLoss.grossProfit.items.map((item) => (
                        <TableRow key={item.field} className="bg-primary/5 dark:bg-primary/5">
                          <TableCell className="font-bold sticky left-0 bg-primary/10 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                              className="font-bold"
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Operating Expenses Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.operatingExpenses.title}
                      sectionKey={financialSections.profitLoss.operatingExpenses.key}
                      statements={statements}
                      className="bg-muted/30 dark:bg-muted/20"
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['operatingExpenses']}
                    >
                      {financialSections.profitLoss.operatingExpenses.items.map((item) => (
                        <TableRow key={item.field}>
                          <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Operating Income - Calculated Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.operatingIncome.title}
                      sectionKey={financialSections.profitLoss.operatingIncome.key}
                      statements={statements}
                      className="border-t-2 bg-primary/10 dark:bg-primary/5"
                      showToggle={false}
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['operatingIncome']}
                    >
                      {financialSections.profitLoss.operatingIncome.items.map((item) => (
                        <TableRow key={item.field} className="bg-primary/5 dark:bg-primary/5">
                          <TableCell className="font-bold sticky left-0 bg-primary/10 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                              className="font-bold"
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Other Items Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.otherItems.title}
                      sectionKey={financialSections.profitLoss.otherItems.key}
                      statements={statements}
                      className="bg-muted/30 dark:bg-muted/20"
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['otherIncome', 'otherExpenses']}
                    >
                      {financialSections.profitLoss.otherItems.items.map((item) => (
                        <TableRow key={item.field}>
                          <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>

                    {/* Net Income Section - Final Calculated Section */}
                    <CollapsibleTableSection 
                      title={financialSections.profitLoss.netIncome.title}
                      sectionKey={financialSections.profitLoss.netIncome.key}
                      statements={statements}
                      className="border-t-2 bg-primary/15 dark:bg-primary/10"
                      showToggle={false}
                      prefix={`pl-${topic}`}
                      calculateTotal={true}
                      totalFields={['netIncome']}
                    >
                      {financialSections.profitLoss.netIncome.items.map((item, index) => (
                        <TableRow key={item.field} className={index === financialSections.profitLoss.netIncome.items.length - 1 ? "bg-primary/20 dark:bg-primary/15" : "bg-primary/10 dark:bg-primary/5"}>
                          <TableCell className={`${index === financialSections.profitLoss.netIncome.items.length - 1 ? "font-bold text-lg" : "font-bold"} sticky left-0 bg-primary/20 z-10 border-r border-border/50 pl-12`}>
                            {item.title}
                          </TableCell>
                          {statements.map((statement) => (
                            <EditableCell
                              key={`${statement.id}-${item.field}`}
                              value={statement[item.field as keyof ProfitLossStatement] as string}
                              itemId={statement.id}
                              field={item.field}
                              reportType="pl"
                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                              className={index === financialSections.profitLoss.netIncome.items.length - 1 ? "font-bold text-lg" : "font-bold"}
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>
                  </TableBody>
                </Table>
                </div>
              </CardContent>
            </Card>
          );
        })}
      </div>
    );
  };

  // Balance Sheet Table Component - Comparative View
  const BalanceSheetTable = () => {
    if (bsLoading) {
      return (
        <div className="p-12 text-center" data-testid="loading-bs">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <span className="text-lg font-medium text-muted-foreground">Loading data...</span>
          </div>
          <p className="text-sm text-muted-foreground">Please wait</p>
        </div>
      );
    }

    if (balanceSheets.length === 0) {
      return <div className="p-8 text-center text-muted-foreground">No balance sheet data available</div>;
    }

    // Group statements by topic and sort periods
    const groupedSheets = balanceSheets.reduce((acc, sheet) => {
      if (!acc[sheet.topic]) acc[sheet.topic] = [];
      acc[sheet.topic].push(sheet);
      return acc;
    }, {} as Record<string, BalanceSheet[]>);

    // Sort periods for each topic
    Object.keys(groupedSheets).forEach(topic => {
      groupedSheets[topic].sort((a, b) => a.period.localeCompare(b.period));
    });

    return (
      <div className="space-y-6">
        {Object.entries(groupedSheets).map(([topic, sheets]) => (
          <Card key={topic} className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid={`bs-comparative-${topic}`}>
            <CardHeader className="bg-muted/50 border-b border-border/50">
              <CardTitle className="flex items-center gap-3 text-xl font-bold">
                <div className="p-2 rounded-lg bg-primary/10 border border-primary/20">
                  <BarChart3 className="h-6 w-6 text-primary" />
                </div>
                <div>
                  <span className="text-foreground">Balance Sheet</span>
                  <div className="text-sm font-normal text-muted-foreground">{topic}</div>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <Table className="min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden">
                  <TableHeader>
                    <TableRow className="bg-muted/70 border-b-2 border-border">
                      <TableHead className="sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6">Line Item</TableHead>
                      {sheets.map((sheet) => (
                        <TableHead key={sheet.period} className="text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6" data-testid={`header-${sheet.period}`}>
                          {sheet.period}
                        </TableHead>
                      ))}
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {/* Assets Section */}
                    <CollapsibleTableSection 
                      title={financialSections.balanceSheet.assets.title}
                      sectionKey={financialSections.balanceSheet.assets.key}
                      statements={sheets}
                      className="bg-muted/40 dark:bg-muted/30 border-t border-border/30"
                      prefix={`bs-${topic}`}
                      calculateTotal={true}
                      totalFields={['totalAssets']}
                    >
                      {/* Current Assets Subsection */}
                      <CollapsibleTableSection 
                        title={financialSections.balanceSheet.assets.sections?.currentAssets.title}
                        sectionKey={financialSections.balanceSheet.assets.sections?.currentAssets.key}
                        statements={sheets}
                        className="bg-muted/30 dark:bg-muted/20"
                        isSubSection={true}
                        prefix={`bs-${topic}`}
                        calculateTotal={true}
                        totalFields={['cash', 'accountsReceivable', 'inventory']}
                      >
                        {financialSections.balanceSheet.assets.sections?.currentAssets.items.map((item) => (
                          <TableRow key={item.field}>
                            <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-16">
                              {item.title}
                            </TableCell>
                            {sheets.map((sheet) => (
                              <EditableCell
                                key={`${sheet.id}-${item.field}`}
                                value={sheet[item.field as keyof BalanceSheet] as string}
                                itemId={sheet.id}
                                field={item.field}
                                reportType="bs"
                                isEditable={JSON.parse(sheet.isEditable || '{}')[item.field]}
                              />
                            ))}
                          </TableRow>
                        ))}
                      </CollapsibleTableSection>

                      {/* Non-Current Assets Subsection */}
                      <CollapsibleTableSection 
                        title={financialSections.balanceSheet.assets.sections?.nonCurrentAssets.title}
                        sectionKey={financialSections.balanceSheet.assets.sections?.nonCurrentAssets.key}
                        statements={sheets}
                        className="bg-muted/30 dark:bg-muted/20"
                        isSubSection={true}
                        prefix={`bs-${topic}`}
                        calculateTotal={true}
                        totalFields={['propertyPlantEquipment', 'intangibleAssets']}
                      >
                        {financialSections.balanceSheet.assets.sections?.nonCurrentAssets.items.map((item) => (
                          <TableRow key={item.field}>
                            <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-16">
                              {item.title}
                            </TableCell>
                            {sheets.map((sheet) => (
                              <EditableCell
                                key={`${sheet.id}-${item.field}`}
                                value={sheet[item.field as keyof BalanceSheet] as string}
                                itemId={sheet.id}
                                field={item.field}
                                reportType="bs"
                                isEditable={JSON.parse(sheet.isEditable || '{}')[item.field]}
                              />
                            ))}
                          </TableRow>
                        ))}
                      </CollapsibleTableSection>

                      {/* Total Assets Row */}
                      <TableRow className="border-t-2 bg-primary/10 dark:bg-primary/5">
                        <TableCell className="font-bold text-lg sticky left-0 bg-primary/20 z-10 border-r border-border/50 py-4 px-12 text-foreground">
                          Total Assets
                        </TableCell>
                        {sheets.map((sheet) => (
                          <EditableCell
                            key={`${sheet.id}-totalAssets`}
                            value={sheet.totalAssets}
                            itemId={sheet.id}
                            field="totalAssets"
                            reportType="bs"
                            isEditable={JSON.parse(sheet.isEditable || '{}').totalAssets}
                            className="font-bold text-lg"
                          />
                        ))}
                      </TableRow>
                    </CollapsibleTableSection>

                    {/* Liabilities Section */}
                    <CollapsibleTableSection 
                      title={financialSections.balanceSheet.liabilities.title}
                      sectionKey={financialSections.balanceSheet.liabilities.key}
                      statements={sheets}
                      className="bg-muted/40 dark:bg-muted/30"
                      prefix={`bs-${topic}`}
                      calculateTotal={true}
                      totalFields={['totalLiabilities']}
                    >
                      {/* Current Liabilities Subsection */}
                      <CollapsibleTableSection 
                        title={financialSections.balanceSheet.liabilities.sections?.currentLiabilities.title}
                        sectionKey={financialSections.balanceSheet.liabilities.sections?.currentLiabilities.key}
                        statements={sheets}
                        className="bg-muted/30 dark:bg-muted/20"
                        isSubSection={true}
                        prefix={`bs-${topic}`}
                        calculateTotal={true}
                        totalFields={['accountsPayable', 'shortTermDebt']}
                      >
                        {financialSections.balanceSheet.liabilities.sections?.currentLiabilities.items.map((item) => (
                          <TableRow key={item.field}>
                            <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-16">
                              {item.title}
                            </TableCell>
                            {sheets.map((sheet) => (
                              <EditableCell
                                key={`${sheet.id}-${item.field}`}
                                value={sheet[item.field as keyof BalanceSheet] as string}
                                itemId={sheet.id}
                                field={item.field}
                                reportType="bs"
                                isEditable={JSON.parse(sheet.isEditable || '{}')[item.field]}
                              />
                            ))}
                          </TableRow>
                        ))}
                      </CollapsibleTableSection>

                      {/* Long-term Liabilities Subsection */}
                      <CollapsibleTableSection 
                        title={financialSections.balanceSheet.liabilities.sections?.longTermLiabilities.title}
                        sectionKey={financialSections.balanceSheet.liabilities.sections?.longTermLiabilities.key}
                        statements={sheets}
                        className="bg-muted/30 dark:bg-muted/20"
                        isSubSection={true}
                        prefix={`bs-${topic}`}
                        calculateTotal={true}
                        totalFields={['longTermDebt']}
                      >
                        {financialSections.balanceSheet.liabilities.sections?.longTermLiabilities.items.map((item) => (
                          <TableRow key={item.field}>
                            <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-16">
                              {item.title}
                            </TableCell>
                            {sheets.map((sheet) => (
                              <EditableCell
                                key={`${sheet.id}-${item.field}`}
                                value={sheet[item.field as keyof BalanceSheet] as string}
                                itemId={sheet.id}
                                field={item.field}
                                reportType="bs"
                                isEditable={JSON.parse(sheet.isEditable || '{}')[item.field]}
                              />
                            ))}
                          </TableRow>
                        ))}
                      </CollapsibleTableSection>

                      {/* Total Liabilities Row */}
                      <TableRow className="border-t-2 bg-primary/10 dark:bg-primary/5">
                        <TableCell className="font-bold text-lg sticky left-0 bg-primary/20 z-10 border-r border-border/50 py-4 px-12 text-foreground">
                          Total Liabilities
                        </TableCell>
                        {sheets.map((sheet) => (
                          <EditableCell
                            key={`${sheet.id}-totalLiabilities`}
                            value={sheet.totalLiabilities}
                            itemId={sheet.id}
                            field="totalLiabilities"
                            reportType="bs"
                            isEditable={JSON.parse(sheet.isEditable || '{}').totalLiabilities}
                            className="font-bold text-lg"
                          />
                        ))}
                      </TableRow>
                    </CollapsibleTableSection>

                    {/* Equity Section */}
                    <CollapsibleTableSection 
                      title={financialSections.balanceSheet.equity.title}
                      sectionKey={financialSections.balanceSheet.equity.key}
                      statements={sheets}
                      className="bg-muted/40 dark:bg-muted/30"
                      prefix={`bs-${topic}`}
                      calculateTotal={true}
                      totalFields={['shareholdersEquity', 'retainedEarnings']}
                    >
                      {financialSections.balanceSheet.equity.items.map((item) => (
                        <TableRow key={item.field}>
                          <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                            {item.title}
                          </TableCell>
                          {sheets.map((sheet) => (
                            <EditableCell
                              key={`${sheet.id}-${item.field}`}
                              value={sheet[item.field as keyof BalanceSheet] as string}
                              itemId={sheet.id}
                              field={item.field}
                              reportType="bs"
                              isEditable={JSON.parse(sheet.isEditable || '{}')[item.field]}
                              className="font-bold"
                            />
                          ))}
                        </TableRow>
                      ))}
                    </CollapsibleTableSection>
                  </TableBody>
                </Table>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  };

  // Cash Flow Table Component - Comparative View
  const CashFlowTable = () => {
    if (cfLoading) {
      return (
        <div className="p-12 text-center" data-testid="loading-cf">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
            <span className="text-lg font-medium text-muted-foreground">Loading data...</span>
          </div>
          <p className="text-sm text-muted-foreground">Please wait</p>
        </div>
      );
    }

    if (cashFlowStatements.length === 0) {
      return <div className="p-8 text-center text-muted-foreground">No cash flow data available</div>;
    }

    // Group statements by topic and sort periods
    const groupedStatements = cashFlowStatements.reduce((acc, statement) => {
      if (!acc[statement.topic]) acc[statement.topic] = [];
      acc[statement.topic].push(statement);
      return acc;
    }, {} as Record<string, CashFlowStatement[]>);

    // Sort periods for each topic
    Object.keys(groupedStatements).forEach(topic => {
      groupedStatements[topic].sort((a, b) => a.period.localeCompare(b.period));
    });

    return (
      <div className="space-y-6">
        {Object.entries(groupedStatements).map(([topic, statements]) => (
          <Card key={topic} className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid={`cf-comparative-${topic}`}>
            <CardHeader className="bg-muted/50 border-b border-border/50">
              <CardTitle className="flex items-center gap-3 text-xl font-bold">
                <div className="p-2 rounded-lg bg-primary/10 border border-primary/20">
                  <TrendingUp className="h-6 w-6 text-primary" />
                </div>
                <div>
                  <span className="text-foreground">Cash Flow Statement</span>
                  <div className="text-sm font-normal text-muted-foreground">{topic}</div>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="overflow-x-auto">
                <Table className="min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden">
                  <TableHeader>
                    <TableRow className="bg-muted/70 border-b-2 border-border">
                      <TableHead className="sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6">Line Item</TableHead>
                      {statements.map((statement) => (
                        <TableHead key={statement.period} className="text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6" data-testid={`header-${statement.period}`}>
                          {statement.period}
                        </TableHead>
                      ))}
                    </TableRow>
                  </TableHeader>
                <TableBody>
                  {/* Operating Activities Section */}
                  <CollapsibleTableSection 
                    title={financialSections.cashFlow.operating.title}
                    sectionKey={financialSections.cashFlow.operating.key}
                    statements={statements}
                    className="bg-muted/30 dark:bg-muted/20"
                    prefix={`cf-${topic}`}
                    calculateTotal={true}
                    totalFields={['operatingCashFlow']}
                  >
                    {financialSections.cashFlow.operating.items.map((item) => (
                      <TableRow key={item.field}>
                        <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                          {item.title}
                        </TableCell>
                        {statements.map((statement) => (
                          <EditableCell
                            key={`${statement.id}-${item.field}`}
                            value={statement[item.field as keyof CashFlowStatement] as string}
                            itemId={statement.id}
                            field={item.field}
                            reportType="cf"
                            isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            className={item.field === 'operatingCashFlow' ? 'font-bold' : ''}
                          />
                        ))}
                      </TableRow>
                    ))}
                  </CollapsibleTableSection>

                  {/* Investing Activities Section */}
                  <CollapsibleTableSection 
                    title={financialSections.cashFlow.investing.title}
                    sectionKey={financialSections.cashFlow.investing.key}
                    statements={statements}
                    className="bg-muted/30 dark:bg-muted/20"
                    prefix={`cf-${topic}`}
                    calculateTotal={true}
                    totalFields={['investingCashFlow']}
                  >
                    {financialSections.cashFlow.investing.items.map((item) => (
                      <TableRow key={item.field}>
                        <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                          {item.title}
                        </TableCell>
                        {statements.map((statement) => (
                          <EditableCell
                            key={`${statement.id}-${item.field}`}
                            value={statement[item.field as keyof CashFlowStatement] as string}
                            itemId={statement.id}
                            field={item.field}
                            reportType="cf"
                            isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            className={item.field === 'investingCashFlow' ? 'font-bold' : ''}
                          />
                        ))}
                      </TableRow>
                    ))}
                  </CollapsibleTableSection>

                  {/* Financing Activities Section */}
                  <CollapsibleTableSection 
                    title={financialSections.cashFlow.financing.title}
                    sectionKey={financialSections.cashFlow.financing.key}
                    statements={statements}
                    className="bg-muted/30 dark:bg-muted/20"
                    prefix={`cf-${topic}`}
                    calculateTotal={true}
                    totalFields={['financingCashFlow']}
                  >
                    {financialSections.cashFlow.financing.items.map((item) => (
                      <TableRow key={item.field}>
                        <TableCell className="font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12">
                          {item.title === 'Debt Issuance' ? 'Loan Proceeds' : item.title === 'Debt Repayment' ? 'Debt Repayments' : item.title}
                        </TableCell>
                        {statements.map((statement) => (
                          <EditableCell
                            key={`${statement.id}-${item.field}`}
                            value={statement[item.field as keyof CashFlowStatement] as string}
                            itemId={statement.id}
                            field={item.field}
                            reportType="cf"
                            isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            className={item.field === 'financingCashFlow' ? 'font-bold' : ''}
                          />
                        ))}
                      </TableRow>
                    ))}
                  </CollapsibleTableSection>

                  {/* Net Change in Cash Section */}
                  <CollapsibleTableSection 
                    title={financialSections.cashFlow.netCashChange.title}
                    sectionKey={financialSections.cashFlow.netCashChange.key}
                    statements={statements}
                    className="border-t-2 bg-primary/15 dark:bg-primary/10"
                    showToggle={false}
                    prefix={`cf-${topic}`}
                    calculateTotal={true}
                    totalFields={['netChangeInCash']}
                  >
                    {financialSections.cashFlow.netCashChange.items.map((item, index) => (
                      <TableRow key={item.field} className={item.field === 'netChangeInCash' ? "bg-primary/20 dark:bg-primary/15" : "bg-primary/10 dark:bg-primary/5"}>
                        <TableCell className={`${item.field === 'netChangeInCash' ? "font-bold text-lg" : "font-bold"} sticky left-0 bg-primary/20 z-10 border-r border-border/50 pl-12`}>
                          {item.title}
                        </TableCell>
                        {statements.map((statement) => (
                          <EditableCell
                            key={`${statement.id}-${item.field}`}
                            value={statement[item.field as keyof CashFlowStatement] as string}
                            itemId={statement.id}
                            field={item.field}
                            reportType="cf"
                            isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}
                            className={item.field === 'netChangeInCash' ? "font-bold text-lg" : item.field === 'endingCashBalance' ? "font-bold text-lg" : "font-bold"}
                          />
                        ))}
                      </TableRow>
                    ))}
                  </CollapsibleTableSection>
                </TableBody>
              </Table>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  };

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* Background */}
      <div 
        className="absolute inset-0 bg-cover bg-center bg-no-repeat"
        style={{ backgroundImage: `url(${heroBackground})` }}
      />
      <div className="absolute inset-0 bg-gradient-to-br from-primary/20 via-background/60 to-background/80" />
      
      <div className="relative z-10">
        <Navigation />
        
        {/* Hero Section */}
        <section className="py-24">
        <div className="container mx-auto px-6">
          <div className="text-center space-y-6">
            <h1 className="text-5xl md:text-6xl font-black text-foreground mb-6 leading-tight" data-testid="page-title">
              Financial Reports
              <span className="bg-gradient-to-r from-chart-1 to-chart-2 bg-clip-text text-transparent"> Suite</span>
            </h1>
            <p className="text-xl md:text-2xl text-foreground/80 max-w-4xl mx-auto leading-relaxed font-medium" data-testid="page-description">
              View and edit financial reports including Profit & Loss statements, Balance Sheets, and Cash Flow statements with real-time intelligent analysis
            </p>
            <div className="flex justify-center gap-4 text-sm text-muted-foreground">
              <Badge variant="outline" className="px-4 py-2">
                <strong className="text-foreground">Live Data</strong> Updated
              </Badge>
              <Badge variant="outline" className="px-4 py-2">
                <strong className="text-foreground">AI-Powered</strong> Analysis
              </Badge>
              <Badge variant="outline" className="px-4 py-2">
                <strong className="text-foreground">Real-time</strong> Editable
              </Badge>
            </div>
          </div>
        </div>
      </section>

      <main className="container mx-auto px-6 py-12">
        <div className="max-w-7xl mx-auto space-y-8">

          {/* Enhanced Filters Section */}
          <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300 mb-8">
            <CardHeader className="pb-4">
              <div className="flex items-center gap-3">
                <div className="p-2 rounded-lg bg-primary/10">
                  <Filter className="h-5 w-5 text-primary" />
                </div>
                <div>
                  <CardTitle className="text-xl font-bold text-foreground">Data Filters</CardTitle>
                  <p className="text-base text-foreground/70 mt-1">Select the data you want to view</p>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div className="space-y-2">
                  <label className="text-base font-semibold text-foreground">Topic</label>
                  <Select value={selectedTopic} onValueChange={setSelectedTopic}>
                    <SelectTrigger className="w-full bg-background/80 border-muted focus:border-primary transition-colors" data-testid="select-topic">
                      <SelectValue placeholder="Select topic" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="all" data-testid="option-all-topics">All Topics</SelectItem>
                      {uniqueTopics.map((topic) => (
                        <SelectItem key={topic} value={topic} data-testid={`option-topic-${topic}`}>
                          {topic}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-foreground">Start Period</label>
                  <Select value={startPeriod} onValueChange={handleStartPeriodChange}>
                    <SelectTrigger className="w-full bg-background/80 border-muted focus:border-primary transition-colors" data-testid="select-start-period">
                      <SelectValue placeholder="Select start period" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none" data-testid="option-no-start">Not specified</SelectItem>
                      {uniquePeriods.map((period) => (
                        <SelectItem key={period} value={period} data-testid={`option-start-${period}`}>
                          {period}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="space-y-2">
                  <label className="text-sm font-medium text-foreground">End Period</label>
                  <Select value={endPeriod} onValueChange={handleEndPeriodChange}>
                    <SelectTrigger className="w-full bg-background/80 border-muted focus:border-primary transition-colors" data-testid="select-end-period">
                      <SelectValue placeholder="Select end period" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none" data-testid="option-no-end">Not specified</SelectItem>
                      {uniquePeriods.map((period) => (
                        <SelectItem key={period} value={period} data-testid={`option-end-${period}`}>
                          {period}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium text-foreground">Actions</label>
                  {(selectedTopic && selectedTopic !== "all" || (startPeriod && startPeriod !== "none") || (endPeriod && endPeriod !== "none")) ? (
                    <Button
                      variant="outline"
                      className="w-full border-muted-foreground/20 hover:border-primary hover:bg-primary/5 transition-all duration-200"
                      onClick={() => {
                        setSelectedTopic("all");
                        setStartPeriod("none");
                        setEndPeriod("none");
                      }}
                      data-testid="button-clear-filters"
                    >
                      Clear Filters
                    </Button>
                  ) : (
                    <div className="h-10 flex items-center">
                      <p className="text-sm text-muted-foreground">Use filters to search</p>
                    </div>
                  )}
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Financial Metrics Dashboard */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6 mb-8">
            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-revenue">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Total Revenue</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.currentRevenue)}</p>
                    {financialMetrics.hasPreviousPL && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.revenueChange >= 0 ? (
                          <ArrowUpRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.revenueChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.revenueChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-green-100 dark:bg-green-900/20">
                    <DollarSign className="h-6 w-6 text-green-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-expenses">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Total Expenses</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.currentExpenses)}</p>
                    {financialMetrics.hasPreviousPL && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.expenseChange <= 0 ? (
                          <ArrowDownRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowUpRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.expenseChange <= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.expenseChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-red-100 dark:bg-red-900/20">
                    <TrendingUp className="h-6 w-6 text-red-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-net-income">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Net Income</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.currentNetIncome)}</p>
                    {financialMetrics.hasPreviousPL && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.netIncomeChange >= 0 ? (
                          <ArrowUpRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.netIncomeChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.netIncomeChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-blue-100 dark:bg-blue-900/20">
                    <Calculator className="h-6 w-6 text-blue-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-assets">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Total Assets</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.currentTotalAssets)}</p>
                    {financialMetrics.hasPreviousBS && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.assetsChange >= 0 ? (
                          <ArrowUpRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.assetsChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.assetsChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-purple-100 dark:bg-purple-900/20">
                    <BarChart3 className="h-6 w-6 text-purple-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-working-capital">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Working Capital</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.workingCapital)}</p>
                    {financialMetrics.hasPreviousBS && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.workingCapitalChange >= 0 ? (
                          <ArrowUpRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.workingCapitalChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.workingCapitalChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-orange-100 dark:bg-orange-900/20">
                    <PieChart className="h-6 w-6 text-orange-600" />
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300" data-testid="metric-cash-flow">
              <CardContent className="p-6">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-muted-foreground">Operating Cash Flow</p>
                    <p className="text-2xl font-bold text-foreground">${formatNumber(financialMetrics.operatingCashFlow)}</p>
                    {financialMetrics.hasPreviousCF && (
                      <div className="flex items-center mt-1">
                        {financialMetrics.operatingCashFlowChange >= 0 ? (
                          <ArrowUpRight className="h-4 w-4 text-green-600" />
                        ) : (
                          <ArrowDownRight className="h-4 w-4 text-red-600" />
                        )}
                        <span className={`text-sm ${financialMetrics.operatingCashFlowChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>
                          {Math.abs(financialMetrics.operatingCashFlowChange).toFixed(1)}%
                        </span>
                      </div>
                    )}
                  </div>
                  <div className="p-3 rounded-full bg-teal-100 dark:bg-teal-900/20">
                    <Activity className="h-6 w-6 text-teal-600" />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Enhanced Financial Reports Tabs */}
          <div className="bg-gradient-to-r from-background/50 to-muted/30 rounded-2xl p-6 backdrop-blur-sm border border-border/50">
            <div className="mb-6">
              <div className="flex items-center justify-between">
                <div>
                  <h2 className="text-2xl font-bold text-foreground flex items-center gap-3">
                    <div className="p-2 rounded-lg bg-primary/10">
                      <FileText className="h-6 w-6 text-primary" />
                    </div>
                    Financial Reports
                  </h2>
                  <p className="text-muted-foreground mt-2">Select the type of report you want to view</p>
                </div>
                
                {/* Export Buttons */}
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => {
                      const data = activeTab === 'pl' ? plStatements : 
                                   activeTab === 'bs' ? balanceSheets : cashFlowStatements;
                      const reportName = activeTab === 'pl' ? 'Profit_Loss_Statement' : 
                                        activeTab === 'bs' ? 'Balance_Sheet' : 'Cash_Flow_Statement';
                      exportToCSV(data, `${reportName}_${new Date().toISOString().split('T')[0]}.csv`, activeTab);
                    }}
                    className="gap-2 hover-elevate"
                    data-testid="button-export-csv"
                  >
                    <Download className="h-4 w-4" />
                    CSV
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => exportToPDF(activeTab)}
                    className="gap-2 hover-elevate"
                    data-testid="button-export-pdf"
                  >
                    <Printer className="h-4 w-4" />
                    PDF
                  </Button>
                </div>
              </div>
            </div>
            
            <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-8">
              <TabsList className="grid w-full grid-cols-3 p-1 bg-muted/50 backdrop-blur-sm rounded-xl border border-border/30 shadow-lg" data-testid="tabs-list">
                <TabsTrigger 
                  value="pl" 
                  className="flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10" 
                  data-testid="tab-pl"
                >
                  <Calculator className="h-5 w-5" />
                  <span className="hidden sm:inline">Profit & Loss</span>
                  <span className="sm:hidden">P&L</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="bs" 
                  className="flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10" 
                  data-testid="tab-bs"
                >
                  <BarChart3 className="h-5 w-5" />
                  <span className="hidden sm:inline">Balance Sheet</span>
                  <span className="sm:hidden">BS</span>
                </TabsTrigger>
                <TabsTrigger 
                  value="cf" 
                  className="flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10" 
                  data-testid="tab-cf"
                >
                  <TrendingUp className="h-5 w-5" />
                  <span className="hidden sm:inline">Cash Flow</span>
                  <span className="sm:hidden">CF</span>
                </TabsTrigger>
              </TabsList>

            <TabsContent value="pl" data-testid="tab-content-pl">
              <ProfitLossTable />
            </TabsContent>

            <TabsContent value="bs" data-testid="tab-content-bs">
              <BalanceSheetTable />
            </TabsContent>

            <TabsContent value="cf" data-testid="tab-content-cf">
              <CashFlowTable />
            </TabsContent>
          </Tabs>
        </div>
        </div>
      </main>
      </div>
    </div>
  );
}