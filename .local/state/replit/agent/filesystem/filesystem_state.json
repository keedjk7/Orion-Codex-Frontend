{"file_contents":{"design_guidelines.md":{"content":"# Orion Landing Page Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Mirror OpenAI Codex's exact layout, gradient aesthetic, and visual treatment while adapting content for Orion's AI-powered finance platform.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Deep navy: 225 85% 15% (primary brand)\n- Electric blue: 210 100% 60% (accent)\n- Vibrant purple: 270 85% 65% (gradient accent)\n\n**Gradients:**\n- Hero mesh: Multi-directional gradients combining navy, blue, purple, and subtle cyan\n- Section backgrounds: Subtle blue-to-purple gradients (210 40% 95% to 270 30% 97%)\n- Card overlays: Semi-transparent gradients with backdrop blur\n\n### B. Typography\n- **Primary**: Inter (Google Fonts) - clean, modern sans-serif\n- **Display**: Inter Bold/Black for hero headlines\n- **Body**: Inter Regular/Medium for content\n- **Code/Data**: JetBrains Mono for financial data displays\n\n### C. Layout System\n**Tailwind Spacing**: Use units 2, 4, 8, 12, 16, 24 consistently\n- Small gaps: p-2, m-4\n- Standard spacing: p-8, gap-8\n- Large sections: py-16, py-24\n\n### D. Component Library\n**Navigation**: Translucent header with backdrop blur, dropdown menus\n**Hero Cards**: Floating demo cards with subtle shadows and gradient borders\n**Feature Cards**: Clean white cards with colored icons and subtle hover states\n**Deep Dive Sections**: Alternating left/right layouts with large mockup images\n**Tabbed Interface**: For use cases section with smooth transitions\n**Progress Indicators**: Animated progress bars for ROI calculations\n**Interactive Elements**: Scenario builders, allocation flows with smooth animations\n\n### E. Visual Treatment\n**Background**: Animated gradient mesh similar to Codex hero\n**Floating Elements**: Demo cards positioned around hero content with subtle parallax\n**Mockup Integration**: Finance dashboard screenshots and interface mockups\n**Data Visualization**: Charts, graphs, and financial metrics displays\n**Interactive Demos**: Hover states revealing additional information\n\n## Images\n- **Large Hero Image**: Animated gradient mesh background with floating UI demo cards\n- **Feature Mockups**: Screenshots of Orion's dashboard, reporting interfaces, and analytics views\n- **Use Case Visuals**: Persona-specific interface mockups for each user type\n- **Integration Logos**: Partner and technology integration brand logos\n- **Data Visualizations**: Charts and graphs showcasing financial insights\n\n## Key Design Principles\n1. **Mirror Codex Structure**: Exact section flow and layout patterns\n2. **Gradient-Forward**: Extensive use of modern gradients throughout\n3. **Interactive Elements**: Subtle animations and hover states\n4. **Professional Finance Focus**: Clean, data-driven aesthetic appropriate for finance professionals\n5. **Floating Elements**: UI cards and demos positioned around content for visual interest\n6. **Backdrop Blur**: Liberal use of glassmorphism effects on overlays and navigation","size_bytes":2957},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/orion-landing-page-content_1757546851772.md":{"content":"# Orion Landing Page Content\n\n---\n\n## Navigation Bar\n- **Logo**: Orion (with AI sparkle icon)\n- **Nav Links**: Features | Solutions | Pricing | Resources | Docs\n- **Feature Dropdown**: Smart Reporting | Scenario Modeling | Cost Intelligence | Collaborative Planning | AI Assistant\n- **CTA Buttons**: Request Demo | Sign In\n\n---\n\n## Hero Section\n\n### Background\nGradient mesh background with animated particles suggesting data flow\n\n### Headline\n**Your AI-Powered Finance Team Companion**\n\n### Subheadline\nOne platform for all your FP&A needs—included in Orion Professional, Team, and Enterprise plans.\n\n### CTA Buttons\n- **Primary**: Get Started → \n- **Secondary**: $ npm i -g @orion/cli (copy button)\n\n### Floating Demo Cards (Positioned Around Hero Content)\n\n#### Card 1 (Top Right)\n```\n🤖 AI Anomaly Detection\n[Visual: Mini dashboard showing flagged transaction]\n\"3 unusual patterns detected in Q4 expenses\"\nStatus: Analyzing... ████████░░ 85%\n```\n\n#### Card 2 (Bottom Left)\n```\n💬 Natural Language Query\nUser: \"Why did marketing costs increase 15%?\"\nOrion: \"Campaign spend up $45K (+18%) driven by...\"\n[Show response generating in real-time]\n```\n\n#### Card 3 (Bottom Right)\n```\n📊 Scenario Modeling\n[Split screen showing 3 scenarios]\nConservative: +5% ↗️\nBase Case: +12% ↗️\nAggressive: +22% ↗️\n```\n\n#### Card 4 (Top Left)\n```\n✅ Month-End Progress\nConsolidation: ████████████ Complete\nAllocations: ████████░░░░ Running\nReports: ⏳ Queued\nTime saved: 4.5 hours\n```\n\n### Trust Indicators\n**500+ Finance Teams** | **$2B+ Analyzed Daily** | **99.9% Uptime**\n\n---\n\n## Core Features Overview Section\n\n### Section Title\n**Five Powerful Features to Transform Your FP&A**\n\n### Feature Cards (Grid Layout)\n\n#### 1. 📊 Smart Reporting\n**AI-Powered Financial Intelligence**\nReal-time data consolidation with automated anomaly detection. Your single source of financial truth.\n\n#### 2. 🔮 Scenario Modeling\n**Interactive What-If Analysis**\nTest any assumption and see instant P&L impact. Model the future with confidence.\n\n#### 3. 💡 Cost Intelligence\n**Automated Cost Allocation**\nFair, transparent, and automated cost distribution with AI-recommended drivers.\n\n#### 4. 📈 Collaborative Planning\n**Streamlined Budgeting & Forecasting**\nWeb-based workflows with real-time consolidation and AI-powered baselines.\n\n#### 5. 🤖 AI Assistant & Strategic Insights\n**Natural Language Queries + Long-Range Planning**\nAsk questions in plain English. Get strategic insights with external market intelligence.\n\n### CTA\n**[Explore All Features →]**\n\n---\n\n## Value Proposition Section\n\n### Section Title\n**Why Finance Teams Choose Orion**\n\n### Three Pillars\n\n#### 🚀 10x Faster Insights\nFrom days of Excel manipulation to instant AI-powered analysis. Ask questions in plain English, get answers with full drill-down capability.\n\n#### 🎯 99.9% Accuracy\nAutomated anomaly detection catches errors before they impact reports. Single source of truth with complete audit trails.\n\n#### 💡 Predictive Intelligence\nMove beyond historical reporting. AI-powered forecasts that learn from your patterns and external market data.\n\n---\n\n## Feature Deep Dive Sections\n\n### Feature 1: Smart Reporting\n**Your AI-Powered Financial Command Center**\n\n#### Layout: Left Content | Right Visual\n\n##### Left Section (40%)\n**Headline:** Transform raw data into actionable intelligence\n\n**Subheadline:** Starting from your existing systems, Orion navigates your financial data to surface insights, detect anomalies, and generate reports automatically.\n\n**Key Features:**\n- Automated data ingestion from any source\n- Real-time anomaly detection with AI\n- Interactive drill-down to transaction level\n- One-click period comparisons\n\n**Integration Bar:**\nCompatible with: SAP | Oracle | NetSuite | QuickBooks | Excel | Custom APIs\n\n##### Right Section (60%)\n**Interactive Dashboard Mockup:**\n```\n╔════════════════════════════════════════╗\n║  P&L Statement - December 2024         ║\n║  ⚠️ 3 Anomalies Detected               ║\n║                                        ║\n║  Revenue         $2.4M  ↑12%  ✓       ║\n║  > Product      $1.8M  ↑15%  ✓       ║\n║  > Services     $600K  ↑5%   ⚠️      ║\n║                                        ║\n║  OpEx           $1.2M  ↑8%   ⚠️      ║\n║  > Salaries     $800K  ↑5%   ✓       ║\n║  > Marketing    $200K  ↑25%  🔴      ║\n║                                        ║\n║  [Analyzing unusual marketing spend...]║\n╚════════════════════════════════════════╝\n```\n\n---\n\n### Feature 2: Scenario Modeling\n**Test Every Possibility. Prepare for Any Future.**\n\n#### Layout: Right Content | Left Visual (Alternating)\n\n##### Left Section (60%)\n**Interactive Scenario Builder:**\n```\n╔════════════════════════════════════════╗\n║  Scenario Modeling Interface           ║\n║  ┌────────────────────────────────┐   ║\n║  │ Revenue Growth: [====|====] 15% │   ║\n║  │ OpEx Increase:  [===|=====] 8%  │   ║\n║  │ Headcount:      [======|==] +20  │   ║\n║  └────────────────────────────────┘   ║\n║                                        ║\n║  Impact Analysis (Real-time)           ║\n║  ┌─────────┬──────┬──────┬──────┐    ║\n║  │Scenario │ Base │ Your │ Diff │    ║\n║  ├─────────┼──────┼──────┼──────┤    ║\n║  │Revenue  │ $10M │ $12M │ +20% │    ║\n║  │EBITDA   │ $2M  │ $2.8M│ +40% │    ║\n║  │Margin   │ 20%  │ 23%  │ +3pp │    ║\n║  └─────────┴──────┴──────┴──────┘    ║\n║                                        ║\n║  💡 AI suggests testing recession case ║\n╚════════════════════════════════════════╝\n```\n\n##### Right Section (40%)\n**Headline:** Model the future with confidence\n\n**Subheadline:** Orion runs in the background so you can test assumptions and see instant impact. Each scenario runs in an isolated sandbox without affecting your actuals.\n\n**Key Benefits:**\n- Test unlimited what-if scenarios\n- See cascading P&L effects instantly\n- Compare scenarios side-by-side\n- Get AI-powered scenario suggestions\n\n**Customer Quote:**\n*\"We modeled 15 different growth scenarios in the time it used to take us to build one spreadsheet model.\"*\n— CFO, TechScale Inc.\n\n---\n\n### Feature 3: Cost Intelligence\n**Fair. Transparent. Automated.**\n\n#### Layout: Left Content | Right Visual\n\n##### Left Section (40%)\n**Headline:** Delegate cost allocation to Orion\n\n**Subheadline:** Set up automatic allocation rules with our visual builder. Tag @orion to start allocations directly from your workflow. Orion plugs into your existing processes, running proactively so your team stays focused on strategic work.\n\n**The Orion Advantage:**\n- Visual drag-and-drop rule builder\n- AI-recommended allocation drivers\n- Full transparency for all departments\n- Complete audit trail\n\n**Progress Indicator:**\n```\nAllocating IT Costs\n████████░░ 85% Complete\n2 departments remaining • ETA: 30 seconds\n```\n\n##### Right Section (60%)\n**Allocation Flow Visualization:**\n```\n╔════════════════════════════════════════╗\n║  Cost Allocation Engine                ║\n║                                        ║\n║  IT Costs: $500K                       ║\n║  ↓                                     ║\n║  🤖 AI Recommends: Headcount Driver    ║\n║                                        ║\n║  Distribution:                         ║\n║  ├─ Sales (45 HC)      → $225K        ║\n║  ├─ Engineering (30 HC) → $150K        ║\n║  ├─ Marketing (15 HC)   → $75K         ║\n║  └─ Operations (10 HC)  → $50K         ║\n║                                        ║\n║  ✓ All departments notified            ║\n║  ✓ Audit trail generated               ║\n║  ✓ Reports available                   ║\n╚════════════════════════════════════════╝\n```\n\n---\n\n### Feature 4: Collaborative Planning\n**Budgeting That Brings Teams Together**\n\n#### Tagline\nReplace spreadsheet chaos with streamlined workflows and AI-powered insights.\n\n#### Core Capabilities:\n- **Web-Based Budget Templates**: No more email attachments and version control issues\n- **Smart Workflows**: Automated routing, approvals, and notifications\n- **Real-time Consolidation**: See company-wide impact as departments submit\n- **AI Baseline Forecasts**: Start with data-driven predictions, not guesswork\n- **Variance Tracking**: Automatic alerts when actuals deviate from plan\n\n#### The Planning Process:\n1. **AI generates baseline** using historical patterns\n2. **Departments refine** through web portal\n3. **Finance reviews** with full visibility\n4. **Leadership approves** with confidence\n\n#### Benefits by Role:\n- **Department Heads**: Simple submission, clear visibility\n- **Finance Teams**: Automated consolidation, version control\n- **Executives**: Real-time roll-ups, scenario comparison\n\n#### Screenshot Area\n[Planning workflow dashboard with approval status]\n\n---\n\n### Feature 5: AI Assistant & Strategic Insights\n**Your Financial Genius On Demand**\n\n#### Tagline\nAsk anything. Understand everything. Plan with confidence.\n\n#### Two Powerful Capabilities:\n\n##### Natural Language Financial Assistant\n**Ask Questions Like You're Talking to Your CFO**\n\nExample Queries (animated typewriter):\n- \"What were our top 5 operating expenses last quarter?\"\n- \"Why did cloud services revenue increase 15% in March?\"\n- \"Show me customer acquisition cost trends\"\n- \"Compare marketing spend to budget by campaign\"\n\n**Instant Insights**:\n- 🎙️ Voice or text input\n- 📊 Visual responses with charts\n- 📝 AI-generated variance explanations\n- 🔍 Proactive related insights\n\n##### Strategic Planning & Market Intelligence\n**See Beyond Your Four Walls**\n\n**Long-Range Planning**:\n- 3-5 year strategic models\n- Automated board deck generation\n- Scenario stress testing\n- Monte Carlo simulations\n\n**External Intelligence**:\n- Industry benchmark comparisons\n- Macroeconomic impact analysis\n- Competitor performance tracking\n- Market trend integration\n\n#### Screenshot Area\n[Split view: Natural language query interface | Strategic planning dashboard with external data]\n\n---\n\n## Use Cases by Persona\n\n### Section Title\n**Built for Every Finance Professional**\n\n### Tabs Layout:\n\n#### Tab: Finance Analyst\n**Finally, Focus on Analysis, Not Data Prep**\n\n**Priya's Day Before Orion:**\n- 3 hours exporting and consolidating data\n- 2 hours creating variance reports\n- 1 hour explaining variances\n- 0 hours on strategic analysis\n\n**Priya's Day With Orion:**\n- 0 minutes on data prep (automated)\n- 15 minutes reviewing AI-generated variances\n- 5+ hours on strategic analysis and improvements\n\n**Key Features for Analysts:**\n- Automated report generation\n- Drill-down to transaction level\n- AI-powered variance explanations\n- Excel add-in for familiar workflows\n\n---\n\n#### Tab: Financial Controller\n**Control and Compliance, Automated**\n\n**David's Wins with Orion:**\n- 🛡️ Automated anomaly detection prevents errors\n- 📋 Complete audit trails for every change\n- ⚡ Month-end close reduced by 20%\n- 🔒 SOX compliance built-in\n\n**Features David Loves:**\n- Real-time consolidation across entities\n- Automated journal entry validation\n- Role-based access controls\n- One-click regulatory reporting\n\n---\n\n#### Tab: CFO\n**Strategic Insights at the Speed of Thought**\n\n**Sarah's Strategic Advantages:**\n- Board decks generated automatically\n- Predictive forecasts with external data\n- Scenario planning in real-time\n- Natural language queries for instant insights\n\n**Executive Features:**\n- AI-generated executive summaries\n- Competitor and market intelligence\n- Long-range planning tools\n- Mobile-first dashboard design\n\n---\n\n#### Tab: Department Head\n**Your Budget, Clearly Understood**\n\n**Mark's Experience:**\n- Simple web portal for budget submission\n- Real-time spending visibility\n- Clear cost allocation explanations\n- Variance alerts before overspending\n\n**Department Features:**\n- Self-service budget tracking\n- Transparent allocation methodology\n- Collaborative planning workflows\n- Performance scorecards\n\n---\n\n## Technology & Integration Section\n\n### Title\n**Enterprise-Ready from Day One**\n\n### Security & Compliance\n- 🔒 SOC 2 Type II Certified\n- 🛡️ Bank-level encryption\n- 📋 Complete audit logs\n- 🌍 GDPR compliant\n- 🔐 SSO & MFA support\n\n### Integrations\n**Connect Your Entire Financial Stack**\n- ERP Systems: SAP, Oracle, NetSuite, Microsoft Dynamics\n- Data Sources: Snowflake, BigQuery, Redshift, PostgreSQL\n- Productivity: Excel, Google Sheets, Slack, Teams\n- BI Tools: Tableau, Power BI, Looker\n\n### API & Extensibility\nBuild custom integrations with our REST API and webhooks\n\n---\n\n## ROI Calculator Section\n\n### Title\n**Calculate Your Savings**\n\n### Interactive Calculator\n**Your Company Size**: [Dropdown: 50-200, 200-500, 500-1000, 1000+]\n**Monthly Reports Generated**: [Slider: 10-200]\n**Hours Spent on Month-End**: [Slider: 40-200]\n**Number of Finance Team Members**: [Input: Number]\n\n### Results Display\n**With Orion, you could save:**\n- ⏱️ **120 hours** per month\n- 💰 **$180,000** annually\n- 📈 **20% faster** financial close\n- 🎯 **3x more** strategic initiatives\n\n**[Get Detailed ROI Report]**\n\n---\n\n## Implementation Timeline\n\n### Title\n**Go Live in Weeks, Not Months**\n\n### Timeline Visualization\n**Week 1-2**: Data Integration & Mapping\n**Week 3-4**: Historical Data Import & Validation\n**Week 5-6**: User Training & Workflow Setup\n**Week 7-8**: Parallel Run & Fine-tuning\n**Week 9**: Full Production Launch\n\n### Support Commitment\n- Dedicated implementation specialist\n- Daily check-ins during first month\n- 24/7 support post-launch\n- Quarterly business reviews\n\n---\n\n## FAQ Section\n\n### Title\n**Frequently Asked Questions**\n\n#### Q: How long does implementation really take?\nA: Most customers are fully live within 8 weeks. Simple implementations can be done in as little as 2 weeks.\n\n#### Q: Will Orion replace our ERP system?\nA: No, Orion complements your ERP by adding intelligence and automation on top of your existing systems.\n\n#### Q: How does the AI actually work?\nA: Orion uses machine learning trained on millions of financial transactions to identify patterns, predict trends, and explain variances.\n\n#### Q: Is our data secure?\nA: Absolutely. We're SOC 2 Type II certified with bank-level encryption. Your data never trains our models without explicit permission.\n\n#### Q: Can we keep using Excel?\nA: Yes! Orion includes an Excel add-in so you can access AI insights within your familiar spreadsheet environment.\n\n#### Q: What if we need custom features?\nA: Our Enterprise plan includes custom development. Our API also allows your team to build extensions.\n\n---\n\n## Learn More Section\n\n### Title\n**Learn More**\n\n### Subtitle\nOrion is included in Professional, Team, and Enterprise plans. Get the most out of it with these guides.\n\n### Deployment Options (Three Gradient Cards)\n\n#### Card 1: Web Platform\n**Background:** Gradient mesh (blue to purple)\n**Icon:** 🌐 \n**Title:** Web Platform\n**Description:** Access Orion from any browser with our cloud-based platform. No installation required.\n**Link:** Orion Web Guide →\n\n#### Card 2: Desktop App\n**Background:** Gradient mesh (purple to pink)\n**Icon:** 💻\n**Title:** Desktop App\n**Description:** Native desktop application for Windows, Mac, and Linux with offline capabilities.\n**Link:** Orion Desktop Guide →\n\n#### Card 3: API & CLI\n**Background:** Gradient mesh (blue to cyan)\n**Icon:** ⚡\n**Title:** API & CLI\n**Description:** Integrate Orion into your workflows with our REST API and command-line tools.\n**Link:** Orion API Docs →\n\n### Additional Resources Grid\n\n#### Quick Start Guides\n- 📚 Getting Started with Orion\n- 🎥 Video Walkthrough (5 min)\n- 🔧 Setup Your First Report\n- 🤝 Team Onboarding Guide\n\n#### Advanced Features\n- 🧠 AI Model Customization\n- 📊 Custom Dashboard Builder\n- 🔄 Workflow Automation\n- 📈 Advanced Analytics\n\n#### Support & Community\n- 📖 Documentation Hub\n- 🆘 24/7 Support Portal\n\n---\n\n## Footer\n\n### Company\n- About Us\n- Careers\n- Press\n- Contact\n\n### Product\n- Features\n- Pricing\n- Security\n- Roadmap\n- API Docs\n\n### Resources\n- Documentation\n- Video Tutorials\n- Webinars\n- Blog\n- ROI Calculator\n\n### Support\n- Help Center\n- Community Forum\n- System Status\n- Contact Support\n\n### Legal\n- Privacy Policy\n- Terms of Service\n- Security\n- GDPR\n\n### Social\n- LinkedIn\n- Twitter\n- YouTube\n- GitHub\n\n### Bottom Bar\n© 2025 Orion - TCC Technology. All rights reserved.\n**System Status**: All Systems Operational\n\n---\n\n## SEO Metadata\n\n### Title Tag\nOrion - AI-Powered Financial Planning & Analysis Platform | FP&A Software\n\n### Meta Description\nTransform your FP&A with Orion's AI-powered platform. Reduce month-end close by 20%, get instant insights with natural language queries, and automate variance analysis. Start free trial.\n\n### Keywords\nFP&A software, financial planning and analysis, AI financial reporting, TM1 replacement, automated variance analysis, financial close automation, cost allocation software, budgeting and forecasting platform\n\n### Open Graph Tags\n- **og:title**: Orion - AI-Powered FP&A Platform\n- **og:description**: Transform financial data into strategic advantage with AI\n- **og:image**: [Dashboard screenshot]\n- **og:url**: https://orion.tcc-tech.com","size_bytes":18264},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertProfitLossStatementSchema,\n  insertBalanceSheetSchema,\n  insertCashFlowStatementSchema\n} from \"@shared/schema\";\nimport { ZodError } from \"zod\";\n\n// Partial schemas for updates - only allow known fields to be updated\nconst updateProfitLossStatementSchema = insertProfitLossStatementSchema.partial();\nconst updateBalanceSheetSchema = insertBalanceSheetSchema.partial();\nconst updateCashFlowStatementSchema = insertCashFlowStatementSchema.partial();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Dashboard API routes\n  app.get(\"/api/market-data\", async (req, res) => {\n    try {\n      const marketData = await storage.getAllMarketData();\n      res.json(marketData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch market data\" });\n    }\n  });\n\n  app.get(\"/api/business-news\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      let businessNews;\n      \n      if (category && typeof category === \"string\") {\n        businessNews = await storage.getBusinessNewsByCategory(category);\n      } else {\n        businessNews = await storage.getAllBusinessNews();\n      }\n      \n      res.json(businessNews);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch business news\" });\n    }\n  });\n\n  app.get(\"/api/company-metrics\", async (req, res) => {\n    try {\n      const companyMetrics = await storage.getAllCompanyMetrics();\n      res.json(companyMetrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company metrics\" });\n    }\n  });\n\n  app.get(\"/api/economic-indicators\", async (req, res) => {\n    try {\n      const economicIndicators = await storage.getAllEconomicIndicators();\n      res.json(economicIndicators);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch economic indicators\" });\n    }\n  });\n\n  // Individual resource endpoints\n  app.get(\"/api/market-data/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const marketData = await storage.getMarketDataBySymbol(symbol.toUpperCase());\n      \n      if (!marketData) {\n        return res.status(404).json({ message: \"Market data not found\" });\n      }\n      \n      res.json(marketData);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch market data\" });\n    }\n  });\n\n  app.get(\"/api/company-metrics/:symbol\", async (req, res) => {\n    try {\n      const { symbol } = req.params;\n      const companyMetrics = await storage.getCompanyMetricsBySymbol(symbol.toUpperCase());\n      \n      if (!companyMetrics) {\n        return res.status(404).json({ message: \"Company metrics not found\" });\n      }\n      \n      res.json(companyMetrics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch company metrics\" });\n    }\n  });\n\n  // Financial Reports API routes\n  // Profit & Loss Statement routes\n  app.get(\"/api/profit-loss\", async (req, res) => {\n    try {\n      const { topic, startPeriod, endPeriod } = req.query;\n      let statements;\n      \n      if (topic || startPeriod || endPeriod) {\n        statements = await storage.getProfitLossStatementsFiltered(\n          topic as string, \n          startPeriod as string,\n          endPeriod as string\n        );\n      } else {\n        statements = await storage.getAllProfitLossStatements();\n      }\n      \n      res.json(statements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch profit & loss statements\" });\n    }\n  });\n\n  app.put(\"/api/profit-loss/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body using Zod schema\n      const validationResult = updateProfitLossStatementSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const updates = validationResult.data;\n      const updatedStatement = await storage.updateProfitLossStatement(id, updates);\n      \n      if (!updatedStatement) {\n        return res.status(404).json({ message: \"Profit & loss statement not found\" });\n      }\n      \n      res.json(updatedStatement);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating P&L statement:\", error);\n      res.status(500).json({ message: \"Failed to update profit & loss statement\" });\n    }\n  });\n\n  // Balance Sheet routes\n  app.get(\"/api/balance-sheet\", async (req, res) => {\n    try {\n      const { topic, startPeriod, endPeriod } = req.query;\n      let sheets;\n      \n      if (topic || startPeriod || endPeriod) {\n        sheets = await storage.getBalanceSheetsFiltered(\n          topic as string, \n          startPeriod as string,\n          endPeriod as string\n        );\n      } else {\n        sheets = await storage.getAllBalanceSheets();\n      }\n      \n      res.json(sheets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch balance sheets\" });\n    }\n  });\n\n  app.put(\"/api/balance-sheet/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body using Zod schema\n      const validationResult = updateBalanceSheetSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const updates = validationResult.data;\n      const updatedSheet = await storage.updateBalanceSheet(id, updates);\n      \n      if (!updatedSheet) {\n        return res.status(404).json({ message: \"Balance sheet not found\" });\n      }\n      \n      res.json(updatedSheet);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating balance sheet:\", error);\n      res.status(500).json({ message: \"Failed to update balance sheet\" });\n    }\n  });\n\n  // Cash Flow Statement routes\n  app.get(\"/api/cash-flow\", async (req, res) => {\n    try {\n      const { topic, startPeriod, endPeriod } = req.query;\n      let statements;\n      \n      if (topic || startPeriod || endPeriod) {\n        statements = await storage.getCashFlowStatementsFiltered(\n          topic as string, \n          startPeriod as string,\n          endPeriod as string\n        );\n      } else {\n        statements = await storage.getAllCashFlowStatements();\n      }\n      \n      res.json(statements);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch cash flow statements\" });\n    }\n  });\n\n  app.put(\"/api/cash-flow/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate request body using Zod schema\n      const validationResult = updateCashFlowStatementSchema.safeParse(req.body);\n      \n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: \"Invalid data\", \n          errors: validationResult.error.errors \n        });\n      }\n      \n      const updates = validationResult.data;\n      const updatedStatement = await storage.updateCashFlowStatement(id, updates);\n      \n      if (!updatedStatement) {\n        return res.status(404).json({ message: \"Cash flow statement not found\" });\n      }\n      \n      res.json(updatedStatement);\n    } catch (error) {\n      if (error instanceof ZodError) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: error.errors \n        });\n      }\n      console.error(\"Error updating cash flow statement:\", error);\n      res.status(500).json({ message: \"Failed to update cash flow statement\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":8160},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser,\n  type MarketData,\n  type InsertMarketData,\n  type BusinessNews,\n  type InsertBusinessNews,\n  type CompanyMetrics,\n  type InsertCompanyMetrics,\n  type EconomicIndicators,\n  type InsertEconomicIndicators,\n  type ProfitLossStatement,\n  type InsertProfitLossStatement,\n  type BalanceSheet,\n  type InsertBalanceSheet,\n  type CashFlowStatement,\n  type InsertCashFlowStatement\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Market data methods\n  getAllMarketData(): Promise<MarketData[]>;\n  getMarketDataBySymbol(symbol: string): Promise<MarketData | undefined>;\n  createMarketData(data: InsertMarketData): Promise<MarketData>;\n  \n  // Business news methods\n  getAllBusinessNews(): Promise<BusinessNews[]>;\n  getBusinessNewsByCategory(category: string): Promise<BusinessNews[]>;\n  createBusinessNews(news: InsertBusinessNews): Promise<BusinessNews>;\n  \n  // Company metrics methods\n  getAllCompanyMetrics(): Promise<CompanyMetrics[]>;\n  getCompanyMetricsBySymbol(symbol: string): Promise<CompanyMetrics | undefined>;\n  createCompanyMetrics(metrics: InsertCompanyMetrics): Promise<CompanyMetrics>;\n  \n  // Economic indicators methods\n  getAllEconomicIndicators(): Promise<EconomicIndicators[]>;\n  createEconomicIndicator(indicator: InsertEconomicIndicators): Promise<EconomicIndicators>;\n  \n  // Financial Reports methods\n  // Profit & Loss\n  getAllProfitLossStatements(): Promise<ProfitLossStatement[]>;\n  getProfitLossStatementsByTopic(topic: string): Promise<ProfitLossStatement[]>;\n  getProfitLossStatementsByPeriod(period: string): Promise<ProfitLossStatement[]>;\n  getProfitLossStatementsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<ProfitLossStatement[]>;\n  createProfitLossStatement(statement: InsertProfitLossStatement): Promise<ProfitLossStatement>;\n  updateProfitLossStatement(id: string, statement: Partial<InsertProfitLossStatement>): Promise<ProfitLossStatement | undefined>;\n  \n  // Balance Sheet\n  getAllBalanceSheets(): Promise<BalanceSheet[]>;\n  getBalanceSheetsByTopic(topic: string): Promise<BalanceSheet[]>;\n  getBalanceSheetsByPeriod(period: string): Promise<BalanceSheet[]>;\n  getBalanceSheetsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<BalanceSheet[]>;\n  createBalanceSheet(sheet: InsertBalanceSheet): Promise<BalanceSheet>;\n  updateBalanceSheet(id: string, sheet: Partial<InsertBalanceSheet>): Promise<BalanceSheet | undefined>;\n  \n  // Cash Flow\n  getAllCashFlowStatements(): Promise<CashFlowStatement[]>;\n  getCashFlowStatementsByTopic(topic: string): Promise<CashFlowStatement[]>;\n  getCashFlowStatementsByPeriod(period: string): Promise<CashFlowStatement[]>;\n  getCashFlowStatementsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<CashFlowStatement[]>;\n  createCashFlowStatement(statement: InsertCashFlowStatement): Promise<CashFlowStatement>;\n  updateCashFlowStatement(id: string, statement: Partial<InsertCashFlowStatement>): Promise<CashFlowStatement | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private marketData: Map<string, MarketData>;\n  private businessNews: Map<string, BusinessNews>;\n  private companyMetrics: Map<string, CompanyMetrics>;\n  private economicIndicators: Map<string, EconomicIndicators>;\n  private profitLossStatements: Map<string, ProfitLossStatement>;\n  private balanceSheets: Map<string, BalanceSheet>;\n  private cashFlowStatements: Map<string, CashFlowStatement>;\n\n  constructor() {\n    this.users = new Map();\n    this.marketData = new Map();\n    this.businessNews = new Map();\n    this.companyMetrics = new Map();\n    this.economicIndicators = new Map();\n    this.profitLossStatements = new Map();\n    this.balanceSheets = new Map();\n    this.cashFlowStatements = new Map();\n    \n    // Initialize with sample data synchronously\n    this.initializeSampleDataSync();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Market data methods\n  async getAllMarketData(): Promise<MarketData[]> {\n    return Array.from(this.marketData.values());\n  }\n\n  async getMarketDataBySymbol(symbol: string): Promise<MarketData | undefined> {\n    return Array.from(this.marketData.values()).find(data => data.symbol === symbol);\n  }\n\n  async createMarketData(insertData: InsertMarketData): Promise<MarketData> {\n    const id = randomUUID();\n    const data: MarketData = { \n      ...insertData,\n      marketCap: insertData.marketCap ?? null,\n      sector: insertData.sector ?? null,\n      id, \n      updatedAt: new Date()\n    };\n    this.marketData.set(id, data);\n    return data;\n  }\n\n  // Business news methods\n  async getAllBusinessNews(): Promise<BusinessNews[]> {\n    return Array.from(this.businessNews.values()).sort(\n      (a, b) => b.publishedAt.getTime() - a.publishedAt.getTime()\n    );\n  }\n\n  async getBusinessNewsByCategory(category: string): Promise<BusinessNews[]> {\n    return Array.from(this.businessNews.values())\n      .filter(news => news.category === category)\n      .sort((a, b) => b.publishedAt.getTime() - a.publishedAt.getTime());\n  }\n\n  async createBusinessNews(insertNews: InsertBusinessNews): Promise<BusinessNews> {\n    const id = randomUUID();\n    const news: BusinessNews = {\n      ...insertNews,\n      id,\n      publishedAt: new Date()\n    };\n    this.businessNews.set(id, news);\n    return news;\n  }\n\n  // Company metrics methods\n  async getAllCompanyMetrics(): Promise<CompanyMetrics[]> {\n    return Array.from(this.companyMetrics.values());\n  }\n\n  async getCompanyMetricsBySymbol(symbol: string): Promise<CompanyMetrics | undefined> {\n    return Array.from(this.companyMetrics.values()).find(metrics => metrics.symbol === symbol);\n  }\n\n  async createCompanyMetrics(insertMetrics: InsertCompanyMetrics): Promise<CompanyMetrics> {\n    const id = randomUUID();\n    const metrics: CompanyMetrics = { ...insertMetrics, id };\n    this.companyMetrics.set(id, metrics);\n    return metrics;\n  }\n\n  // Economic indicators methods\n  async getAllEconomicIndicators(): Promise<EconomicIndicators[]> {\n    return Array.from(this.economicIndicators.values());\n  }\n\n  async createEconomicIndicator(insertIndicator: InsertEconomicIndicators): Promise<EconomicIndicators> {\n    const id = randomUUID();\n    const indicator: EconomicIndicators = {\n      ...insertIndicator,\n      id,\n      updatedAt: new Date()\n    };\n    this.economicIndicators.set(id, indicator);\n    return indicator;\n  }\n\n  private initializeSampleDataSync() {\n    // Sample market data\n    const sampleMarketData = [\n      { symbol: \"AAPL\", name: \"Apple Inc.\", price: \"182.52\", change: \"2.34\", changePercent: \"1.30\", volume: 45672000, marketCap: \"2850000000000\", sector: \"Technology\" },\n      { symbol: \"MSFT\", name: \"Microsoft Corporation\", price: \"378.85\", change: \"-1.24\", changePercent: \"-0.33\", volume: 32145000, marketCap: \"2810000000000\", sector: \"Technology\" },\n      { symbol: \"GOOGL\", name: \"Alphabet Inc.\", price: \"138.21\", change: \"0.89\", changePercent: \"0.65\", volume: 28934000, marketCap: \"1750000000000\", sector: \"Technology\" },\n      { symbol: \"AMZN\", name: \"Amazon.com Inc.\", price: \"145.86\", change: \"-0.52\", changePercent: \"-0.36\", volume: 41287000, marketCap: \"1520000000000\", sector: \"Consumer Discretionary\" },\n      { symbol: \"TSLA\", name: \"Tesla Inc.\", price: \"248.42\", change: \"12.18\", changePercent: \"5.15\", volume: 67834000, marketCap: \"789000000000\", sector: \"Consumer Discretionary\" }\n    ];\n\n    for (const data of sampleMarketData) {\n      const id = randomUUID();\n      const marketEntry: MarketData = { \n        ...data,\n        marketCap: data.marketCap ?? null,\n        sector: data.sector ?? null,\n        id, \n        updatedAt: new Date()\n      };\n      this.marketData.set(id, marketEntry);\n    }\n\n    // Sample business news\n    const sampleNews = [\n      { headline: \"Fed Signals Potential Rate Cut Next Quarter\", summary: \"Federal Reserve officials indicated in recent statements that they may consider lowering interest rates in the coming quarter to support economic growth amid global uncertainties.\", category: \"Monetary Policy\", importance: \"high\", source: \"Federal Reserve\" },\n      { headline: \"Tech Giants Report Strong Q3 Earnings\", summary: \"Major technology companies exceeded analyst expectations this quarter, driven by AI investments and cloud computing growth.\", category: \"Earnings\", importance: \"medium\", source: \"Financial Times\" },\n      { headline: \"Global Supply Chain Disruptions Ease\", summary: \"International shipping delays have decreased significantly as ports implement new efficiency measures and trade routes stabilize.\", category: \"Supply Chain\", importance: \"medium\", source: \"Reuters\" },\n      { headline: \"Energy Sector Sees Major M&A Activity\", summary: \"Several large energy companies announced consolidation plans this week, signaling a shift toward renewable energy investments.\", category: \"Mergers & Acquisitions\", importance: \"high\", source: \"Bloomberg\" },\n      { headline: \"Inflation Data Shows Continued Moderation\", summary: \"Consumer price index data released today shows inflation continuing its downward trend, raising optimism for economic stability.\", category: \"Economic Data\", importance: \"high\", source: \"Bureau of Labor Statistics\" }\n    ];\n\n    for (const news of sampleNews) {\n      const id = randomUUID();\n      const newsEntry: BusinessNews = {\n        ...news,\n        id,\n        publishedAt: new Date()\n      };\n      this.businessNews.set(id, newsEntry);\n    }\n\n    // Sample company metrics\n    const sampleCompanies = [\n      { companyName: \"Apple Inc.\", symbol: \"AAPL\", revenue: \"394328000000\", profit: \"99803000000\", employees: 164000, industry: \"Technology Hardware\", headquarters: \"Cupertino, CA\", description: \"Designs, manufactures, and markets consumer electronics, computer software, and online services.\", keyMetrics: '{\"peRatio\": 29.1, \"dividendYield\": 0.44, \"debtToEquity\": 1.73, \"returnOnEquity\": 175.1}' },\n      { companyName: \"Microsoft Corporation\", symbol: \"MSFT\", revenue: \"211915000000\", profit: \"72361000000\", employees: 221000, industry: \"Software Infrastructure\", headquarters: \"Redmond, WA\", description: \"Develops, licenses, and supports software, services, devices, and solutions worldwide.\", keyMetrics: '{\"peRatio\": 34.2, \"dividendYield\": 0.72, \"debtToEquity\": 0.31, \"returnOnEquity\": 44.5}' },\n      { companyName: \"Alphabet Inc.\", symbol: \"GOOGL\", revenue: \"307394000000\", profit: \"73795000000\", employees: 182502, industry: \"Internet Content & Information\", headquarters: \"Mountain View, CA\", description: \"Provides online advertising services and cloud computing platforms.\", keyMetrics: '{\"peRatio\": 23.7, \"dividendYield\": 0.0, \"debtToEquity\": 0.11, \"returnOnEquity\": 27.8}' }\n    ];\n\n    for (const company of sampleCompanies) {\n      const id = randomUUID();\n      const companyEntry: CompanyMetrics = { ...company, id };\n      this.companyMetrics.set(id, companyEntry);\n    }\n\n    // Sample economic indicators\n    const sampleIndicators = [\n      { name: \"GDP Growth Rate\", value: \"2.4\", unit: \"%\", change: \"0.1\", period: \"Q3 2024\" },\n      { name: \"Unemployment Rate\", value: \"3.7\", unit: \"%\", change: \"-0.1\", period: \"September 2024\" },\n      { name: \"Inflation Rate\", value: \"3.2\", unit: \"%\", change: \"-0.3\", period: \"September 2024\" },\n      { name: \"10-Year Treasury Yield\", value: \"4.28\", unit: \"%\", change: \"0.05\", period: \"Current\" },\n      { name: \"Consumer Confidence Index\", value: \"102.6\", unit: \"Index\", change: \"2.3\", period: \"September 2024\" }\n    ];\n\n    for (const indicator of sampleIndicators) {\n      const id = randomUUID();\n      const indicatorEntry: EconomicIndicators = {\n        ...indicator,\n        id,\n        updatedAt: new Date()\n      };\n      this.economicIndicators.set(id, indicatorEntry);\n    }\n\n    // Initialize sample financial reports data\n    this.initializeFinancialReportsData();\n  }\n\n  // Profit & Loss Statement methods\n  async getAllProfitLossStatements(): Promise<ProfitLossStatement[]> {\n    return Array.from(this.profitLossStatements.values());\n  }\n\n  async getProfitLossStatementsByTopic(topic: string): Promise<ProfitLossStatement[]> {\n    return Array.from(this.profitLossStatements.values()).filter(statement => statement.topic === topic);\n  }\n\n  async getProfitLossStatementsByPeriod(period: string): Promise<ProfitLossStatement[]> {\n    return Array.from(this.profitLossStatements.values()).filter(statement => statement.period === period);\n  }\n\n  async getProfitLossStatementsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<ProfitLossStatement[]> {\n    let statements = Array.from(this.profitLossStatements.values());\n    if (topic) {\n      statements = statements.filter(statement => statement.topic === topic);\n    }\n    if (startPeriod) {\n      statements = statements.filter(statement => statement.period >= startPeriod);\n    }\n    if (endPeriod) {\n      statements = statements.filter(statement => statement.period <= endPeriod);\n    }\n    return statements;\n  }\n\n  async createProfitLossStatement(insertStatement: InsertProfitLossStatement): Promise<ProfitLossStatement> {\n    const id = randomUUID();\n    const statement: ProfitLossStatement = {\n      ...insertStatement,\n      otherIncome: insertStatement.otherIncome ?? \"0\",\n      otherExpenses: insertStatement.otherExpenses ?? \"0\",\n      isEditable: insertStatement.isEditable ?? \"true\",\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.profitLossStatements.set(id, statement);\n    return statement;\n  }\n\n  async updateProfitLossStatement(id: string, updates: Partial<InsertProfitLossStatement>): Promise<ProfitLossStatement | undefined> {\n    const statement = this.profitLossStatements.get(id);\n    if (!statement) return undefined;\n    \n    const updatedStatement: ProfitLossStatement = {\n      ...statement,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.profitLossStatements.set(id, updatedStatement);\n    return updatedStatement;\n  }\n\n  // Balance Sheet methods\n  async getAllBalanceSheets(): Promise<BalanceSheet[]> {\n    return Array.from(this.balanceSheets.values());\n  }\n\n  async getBalanceSheetsByTopic(topic: string): Promise<BalanceSheet[]> {\n    return Array.from(this.balanceSheets.values()).filter(sheet => sheet.topic === topic);\n  }\n\n  async getBalanceSheetsByPeriod(period: string): Promise<BalanceSheet[]> {\n    return Array.from(this.balanceSheets.values()).filter(sheet => sheet.period === period);\n  }\n\n  async getBalanceSheetsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<BalanceSheet[]> {\n    let sheets = Array.from(this.balanceSheets.values());\n    if (topic) {\n      sheets = sheets.filter(sheet => sheet.topic === topic);\n    }\n    if (startPeriod) {\n      sheets = sheets.filter(sheet => sheet.period >= startPeriod);\n    }\n    if (endPeriod) {\n      sheets = sheets.filter(sheet => sheet.period <= endPeriod);\n    }\n    return sheets;\n  }\n\n  async createBalanceSheet(insertSheet: InsertBalanceSheet): Promise<BalanceSheet> {\n    const id = randomUUID();\n    const sheet: BalanceSheet = {\n      ...insertSheet,\n      isEditable: insertSheet.isEditable ?? \"true\",\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.balanceSheets.set(id, sheet);\n    return sheet;\n  }\n\n  async updateBalanceSheet(id: string, updates: Partial<InsertBalanceSheet>): Promise<BalanceSheet | undefined> {\n    const sheet = this.balanceSheets.get(id);\n    if (!sheet) return undefined;\n    \n    const updatedSheet: BalanceSheet = {\n      ...sheet,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.balanceSheets.set(id, updatedSheet);\n    return updatedSheet;\n  }\n\n  // Cash Flow Statement methods\n  async getAllCashFlowStatements(): Promise<CashFlowStatement[]> {\n    return Array.from(this.cashFlowStatements.values());\n  }\n\n  async getCashFlowStatementsByTopic(topic: string): Promise<CashFlowStatement[]> {\n    return Array.from(this.cashFlowStatements.values()).filter(statement => statement.topic === topic);\n  }\n\n  async getCashFlowStatementsByPeriod(period: string): Promise<CashFlowStatement[]> {\n    return Array.from(this.cashFlowStatements.values()).filter(statement => statement.period === period);\n  }\n\n  async getCashFlowStatementsFiltered(topic?: string, startPeriod?: string, endPeriod?: string): Promise<CashFlowStatement[]> {\n    let statements = Array.from(this.cashFlowStatements.values());\n    if (topic) {\n      statements = statements.filter(statement => statement.topic === topic);\n    }\n    if (startPeriod) {\n      statements = statements.filter(statement => statement.period >= startPeriod);\n    }\n    if (endPeriod) {\n      statements = statements.filter(statement => statement.period <= endPeriod);\n    }\n    return statements;\n  }\n\n  async createCashFlowStatement(insertStatement: InsertCashFlowStatement): Promise<CashFlowStatement> {\n    const id = randomUUID();\n    const statement: CashFlowStatement = {\n      ...insertStatement,\n      acquisitions: insertStatement.acquisitions ?? \"0\",\n      debtIssuance: insertStatement.debtIssuance ?? \"0\",\n      debtRepayment: insertStatement.debtRepayment ?? \"0\",\n      dividendsPaid: insertStatement.dividendsPaid ?? \"0\",\n      isEditable: insertStatement.isEditable ?? \"true\",\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.cashFlowStatements.set(id, statement);\n    return statement;\n  }\n\n  async updateCashFlowStatement(id: string, updates: Partial<InsertCashFlowStatement>): Promise<CashFlowStatement | undefined> {\n    const statement = this.cashFlowStatements.get(id);\n    if (!statement) return undefined;\n    \n    const updatedStatement: CashFlowStatement = {\n      ...statement,\n      ...updates,\n      updatedAt: new Date()\n    };\n    this.cashFlowStatements.set(id, updatedStatement);\n    return updatedStatement;\n  }\n\n  private initializeFinancialReportsData() {\n    // Sample P&L data - 12 months\n    const samplePLData = [\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-01\",\n        totalRevenue: \"5000000.00\",\n        costOfGoodsSold: \"3000000.00\",\n        grossProfit: \"2000000.00\",\n        operatingExpenses: \"1200000.00\",\n        operatingIncome: \"800000.00\",\n        otherIncome: \"50000.00\",\n        otherExpenses: \"20000.00\",\n        netIncomeBeforeTax: \"830000.00\",\n        taxExpense: \"166000.00\",\n        netIncome: \"664000.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-02\",\n        totalRevenue: \"5200000.00\",\n        costOfGoodsSold: \"3100000.00\",\n        grossProfit: \"2100000.00\",\n        operatingExpenses: \"1250000.00\",\n        operatingIncome: \"850000.00\",\n        otherIncome: \"30000.00\",\n        otherExpenses: \"15000.00\",\n        netIncomeBeforeTax: \"865000.00\",\n        taxExpense: \"173000.00\",\n        netIncome: \"692000.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-03\",\n        totalRevenue: \"5300000.00\",\n        costOfGoodsSold: \"3150000.00\",\n        grossProfit: \"2150000.00\",\n        operatingExpenses: \"1300000.00\",\n        operatingIncome: \"850000.00\",\n        otherIncome: \"40000.00\",\n        otherExpenses: \"18000.00\",\n        netIncomeBeforeTax: \"872000.00\",\n        taxExpense: \"174400.00\",\n        netIncome: \"697600.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-04\",\n        totalRevenue: \"5500000.00\",\n        costOfGoodsSold: \"3200000.00\",\n        grossProfit: \"2300000.00\",\n        operatingExpenses: \"1320000.00\",\n        operatingIncome: \"980000.00\",\n        otherIncome: \"35000.00\",\n        otherExpenses: \"22000.00\",\n        netIncomeBeforeTax: \"993000.00\",\n        taxExpense: \"198600.00\",\n        netIncome: \"794400.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-05\",\n        totalRevenue: \"5400000.00\",\n        costOfGoodsSold: \"3180000.00\",\n        grossProfit: \"2220000.00\",\n        operatingExpenses: \"1280000.00\",\n        operatingIncome: \"940000.00\",\n        otherIncome: \"45000.00\",\n        otherExpenses: \"25000.00\",\n        netIncomeBeforeTax: \"960000.00\",\n        taxExpense: \"192000.00\",\n        netIncome: \"768000.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-06\",\n        totalRevenue: \"5600000.00\",\n        costOfGoodsSold: \"3250000.00\",\n        grossProfit: \"2350000.00\",\n        operatingExpenses: \"1350000.00\",\n        operatingIncome: \"1000000.00\",\n        otherIncome: \"55000.00\",\n        otherExpenses: \"30000.00\",\n        netIncomeBeforeTax: \"1025000.00\",\n        taxExpense: \"205000.00\",\n        netIncome: \"820000.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-07\",\n        totalRevenue: \"5800000.00\",\n        costOfGoodsSold: \"3300000.00\",\n        grossProfit: \"2500000.00\",\n        operatingExpenses: \"1400000.00\",\n        operatingIncome: \"1100000.00\",\n        otherIncome: \"42000.00\",\n        otherExpenses: \"28000.00\",\n        netIncomeBeforeTax: \"1114000.00\",\n        taxExpense: \"222800.00\",\n        netIncome: \"891200.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-08\",\n        totalRevenue: \"5700000.00\",\n        costOfGoodsSold: \"3280000.00\",\n        grossProfit: \"2420000.00\",\n        operatingExpenses: \"1380000.00\",\n        operatingIncome: \"1040000.00\",\n        otherIncome: \"38000.00\",\n        otherExpenses: \"26000.00\",\n        netIncomeBeforeTax: \"1052000.00\",\n        taxExpense: \"210400.00\",\n        netIncome: \"841600.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-09\",\n        totalRevenue: \"5900000.00\",\n        costOfGoodsSold: \"3350000.00\",\n        grossProfit: \"2550000.00\",\n        operatingExpenses: \"1420000.00\",\n        operatingIncome: \"1130000.00\",\n        otherIncome: \"48000.00\",\n        otherExpenses: \"32000.00\",\n        netIncomeBeforeTax: \"1146000.00\",\n        taxExpense: \"229200.00\",\n        netIncome: \"916800.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-10\",\n        totalRevenue: \"6000000.00\",\n        costOfGoodsSold: \"3400000.00\",\n        grossProfit: \"2600000.00\",\n        operatingExpenses: \"1450000.00\",\n        operatingIncome: \"1150000.00\",\n        otherIncome: \"52000.00\",\n        otherExpenses: \"35000.00\",\n        netIncomeBeforeTax: \"1167000.00\",\n        taxExpense: \"233400.00\",\n        netIncome: \"933600.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-11\",\n        totalRevenue: \"6200000.00\",\n        costOfGoodsSold: \"3480000.00\",\n        grossProfit: \"2720000.00\",\n        operatingExpenses: \"1480000.00\",\n        operatingIncome: \"1240000.00\",\n        otherIncome: \"58000.00\",\n        otherExpenses: \"38000.00\",\n        netIncomeBeforeTax: \"1260000.00\",\n        taxExpense: \"252000.00\",\n        netIncome: \"1008000.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-12\",\n        totalRevenue: \"6500000.00\",\n        costOfGoodsSold: \"3600000.00\",\n        grossProfit: \"2900000.00\",\n        operatingExpenses: \"1550000.00\",\n        operatingIncome: \"1350000.00\",\n        otherIncome: \"65000.00\",\n        otherExpenses: \"42000.00\",\n        netIncomeBeforeTax: \"1373000.00\",\n        taxExpense: \"274600.00\",\n        netIncome: \"1098400.00\",\n        isEditable: JSON.stringify({\n          totalRevenue: true,\n          costOfGoodsSold: true,\n          operatingExpenses: true,\n          grossProfit: false,\n          operatingIncome: false,\n          netIncomeBeforeTax: false,\n          netIncome: false\n        })\n      }\n    ];\n\n    for (const data of samplePLData) {\n      const id = randomUUID();\n      const statement: ProfitLossStatement = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.profitLossStatements.set(id, statement);\n    }\n\n    // Sample Balance Sheet data - 12 months\n    const sampleBSData = [\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-01\",\n        currentAssets: \"8000000.00\",\n        cash: \"2000000.00\",\n        accountsReceivable: \"3000000.00\",\n        inventory: \"3000000.00\",\n        nonCurrentAssets: \"15000000.00\",\n        propertyPlantEquipment: \"12000000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"23000000.00\",\n        currentLiabilities: \"4000000.00\",\n        accountsPayable: \"2000000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"8000000.00\",\n        longTermDebt: \"8000000.00\",\n        totalLiabilities: \"12000000.00\",\n        shareholdersEquity: \"11000000.00\",\n        retainedEarnings: \"6000000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-02\",\n        currentAssets: \"8200000.00\",\n        cash: \"2200000.00\",\n        accountsReceivable: \"3100000.00\",\n        inventory: \"2900000.00\",\n        nonCurrentAssets: \"15150000.00\",\n        propertyPlantEquipment: \"12150000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"23350000.00\",\n        currentLiabilities: \"4050000.00\",\n        accountsPayable: \"2050000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7950000.00\",\n        longTermDebt: \"7950000.00\",\n        totalLiabilities: \"12000000.00\",\n        shareholdersEquity: \"11350000.00\",\n        retainedEarnings: \"6350000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-03\",\n        currentAssets: \"8450000.00\",\n        cash: \"2450000.00\",\n        accountsReceivable: \"3150000.00\",\n        inventory: \"2850000.00\",\n        nonCurrentAssets: \"15300000.00\",\n        propertyPlantEquipment: \"12300000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"23750000.00\",\n        currentLiabilities: \"4100000.00\",\n        accountsPayable: \"2100000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7900000.00\",\n        longTermDebt: \"7900000.00\",\n        totalLiabilities: \"12000000.00\",\n        shareholdersEquity: \"11750000.00\",\n        retainedEarnings: \"6750000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-04\",\n        currentAssets: \"8750000.00\",\n        cash: \"2750000.00\",\n        accountsReceivable: \"3250000.00\",\n        inventory: \"2750000.00\",\n        nonCurrentAssets: \"15500000.00\",\n        propertyPlantEquipment: \"12500000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"24250000.00\",\n        currentLiabilities: \"4200000.00\",\n        accountsPayable: \"2200000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7850000.00\",\n        longTermDebt: \"7850000.00\",\n        totalLiabilities: \"12050000.00\",\n        shareholdersEquity: \"12200000.00\",\n        retainedEarnings: \"7200000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-05\",\n        currentAssets: \"8950000.00\",\n        cash: \"2950000.00\",\n        accountsReceivable: \"3200000.00\",\n        inventory: \"2800000.00\",\n        nonCurrentAssets: \"15700000.00\",\n        propertyPlantEquipment: \"12700000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"24650000.00\",\n        currentLiabilities: \"4250000.00\",\n        accountsPayable: \"2250000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7800000.00\",\n        longTermDebt: \"7800000.00\",\n        totalLiabilities: \"12050000.00\",\n        shareholdersEquity: \"12600000.00\",\n        retainedEarnings: \"7600000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-06\",\n        currentAssets: \"9200000.00\",\n        cash: \"3200000.00\",\n        accountsReceivable: \"3300000.00\",\n        inventory: \"2700000.00\",\n        nonCurrentAssets: \"15900000.00\",\n        propertyPlantEquipment: \"12900000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"25100000.00\",\n        currentLiabilities: \"4300000.00\",\n        accountsPayable: \"2300000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7750000.00\",\n        longTermDebt: \"7750000.00\",\n        totalLiabilities: \"12050000.00\",\n        shareholdersEquity: \"13050000.00\",\n        retainedEarnings: \"8050000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-07\",\n        currentAssets: \"9500000.00\",\n        cash: \"3500000.00\",\n        accountsReceivable: \"3400000.00\",\n        inventory: \"2600000.00\",\n        nonCurrentAssets: \"16100000.00\",\n        propertyPlantEquipment: \"13100000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"25600000.00\",\n        currentLiabilities: \"4400000.00\",\n        accountsPayable: \"2400000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7700000.00\",\n        longTermDebt: \"7700000.00\",\n        totalLiabilities: \"12100000.00\",\n        shareholdersEquity: \"13500000.00\",\n        retainedEarnings: \"8500000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-08\",\n        currentAssets: \"9750000.00\",\n        cash: \"3750000.00\",\n        accountsReceivable: \"3350000.00\",\n        inventory: \"2650000.00\",\n        nonCurrentAssets: \"16250000.00\",\n        propertyPlantEquipment: \"13250000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"26000000.00\",\n        currentLiabilities: \"4450000.00\",\n        accountsPayable: \"2450000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7650000.00\",\n        longTermDebt: \"7650000.00\",\n        totalLiabilities: \"12100000.00\",\n        shareholdersEquity: \"13900000.00\",\n        retainedEarnings: \"8900000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-09\",\n        currentAssets: \"10000000.00\",\n        cash: \"4000000.00\",\n        accountsReceivable: \"3500000.00\",\n        inventory: \"2500000.00\",\n        nonCurrentAssets: \"16500000.00\",\n        propertyPlantEquipment: \"13500000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"26500000.00\",\n        currentLiabilities: \"4500000.00\",\n        accountsPayable: \"2500000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7600000.00\",\n        longTermDebt: \"7600000.00\",\n        totalLiabilities: \"12100000.00\",\n        shareholdersEquity: \"14400000.00\",\n        retainedEarnings: \"9400000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-10\",\n        currentAssets: \"10350000.00\",\n        cash: \"4350000.00\",\n        accountsReceivable: \"3600000.00\",\n        inventory: \"2400000.00\",\n        nonCurrentAssets: \"16750000.00\",\n        propertyPlantEquipment: \"13750000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"27100000.00\",\n        currentLiabilities: \"4600000.00\",\n        accountsPayable: \"2600000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7550000.00\",\n        longTermDebt: \"7550000.00\",\n        totalLiabilities: \"12150000.00\",\n        shareholdersEquity: \"14950000.00\",\n        retainedEarnings: \"9950000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-11\",\n        currentAssets: \"10700000.00\",\n        cash: \"4700000.00\",\n        accountsReceivable: \"3700000.00\",\n        inventory: \"2300000.00\",\n        nonCurrentAssets: \"17000000.00\",\n        propertyPlantEquipment: \"14000000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"27700000.00\",\n        currentLiabilities: \"4700000.00\",\n        accountsPayable: \"2700000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7500000.00\",\n        longTermDebt: \"7500000.00\",\n        totalLiabilities: \"12200000.00\",\n        shareholdersEquity: \"15500000.00\",\n        retainedEarnings: \"10500000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-12\",\n        currentAssets: \"11150000.00\",\n        cash: \"5150000.00\",\n        accountsReceivable: \"3800000.00\",\n        inventory: \"2200000.00\",\n        nonCurrentAssets: \"17300000.00\",\n        propertyPlantEquipment: \"14300000.00\",\n        intangibleAssets: \"3000000.00\",\n        totalAssets: \"28450000.00\",\n        currentLiabilities: \"4800000.00\",\n        accountsPayable: \"2800000.00\",\n        shortTermDebt: \"2000000.00\",\n        longTermLiabilities: \"7450000.00\",\n        longTermDebt: \"7450000.00\",\n        totalLiabilities: \"12250000.00\",\n        shareholdersEquity: \"16200000.00\",\n        retainedEarnings: \"11200000.00\",\n        isEditable: JSON.stringify({\n          cash: true,\n          accountsReceivable: true,\n          inventory: true,\n          accountsPayable: true,\n          shortTermDebt: true,\n          currentAssets: false,\n          totalAssets: false,\n          totalLiabilities: false\n        })\n      }\n    ];\n\n    for (const data of sampleBSData) {\n      const id = randomUUID();\n      const sheet: BalanceSheet = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.balanceSheets.set(id, sheet);\n    }\n\n    // Sample Cash Flow data - 12 months\n    const sampleCFData = [\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-01\",\n        operatingCashFlow: \"900000.00\",\n        netIncome: \"664000.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"-64000.00\",\n        investingCashFlow: \"-500000.00\",\n        capitalExpenditures: \"-500000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-200000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-100000.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"200000.00\",\n        beginningCashBalance: \"1800000.00\",\n        endingCashBalance: \"2000000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-02\",\n        operatingCashFlow: \"950000.00\",\n        netIncome: \"692000.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"-42000.00\",\n        investingCashFlow: \"-600000.00\",\n        capitalExpenditures: \"-600000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-150000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-50000.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"200000.00\",\n        beginningCashBalance: \"2000000.00\",\n        endingCashBalance: \"2200000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-03\",\n        operatingCashFlow: \"970000.00\",\n        netIncome: \"697600.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"-27600.00\",\n        investingCashFlow: \"-620000.00\",\n        capitalExpenditures: \"-620000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"250000.00\",\n        beginningCashBalance: \"2200000.00\",\n        endingCashBalance: \"2450000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-04\",\n        operatingCashFlow: \"1080000.00\",\n        netIncome: \"794400.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"-14400.00\",\n        investingCashFlow: \"-680000.00\",\n        capitalExpenditures: \"-680000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"300000.00\",\n        beginningCashBalance: \"2450000.00\",\n        endingCashBalance: \"2750000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-05\",\n        operatingCashFlow: \"1050000.00\",\n        netIncome: \"768000.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"-18000.00\",\n        investingCashFlow: \"-750000.00\",\n        capitalExpenditures: \"-750000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"200000.00\",\n        beginningCashBalance: \"2750000.00\",\n        endingCashBalance: \"2950000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-06\",\n        operatingCashFlow: \"1120000.00\",\n        netIncome: \"820000.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"0.00\",\n        investingCashFlow: \"-770000.00\",\n        capitalExpenditures: \"-770000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"250000.00\",\n        beginningCashBalance: \"2950000.00\",\n        endingCashBalance: \"3200000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-07\",\n        operatingCashFlow: \"1200000.00\",\n        netIncome: \"891200.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"8800.00\",\n        investingCashFlow: \"-800000.00\",\n        capitalExpenditures: \"-800000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"300000.00\",\n        beginningCashBalance: \"3200000.00\",\n        endingCashBalance: \"3500000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-08\",\n        operatingCashFlow: \"1150000.00\",\n        netIncome: \"841600.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"8400.00\",\n        investingCashFlow: \"-800000.00\",\n        capitalExpenditures: \"-800000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"250000.00\",\n        beginningCashBalance: \"3500000.00\",\n        endingCashBalance: \"3750000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-09\",\n        operatingCashFlow: \"1230000.00\",\n        netIncome: \"916800.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"13200.00\",\n        investingCashFlow: \"-880000.00\",\n        capitalExpenditures: \"-880000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"250000.00\",\n        beginningCashBalance: \"3750000.00\",\n        endingCashBalance: \"4000000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-10\",\n        operatingCashFlow: \"1280000.00\",\n        netIncome: \"933600.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"46400.00\",\n        investingCashFlow: \"-830000.00\",\n        capitalExpenditures: \"-830000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"350000.00\",\n        beginningCashBalance: \"4000000.00\",\n        endingCashBalance: \"4350000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-11\",\n        operatingCashFlow: \"1350000.00\",\n        netIncome: \"1008000.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"42000.00\",\n        investingCashFlow: \"-900000.00\",\n        capitalExpenditures: \"-900000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"350000.00\",\n        beginningCashBalance: \"4350000.00\",\n        endingCashBalance: \"4700000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      },\n      {\n        topic: \"บริษัท ABC จำกัด\",\n        period: \"2024-12\",\n        operatingCashFlow: \"1450000.00\",\n        netIncome: \"1098400.00\",\n        depreciation: \"300000.00\",\n        changeInWorkingCapital: \"51600.00\",\n        investingCashFlow: \"-900000.00\",\n        capitalExpenditures: \"-900000.00\",\n        acquisitions: \"0.00\",\n        financingCashFlow: \"-100000.00\",\n        debtIssuance: \"0.00\",\n        debtRepayment: \"-0.00\",\n        dividendsPaid: \"-100000.00\",\n        netChangeInCash: \"450000.00\",\n        beginningCashBalance: \"4700000.00\",\n        endingCashBalance: \"5150000.00\",\n        isEditable: JSON.stringify({\n          netIncome: false,\n          depreciation: true,\n          capitalExpenditures: true,\n          debtRepayment: true,\n          dividendsPaid: true,\n          operatingCashFlow: false,\n          netChangeInCash: false\n        })\n      }\n    ];\n\n    for (const data of sampleCFData) {\n      const id = randomUUID();\n      const statement: CashFlowStatement = {\n        ...data,\n        id,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n      this.cashFlowStatements.set(id, statement);\n    }\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":51676},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const marketData = pgTable(\"market_data\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  symbol: text(\"symbol\").notNull(),\n  name: text(\"name\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  change: decimal(\"change\", { precision: 10, scale: 2 }).notNull(),\n  changePercent: decimal(\"change_percent\", { precision: 5, scale: 2 }).notNull(),\n  volume: integer(\"volume\").notNull(),\n  marketCap: decimal(\"market_cap\", { precision: 15, scale: 2 }),\n  sector: text(\"sector\"),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const businessNews = pgTable(\"business_news\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  headline: text(\"headline\").notNull(),\n  summary: text(\"summary\").notNull(),\n  category: text(\"category\").notNull(),\n  importance: text(\"importance\").notNull(), // high, medium, low\n  publishedAt: timestamp(\"published_at\").defaultNow().notNull(),\n  source: text(\"source\").notNull(),\n});\n\nexport const companyMetrics = pgTable(\"company_metrics\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyName: text(\"company_name\").notNull(),\n  symbol: text(\"symbol\").notNull(),\n  revenue: decimal(\"revenue\", { precision: 15, scale: 2 }).notNull(),\n  profit: decimal(\"profit\", { precision: 15, scale: 2 }).notNull(),\n  employees: integer(\"employees\").notNull(),\n  industry: text(\"industry\").notNull(),\n  headquarters: text(\"headquarters\").notNull(),\n  description: text(\"description\").notNull(),\n  keyMetrics: text(\"key_metrics\").notNull(), // JSON string with additional metrics\n});\n\nexport const economicIndicators = pgTable(\"economic_indicators\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  value: decimal(\"value\", { precision: 10, scale: 4 }).notNull(),\n  unit: text(\"unit\").notNull(),\n  change: decimal(\"change\", { precision: 10, scale: 4 }).notNull(),\n  period: text(\"period\").notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertMarketDataSchema = createInsertSchema(marketData).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport const insertBusinessNewsSchema = createInsertSchema(businessNews).omit({\n  id: true,\n  publishedAt: true,\n});\n\nexport const insertCompanyMetricsSchema = createInsertSchema(companyMetrics).omit({\n  id: true,\n});\n\nexport const insertEconomicIndicatorsSchema = createInsertSchema(economicIndicators).omit({\n  id: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type MarketData = typeof marketData.$inferSelect;\nexport type BusinessNews = typeof businessNews.$inferSelect;\nexport type CompanyMetrics = typeof companyMetrics.$inferSelect;\nexport type EconomicIndicators = typeof economicIndicators.$inferSelect;\nexport type InsertMarketData = z.infer<typeof insertMarketDataSchema>;\nexport type InsertBusinessNews = z.infer<typeof insertBusinessNewsSchema>;\nexport type InsertCompanyMetrics = z.infer<typeof insertCompanyMetricsSchema>;\nexport type InsertEconomicIndicators = z.infer<typeof insertEconomicIndicatorsSchema>;\n\n// Financial Reports Tables\nexport const profitLossStatement = pgTable(\"profit_loss_statement\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  topic: text(\"topic\").notNull(), // e.g., \"Company A\", \"Division B\", etc.\n  period: text(\"period\").notNull(), // e.g., \"2024-01\", \"2024-Q1\", etc.\n  \n  // Revenue section\n  totalRevenue: decimal(\"total_revenue\", { precision: 15, scale: 2 }).notNull(),\n  costOfGoodsSold: decimal(\"cost_of_goods_sold\", { precision: 15, scale: 2 }).notNull(),\n  grossProfit: decimal(\"gross_profit\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Operating expenses\n  operatingExpenses: decimal(\"operating_expenses\", { precision: 15, scale: 2 }).notNull(),\n  operatingIncome: decimal(\"operating_income\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Other income/expenses\n  otherIncome: decimal(\"other_income\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  otherExpenses: decimal(\"other_expenses\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  \n  // Final calculations\n  netIncomeBeforeTax: decimal(\"net_income_before_tax\", { precision: 15, scale: 2 }).notNull(),\n  taxExpense: decimal(\"tax_expense\", { precision: 15, scale: 2 }).notNull(),\n  netIncome: decimal(\"net_income\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Metadata\n  isEditable: text(\"is_editable\").notNull().default(\"true\"), // JSON string of editable fields\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const balanceSheet = pgTable(\"balance_sheet\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  topic: text(\"topic\").notNull(),\n  period: text(\"period\").notNull(),\n  \n  // Assets\n  currentAssets: decimal(\"current_assets\", { precision: 15, scale: 2 }).notNull(),\n  cash: decimal(\"cash\", { precision: 15, scale: 2 }).notNull(),\n  accountsReceivable: decimal(\"accounts_receivable\", { precision: 15, scale: 2 }).notNull(),\n  inventory: decimal(\"inventory\", { precision: 15, scale: 2 }).notNull(),\n  \n  nonCurrentAssets: decimal(\"non_current_assets\", { precision: 15, scale: 2 }).notNull(),\n  propertyPlantEquipment: decimal(\"property_plant_equipment\", { precision: 15, scale: 2 }).notNull(),\n  intangibleAssets: decimal(\"intangible_assets\", { precision: 15, scale: 2 }).notNull(),\n  \n  totalAssets: decimal(\"total_assets\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Liabilities\n  currentLiabilities: decimal(\"current_liabilities\", { precision: 15, scale: 2 }).notNull(),\n  accountsPayable: decimal(\"accounts_payable\", { precision: 15, scale: 2 }).notNull(),\n  shortTermDebt: decimal(\"short_term_debt\", { precision: 15, scale: 2 }).notNull(),\n  \n  longTermLiabilities: decimal(\"long_term_liabilities\", { precision: 15, scale: 2 }).notNull(),\n  longTermDebt: decimal(\"long_term_debt\", { precision: 15, scale: 2 }).notNull(),\n  \n  totalLiabilities: decimal(\"total_liabilities\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Equity\n  shareholdersEquity: decimal(\"shareholders_equity\", { precision: 15, scale: 2 }).notNull(),\n  retainedEarnings: decimal(\"retained_earnings\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Metadata\n  isEditable: text(\"is_editable\").notNull().default(\"true\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const cashFlowStatement = pgTable(\"cash_flow_statement\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  topic: text(\"topic\").notNull(),\n  period: text(\"period\").notNull(),\n  \n  // Operating activities\n  operatingCashFlow: decimal(\"operating_cash_flow\", { precision: 15, scale: 2 }).notNull(),\n  netIncome: decimal(\"net_income\", { precision: 15, scale: 2 }).notNull(),\n  depreciation: decimal(\"depreciation\", { precision: 15, scale: 2 }).notNull(),\n  changeInWorkingCapital: decimal(\"change_in_working_capital\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Investing activities\n  investingCashFlow: decimal(\"investing_cash_flow\", { precision: 15, scale: 2 }).notNull(),\n  capitalExpenditures: decimal(\"capital_expenditures\", { precision: 15, scale: 2 }).notNull(),\n  acquisitions: decimal(\"acquisitions\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  \n  // Financing activities\n  financingCashFlow: decimal(\"financing_cash_flow\", { precision: 15, scale: 2 }).notNull(),\n  debtIssuance: decimal(\"debt_issuance\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  debtRepayment: decimal(\"debt_repayment\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  dividendsPaid: decimal(\"dividends_paid\", { precision: 15, scale: 2 }).notNull().default(\"0\"),\n  \n  // Net change\n  netChangeInCash: decimal(\"net_change_in_cash\", { precision: 15, scale: 2 }).notNull(),\n  beginningCashBalance: decimal(\"beginning_cash_balance\", { precision: 15, scale: 2 }).notNull(),\n  endingCashBalance: decimal(\"ending_cash_balance\", { precision: 15, scale: 2 }).notNull(),\n  \n  // Metadata\n  isEditable: text(\"is_editable\").notNull().default(\"true\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Custom decimal validation schema\nconst decimalSchema = z.string().refine((value) => {\n  // Allow empty or basic decimal format\n  if (!value || value.trim() === '') return false;\n  \n  const num = parseFloat(value);\n  if (isNaN(num) || num < 0) return false;\n  \n  // Check for valid decimal format (allow integers and decimals with max 2 places)\n  const decimalPattern = /^\\d+(\\.\\d{1,2})?$/;\n  return decimalPattern.test(value.trim());\n}, {\n  message: \"Must be a valid non-negative decimal number with max 2 decimal places\"\n});\n\n// Insert schemas for financial reports with proper validation\nexport const insertProfitLossStatementSchema = createInsertSchema(profitLossStatement).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  totalRevenue: decimalSchema,\n  costOfGoodsSold: decimalSchema,\n  grossProfit: decimalSchema,\n  operatingExpenses: decimalSchema,\n  operatingIncome: decimalSchema,\n  otherIncome: decimalSchema,\n  otherExpenses: decimalSchema,\n  netIncomeBeforeTax: decimalSchema,\n  taxExpense: decimalSchema,\n  netIncome: decimalSchema,\n});\n\nexport const insertBalanceSheetSchema = createInsertSchema(balanceSheet).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  currentAssets: decimalSchema,\n  cash: decimalSchema,\n  accountsReceivable: decimalSchema,\n  inventory: decimalSchema,\n  nonCurrentAssets: decimalSchema,\n  propertyPlantEquipment: decimalSchema,\n  intangibleAssets: decimalSchema,\n  totalAssets: decimalSchema,\n  currentLiabilities: decimalSchema,\n  accountsPayable: decimalSchema,\n  shortTermDebt: decimalSchema,\n  longTermLiabilities: decimalSchema,\n  longTermDebt: decimalSchema,\n  totalLiabilities: decimalSchema,\n  shareholdersEquity: decimalSchema,\n  retainedEarnings: decimalSchema,\n});\n\nexport const insertCashFlowStatementSchema = createInsertSchema(cashFlowStatement).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  operatingCashFlow: decimalSchema,\n  netIncome: decimalSchema,\n  depreciation: decimalSchema,\n  changeInWorkingCapital: decimalSchema,\n  investingCashFlow: decimalSchema,\n  capitalExpenditures: decimalSchema,\n  acquisitions: decimalSchema,\n  financingCashFlow: decimalSchema,\n  debtIssuance: decimalSchema,\n  debtRepayment: decimalSchema,\n  dividendsPaid: decimalSchema,\n  netChangeInCash: decimalSchema,\n  beginningCashBalance: decimalSchema,\n  endingCashBalance: decimalSchema,\n});\n\n// Types for financial reports\nexport type ProfitLossStatement = typeof profitLossStatement.$inferSelect;\nexport type BalanceSheet = typeof balanceSheet.$inferSelect;\nexport type CashFlowStatement = typeof cashFlowStatement.$inferSelect;\nexport type InsertProfitLossStatement = z.infer<typeof insertProfitLossStatementSchema>;\nexport type InsertBalanceSheet = z.infer<typeof insertBalanceSheetSchema>;\nexport type InsertCashFlowStatement = z.infer<typeof insertCashFlowStatementSchema>;\n","size_bytes":11747},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport FinancialReports from \"@/pages/FinancialReportsClean\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/financial-reports\" component={FinancialReports} />\n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":961},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n  --foreground: 225 15% 20%;\n  --border: 220 13% 91%;\n  --card: 0 0% 98%;\n  --card-foreground: 225 15% 20%;\n  --card-border: 220 13% 89%;\n  --sidebar: 0 0% 96%;\n  --sidebar-foreground: 225 15% 20%;\n  --sidebar-border: 220 13% 87%;\n  --sidebar-primary: 225 85% 15%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 0 0% 94%;\n  --sidebar-accent-foreground: 225 15% 20%;\n  --sidebar-ring: 210 100% 60%;\n  --popover: 0 0% 95%;\n  --popover-foreground: 225 15% 20%;\n  --popover-border: 220 13% 85%;\n  --primary: 225 85% 15%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 220 6% 92%;\n  --secondary-foreground: 225 15% 20%;\n  --muted: 220 6% 94%;\n  --muted-foreground: 225 15% 45%;\n  --accent: 210 20% 96%;\n  --accent-foreground: 210 100% 25%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 220 13% 85%;\n  --ring: 210 100% 60%;\n  --chart-1: 225 85% 15%;\n  --chart-2: 210 100% 60%;\n  --chart-3: 270 85% 65%;\n  --chart-4: 180 85% 45%;\n  --chart-5: 300 85% 55%;\n\n  --font-sans: Inter, system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, Consolas, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 1px 2px -1px hsl(220 13% 91% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 2px 4px -1px hsl(220 13% 91% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 4px 6px -1px hsl(220 13% 91% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00), 0px 8px 10px -1px hsl(220 13% 91% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 13% 91% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 225 6% 9%;\n  --foreground: 0 0% 95%;\n  --border: 225 6% 18%;\n  --card: 225 6% 11%;\n  --card-foreground: 0 0% 95%;\n  --card-border: 225 6% 19%;\n  --sidebar: 225 6% 13%;\n  --sidebar-foreground: 0 0% 95%;\n  --sidebar-border: 225 6% 21%;\n  --sidebar-primary: 225 85% 15%;\n  --sidebar-primary-foreground: 0 0% 98%;\n  --sidebar-accent: 225 6% 15%;\n  --sidebar-accent-foreground: 0 0% 95%;\n  --sidebar-ring: 210 100% 60%;\n  --popover: 225 6% 16%;\n  --popover-foreground: 0 0% 95%;\n  --popover-border: 225 6% 24%;\n  --primary: 225 85% 15%;\n  --primary-foreground: 0 0% 98%;\n  --secondary: 225 6% 18%;\n  --secondary-foreground: 0 0% 95%;\n  --muted: 225 6% 14%;\n  --muted-foreground: 0 0% 65%;\n  --accent: 210 20% 16%;\n  --accent-foreground: 210 100% 85%;\n  --destructive: 0 84% 60%;\n  --destructive-foreground: 0 0% 98%;\n  --input: 225 6% 24%;\n  --ring: 210 100% 60%;\n  --chart-1: 210 100% 85%;\n  --chart-2: 210 100% 70%;\n  --chart-3: 270 85% 75%;\n  --chart-4: 180 85% 65%;\n  --chart-5: 300 85% 70%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(225 6% 18% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(225 6% 18% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(225 6% 18% / 0.00), 0px 1px 2px -1px hsl(225 6% 18% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(225 6% 18% / 0.00), 0px 1px 2px -1px hsl(225 6% 18% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(225 6% 18% / 0.00), 0px 2px 4px -1px hsl(225 6% 18% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(225 6% 18% / 0.00), 0px 4px 6px -1px hsl(225 6% 18% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(225 6% 18% / 0.00), 0px 8px 10px -1px hsl(225 6% 18% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(225 6% 18% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n  \n  /* Smooth scrolling for better UX */\n  html {\n    scroll-behavior: smooth;\n  }\n  \n  /* Enhanced animations for landing page */\n  .fade-in-up {\n    animation: fadeInUp 0.6s ease-out forwards;\n  }\n  \n  .fade-in-left {\n    animation: fadeInLeft 0.8s ease-out forwards;\n  }\n  \n  .fade-in-right {\n    animation: fadeInRight 0.8s ease-out forwards;\n  }\n  \n  .scale-on-hover {\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n  }\n  \n  .scale-on-hover:hover {\n    transform: scale(1.02);\n    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);\n  }\n  \n  /* Progress indicator styles */\n  .progress-bar {\n    position: relative;\n    background: linear-gradient(90deg, hsl(var(--chart-1)) 0%, hsl(var(--chart-2)) 50%, hsl(var(--chart-3)) 100%);\n    height: 4px;\n    border-radius: 2px;\n    overflow: hidden;\n  }\n  \n  .progress-bar::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    animation: shimmer 2s infinite;\n  }\n  \n  @keyframes fadeInUp {\n    from {\n      opacity: 0;\n      transform: translateY(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n  \n  @keyframes fadeInLeft {\n    from {\n      opacity: 0;\n      transform: translateX(-30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n  \n  @keyframes fadeInRight {\n    from {\n      opacity: 0;\n      transform: translateX(30px);\n    }\n    to {\n      opacity: 1;\n      transform: translateX(0);\n    }\n  }\n  \n  @keyframes shimmer {\n    0% {\n      left: -100%;\n    }\n    100% {\n      left: 100%;\n    }\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":11504},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/FeatureDeepDive.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport dashboardMockup from \"@assets/generated_images/Financial_dashboard_mockup_interface_6e947e70.png\";\nimport scenarioMockup from \"@assets/generated_images/Scenario_modeling_interface_mockup_6ad3769f.png\";\nimport allocationMockup from \"@assets/generated_images/Cost_allocation_workflow_visualization_57740431.png\";\n\nconst integrations = [\"SAP\", \"Oracle\", \"NetSuite\", \"QuickBooks\", \"Excel\", \"Custom APIs\"];\n\nexport default function FeatureDeepDive() {\n  return (\n    <div className=\"py-24 space-y-32\">\n      {/* Smart Reporting */}\n      <section className=\"container mx-auto px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-4xl font-bold text-foreground\" data-testid=\"smart-reporting-title\">\n              Your AI-Powered Financial Command Center\n            </h2>\n            <h3 className=\"text-2xl text-primary font-semibold\" data-testid=\"smart-reporting-subtitle\">\n              Transform raw data into actionable intelligence\n            </h3>\n            <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"smart-reporting-description\">\n              Starting from your existing systems, Orion navigates your financial data to surface insights, \n              detect anomalies, and generate reports automatically.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Key Features:</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Automated data ingestion from any source\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Real-time anomaly detection with AI\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Interactive drill-down to transaction level\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  One-click period comparisons\n                </li>\n              </ul>\n            </div>\n\n            <div className=\"space-y-3\">\n              <p className=\"text-sm font-semibold text-foreground\">Compatible with:</p>\n              <div className=\"flex flex-wrap gap-2\">\n                {integrations.map((integration, index) => (\n                  <Badge key={index} variant=\"secondary\" data-testid={`integration-${index}`}>\n                    {integration}\n                  </Badge>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <div className=\"lg:pl-8\">\n            <Card className=\"overflow-hidden\">\n              <img \n                src={dashboardMockup} \n                alt=\"Smart Reporting Dashboard\"\n                className=\"w-full h-auto\"\n                data-testid=\"smart-reporting-mockup\"\n              />\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Scenario Modeling */}\n      <section className=\"container mx-auto px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"lg:order-2 space-y-6\">\n            <h2 className=\"text-4xl font-bold text-foreground\" data-testid=\"scenario-modeling-title\">\n              Test Every Possibility. Prepare for Any Future.\n            </h2>\n            <h3 className=\"text-2xl text-primary font-semibold\" data-testid=\"scenario-modeling-subtitle\">\n              Model the future with confidence\n            </h3>\n            <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"scenario-modeling-description\">\n              Orion runs in the background so you can test assumptions and see instant impact. \n              Each scenario runs in an isolated sandbox without affecting your actuals.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">Key Benefits:</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Test unlimited what-if scenarios\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  See cascading P&L effects instantly\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Compare scenarios side-by-side\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Get AI-powered scenario suggestions\n                </li>\n              </ul>\n            </div>\n\n            <Card className=\"p-4 bg-muted/50\">\n              <CardContent className=\"p-0\">\n                <p className=\"text-sm text-muted-foreground italic\">\n                  \"We modeled 15 different growth scenarios in the time it used to take us \n                  to build one spreadsheet model.\"\n                </p>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  — CFO, TechScale Inc.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"lg:order-1 lg:pr-8\">\n            <Card className=\"overflow-hidden\">\n              <img \n                src={scenarioMockup} \n                alt=\"Scenario Modeling Interface\"\n                className=\"w-full h-auto\"\n                data-testid=\"scenario-modeling-mockup\"\n              />\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Cost Intelligence */}\n      <section className=\"container mx-auto px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n          <div className=\"space-y-6\">\n            <h2 className=\"text-4xl font-bold text-foreground\" data-testid=\"cost-intelligence-title\">\n              Fair. Transparent. Automated.\n            </h2>\n            <h3 className=\"text-2xl text-primary font-semibold\" data-testid=\"cost-intelligence-subtitle\">\n              Delegate cost allocation to Orion\n            </h3>\n            <p className=\"text-lg text-muted-foreground leading-relaxed\" data-testid=\"cost-intelligence-description\">\n              Set up automatic allocation rules with our visual builder. Tag @orion to start allocations \n              directly from your workflow. Orion plugs into your existing processes, running proactively \n              so your team stays focused on strategic work.\n            </p>\n            \n            <div className=\"space-y-4\">\n              <h4 className=\"font-semibold text-foreground\">The Orion Advantage:</h4>\n              <ul className=\"space-y-2 text-muted-foreground\">\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Visual drag-and-drop rule builder\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  AI-recommended allocation drivers\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Full transparency for all departments\n                </li>\n                <li className=\"flex items-center gap-2\">\n                  <span className=\"w-2 h-2 bg-primary rounded-full\"></span>\n                  Complete audit trail\n                </li>\n              </ul>\n            </div>\n\n            <Card className=\"p-4 bg-primary/5\">\n              <CardContent className=\"p-0\">\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-semibold\">Allocating IT Costs</span>\n                    <span className=\"text-xs text-muted-foreground\">ETA: 30 seconds</span>\n                  </div>\n                  <div className=\"bg-muted rounded-full h-2\">\n                    <div className=\"bg-primary h-2 rounded-full w-4/5\" />\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    85% Complete • 2 departments remaining\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <div className=\"lg:pl-8\">\n            <Card className=\"overflow-hidden\">\n              <img \n                src={allocationMockup} \n                alt=\"Cost Allocation Workflow\"\n                className=\"w-full h-auto\"\n                data-testid=\"cost-intelligence-mockup\"\n              />\n            </Card>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9414},"client/src/components/FeaturesOverview.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { BarChart3, Zap, DollarSign, Users, Bot } from \"lucide-react\";\n\nconst features = [\n  {\n    icon: BarChart3,\n    title: \"Smart Reporting\",\n    subtitle: \"AI-Powered Financial Intelligence\",\n    description: \"Transform raw data into actionable insights instantly. Get automated anomaly detection and drill-down capabilities.\",\n    benefits: [\"90% faster reporting\", \"Zero manual errors\", \"Real-time updates\"],\n    color: \"text-chart-1\",\n    bgColor: \"bg-chart-1/10\"\n  },\n  {\n    icon: Zap,\n    title: \"Scenario Modeling\", \n    subtitle: \"Interactive What-If Analysis\",\n    description: \"Test any business assumption and see immediate P&L impact. Make confident strategic decisions with data.\",\n    benefits: [\"Instant projections\", \"Multiple scenarios\", \"Risk assessment\"],\n    color: \"text-chart-2\",\n    bgColor: \"bg-chart-2/10\"\n  },\n  {\n    icon: DollarSign,\n    title: \"Cost Intelligence\",\n    subtitle: \"Automated Cost Allocation\", \n    description: \"Fair, transparent cost distribution using AI recommendations. Eliminate manual allocation disputes forever.\",\n    benefits: [\"AI-driven allocation\", \"Transparent logic\", \"Audit-ready trails\"],\n    color: \"text-chart-3\",\n    bgColor: \"bg-chart-3/10\"\n  },\n  {\n    icon: Users,\n    title: \"Collaborative Planning\",\n    subtitle: \"Streamlined Budgeting & Forecasting\",\n    description: \"Unite your team with real-time collaborative workflows. Get AI-powered baseline suggestions and approvals.\",\n    benefits: [\"Team collaboration\", \"Workflow automation\", \"Version control\"],\n    color: \"text-chart-4\",\n    bgColor: \"bg-chart-4/10\"\n  },\n  {\n    icon: Bot,\n    title: \"AI Assistant & Strategic Insights\",\n    subtitle: \"Natural Language Queries + Long-Range Planning\",\n    description: \"Ask complex financial questions in plain English. Get strategic insights with market intelligence integration.\",\n    benefits: [\"Natural language\", \"Market insights\", \"Strategic analysis\"],\n    color: \"text-chart-5\",\n    bgColor: \"bg-chart-5/10\"\n  },\n];\n\nexport default function FeaturesOverview() {\n  return (\n    <section className=\"py-24 bg-gradient-to-b from-background to-muted/20\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16 space-y-4\">\n          <div className=\"inline-block px-4 py-2 bg-primary/10 rounded-full border border-primary/20 mb-2\">\n            <span className=\"text-primary font-semibold text-sm\">\n              ⚡ Core Features\n            </span>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\" data-testid=\"features-title\">\n            Five Powerful Features to Transform Your FP&A\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Everything you need to modernize your financial operations and make data-driven decisions faster.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12\">\n          {features.map((feature, index) => {\n            const Icon = feature.icon;\n            return (\n              <Card key={index} className=\"p-6 hover-elevate transition-all duration-300 border-l-4 border-l-transparent hover:border-l-primary group\" data-testid={`feature-card-${index}`}>\n                <CardContent className=\"p-0\">\n                  <div className=\"mb-4 flex items-center justify-between\">\n                    <div className={`p-3 rounded-xl ${feature.bgColor} group-hover:scale-110 transition-transform duration-300`}>\n                      <Icon className={`w-8 h-8 ${feature.color}`} />\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-xs text-muted-foreground\">Feature #{index + 1}</div>\n                    </div>\n                  </div>\n                  <h3 className=\"text-xl font-bold text-foreground mb-2 group-hover:text-primary transition-colors\" data-testid={`feature-title-${index}`}>\n                    {feature.title}\n                  </h3>\n                  <p className=\"text-primary font-semibold mb-3 text-sm\" data-testid={`feature-subtitle-${index}`}>\n                    {feature.subtitle}\n                  </p>\n                  <p className=\"text-muted-foreground leading-relaxed mb-4\" data-testid={`feature-description-${index}`}>\n                    {feature.description}\n                  </p>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-xs text-muted-foreground font-semibold mb-2\">Key Benefits:</div>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {feature.benefits.map((benefit, benefitIndex) => (\n                        <div key={benefitIndex} className=\"text-xs px-2 py-1 bg-muted/50 rounded-full text-muted-foreground\">\n                          • {benefit}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })}\n        </div>\n\n        <div className=\"text-center\">\n          <Button size=\"lg\" variant=\"outline\" className=\"hover-elevate active-elevate-2\" data-testid=\"button-explore-features\">\n            Explore All Features →\n          </Button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":5403},"client/src/components/Footer.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sparkles } from \"lucide-react\";\nimport { SiLinkedin, SiX, SiGithub } from \"react-icons/si\";\n\nconst footerSections = [\n  {\n    title: \"Product\",\n    links: [\n      \"Features\",\n      \"Pricing\", \n      \"Enterprise\",\n      \"Security\",\n      \"Integrations\"\n    ]\n  },\n  {\n    title: \"Resources\", \n    links: [\n      \"Documentation\",\n      \"API Reference\",\n      \"Blog\",\n      \"Case Studies\",\n      \"Webinars\"\n    ]\n  },\n  {\n    title: \"Support\",\n    links: [\n      \"Help Center\",\n      \"Contact Sales\", \n      \"System Status\",\n      \"Community\",\n      \"Training\"\n    ]\n  },\n  {\n    title: \"Company\",\n    links: [\n      \"About Us\",\n      \"Careers\", \n      \"News\",\n      \"Partners\",\n      \"Investors\"\n    ]\n  },\n  {\n    title: \"Legal\",\n    links: [\n      \"Privacy Policy\",\n      \"Terms of Service\",\n      \"Data Processing\",\n      \"Cookie Policy\",\n      \"Compliance\"\n    ]\n  }\n];\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-muted/30 border-t border-border\">\n      <div className=\"container mx-auto px-6 py-16\">\n        <div className=\"grid md:grid-cols-6 gap-8 mb-12\">\n          {/* Logo and Description */}\n          <div className=\"md:col-span-1\">\n            <div className=\"flex items-center gap-2 mb-4\">\n              <Sparkles className=\"w-8 h-8 text-primary\" data-testid=\"footer-logo-icon\" />\n              <span className=\"text-2xl font-bold text-foreground\" data-testid=\"footer-logo-text\">\n                Orion\n              </span>\n            </div>\n            <p className=\"text-muted-foreground text-sm leading-relaxed mb-6\">\n              Your AI-powered finance team companion. Transform FP&A with intelligent automation.\n            </p>\n            <div className=\"flex gap-3\">\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover-elevate\" data-testid=\"social-linkedin\">\n                <SiLinkedin className=\"w-5 h-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover-elevate\" data-testid=\"social-twitter\">\n                <SiX className=\"w-5 h-5\" />\n              </Button>\n              <Button variant=\"ghost\" size=\"icon\" className=\"hover-elevate\" data-testid=\"social-github\">\n                <SiGithub className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Footer Links */}\n          {footerSections.map((section, index) => (\n            <div key={index} className=\"md:col-span-1\">\n              <h3 className=\"font-semibold text-foreground mb-4\" data-testid={`footer-section-${index}`}>\n                {section.title}\n              </h3>\n              <ul className=\"space-y-3\">\n                {section.links.map((link, linkIndex) => (\n                  <li key={linkIndex}>\n                    <Button \n                      variant=\"ghost\" \n                      className=\"h-auto p-0 text-muted-foreground hover:text-foreground text-sm justify-start hover-elevate\"\n                      data-testid={`footer-link-${index}-${linkIndex}`}\n                    >\n                      {link}\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ))}\n        </div>\n\n        {/* Bottom Bar */}\n        <div className=\"border-t border-border pt-8\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center gap-4\">\n            <p className=\"text-muted-foreground text-sm\" data-testid=\"footer-copyright\">\n              © 2024 Orion Technologies, Inc. All rights reserved.\n            </p>\n            <div className=\"flex gap-6 text-sm\">\n              <Button variant=\"ghost\" className=\"h-auto p-0 text-muted-foreground hover:text-foreground hover-elevate\" data-testid=\"footer-privacy\">\n                Privacy\n              </Button>\n              <Button variant=\"ghost\" className=\"h-auto p-0 text-muted-foreground hover:text-foreground hover-elevate\" data-testid=\"footer-terms\">\n                Terms\n              </Button>\n              <Button variant=\"ghost\" className=\"h-auto p-0 text-muted-foreground hover:text-foreground hover-elevate\" data-testid=\"footer-cookies\">\n                Cookies\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":4305},"client/src/components/Hero.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Copy, Bot, TrendingUp, CheckCircle, MessageSquare } from \"lucide-react\";\nimport heroBackground from \"@assets/generated_images/Gradient_mesh_hero_background_83768b02.png\";\n\nexport default function Hero() {\n  const [copied, setCopied] = useState(false);\n\n  const handleCopy = () => {\n    navigator.clipboard.writeText(\"npm i -g @orion/cli\");\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <section className=\"relative min-h-screen flex items-center justify-center overflow-hidden\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${heroBackground})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-background/60 to-background/80\" />\n\n      {/* Floating Demo Cards */}\n      <Card className=\"absolute top-20 right-8 w-80 p-4 bg-card/95 backdrop-blur-sm animate-pulse hidden lg:block\" data-testid=\"card-anomaly-detection\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <Bot className=\"w-5 h-5 text-chart-2\" />\n          <span className=\"font-semibold text-card-foreground\">AI Anomaly Detection</span>\n        </div>\n        <div className=\"text-sm text-muted-foreground mb-2\">\n          \"3 unusual patterns detected in Q4 expenses\"\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-xs text-muted-foreground\">Status: Analyzing...</span>\n          <div className=\"flex-1 bg-muted rounded-full h-2\">\n            <div className=\"bg-chart-2 h-2 rounded-full w-4/5\" />\n          </div>\n          <span className=\"text-xs font-mono\">85%</span>\n        </div>\n      </Card>\n\n      <Card className=\"absolute bottom-32 left-8 w-72 p-4 bg-card/95 backdrop-blur-sm hidden lg:block\" data-testid=\"card-natural-language\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <MessageSquare className=\"w-5 h-5 text-chart-3\" />\n          <span className=\"font-semibold text-card-foreground\">Natural Language Query</span>\n        </div>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"text-muted-foreground\">\n            <strong>User:</strong> \"Why did marketing costs increase 15%?\"\n          </div>\n          <div className=\"text-card-foreground\">\n            <strong>Orion:</strong> \"Campaign spend up $45K (+18%) driven by...\"\n            <span className=\"animate-pulse\">|</span>\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"absolute bottom-20 right-16 w-64 p-4 bg-card/95 backdrop-blur-sm hidden lg:block\" data-testid=\"card-scenario-modeling\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <TrendingUp className=\"w-5 h-5 text-chart-1\" />\n          <span className=\"font-semibold text-card-foreground\">Scenario Modeling</span>\n        </div>\n        <div className=\"space-y-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Conservative:</span>\n            <span className=\"text-green-600\">+5% ↗️</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Base Case:</span>\n            <span className=\"text-green-600\">+12% ↗️</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Aggressive:</span>\n            <span className=\"text-green-600\">+22% ↗️</span>\n          </div>\n        </div>\n      </Card>\n\n      <Card className=\"absolute top-32 left-12 w-72 p-4 bg-card/95 backdrop-blur-sm hidden lg:block\" data-testid=\"card-month-end\">\n        <div className=\"flex items-center gap-2 mb-3\">\n          <CheckCircle className=\"w-5 h-5 text-green-600\" />\n          <span className=\"font-semibold text-card-foreground\">Month-End Progress</span>\n        </div>\n        <div className=\"space-y-3 text-sm\">\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Consolidation:</span>\n              <span className=\"text-green-600\">Complete</span>\n            </div>\n            <div className=\"bg-green-600 h-2 rounded-full w-full\" />\n          </div>\n          <div className=\"space-y-1\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-muted-foreground\">Allocations:</span>\n              <span className=\"text-chart-2\">Running</span>\n            </div>\n            <div className=\"bg-muted rounded-full h-2\">\n              <div className=\"bg-chart-2 h-2 rounded-full w-3/4\" />\n            </div>\n          </div>\n          <div className=\"pt-2 border-t border-border\">\n            <span className=\"text-xs text-muted-foreground\">Time saved: 4.5 hours</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Main Content */}\n      <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n        <div className=\"space-y-6\">\n          <div className=\"inline-block px-4 py-2 bg-primary/10 rounded-full border border-primary/20 mb-4\">\n            <span className=\"text-primary font-semibold text-sm\">\n              🚀 Transform Your Finance Operations\n            </span>\n          </div>\n          \n          <h1 className=\"text-5xl md:text-7xl font-black text-foreground leading-tight\" data-testid=\"hero-headline\">\n            Your AI-Powered\n            <br />\n            <span className=\"bg-gradient-to-r from-chart-1 to-chart-2 bg-clip-text text-transparent\">\n              Finance Team Companion\n            </span>\n          </h1>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\" data-testid=\"hero-subheadline\">\n            Transform complex financial data into actionable insights with AI. \n            <br className=\"hidden md:block\" />\n            <span className=\"text-foreground font-semibold\">Cut reporting time by 90%</span> and make data-driven decisions faster.\n          </p>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-2xl mx-auto text-sm text-muted-foreground\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n              <span>Real-time Analytics</span>\n            </div>\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n              <span>AI-Powered Insights</span>\n            </div>\n            <div className=\"flex items-center justify-center gap-2\">\n              <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n              <span>No-Code Setup</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row items-center justify-center gap-4 mb-8\">\n          <Link href=\"/dashboard\">\n            <Button size=\"lg\" className=\"text-lg px-8 py-4 hover-elevate active-elevate-2\" data-testid=\"button-get-started\">\n              Get Started →\n            </Button>\n          </Link>\n          <Button \n            variant=\"outline\" \n            size=\"lg\" \n            className=\"text-lg px-6 py-4 font-mono gap-2 hover-elevate active-elevate-2\"\n            onClick={handleCopy}\n            data-testid=\"button-copy-cli\"\n          >\n            $ npm i -g @orion/cli\n            <Copy className=\"w-4 h-4\" />\n          </Button>\n        </div>\n\n        {/* Trust Indicators */}\n        <div className=\"bg-card/80 backdrop-blur-sm border border-card-border rounded-2xl p-6 max-w-4xl mx-auto\" data-testid=\"trust-indicators\">\n          <p className=\"text-center text-sm text-muted-foreground mb-4\">Trusted by leading finance teams worldwide</p>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-chart-1 mb-1\">500+</div>\n              <div className=\"text-sm text-muted-foreground\">Finance Teams</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Across 40+ countries</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-chart-2 mb-1\">$2B+</div>\n              <div className=\"text-sm text-muted-foreground\">Analyzed Daily</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Real-time processing</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-3xl font-bold text-chart-3 mb-1\">99.9%</div>\n              <div className=\"text-sm text-muted-foreground\">Uptime SLA</div>\n              <div className=\"text-xs text-muted-foreground mt-1\">Enterprise-grade</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":9049},"client/src/components/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { \n  Sheet,\n  SheetContent,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\nimport { ChevronDown, Sparkles, BarChart3, FileText, Target, Users, Settings, Home, Menu } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [, setLocation] = useLocation();\n\n  const handleNavigation = (href: string) => {\n    setMobileMenuOpen(false);\n    setLocation(href);\n  };\n\n  return (\n    <>\n      {/* Main Navigation Bar */}\n      <nav className=\"fixed top-0 w-full z-50 bg-background dark:bg-slate-900 border-b border-border dark:border-slate-700\">\n        <div className=\"container mx-auto px-6 py-3\">\n          <div className=\"flex items-center justify-between\">\n            {/* Logo */}\n            <Link href=\"/\" className=\"flex items-center gap-2 hover:opacity-80 transition-opacity\" data-testid=\"logo-link\">\n              <Sparkles className=\"w-7 h-7 text-primary dark:text-blue-400\" data-testid=\"logo-icon\" />\n              <span className=\"text-xl font-bold text-foreground dark:text-white\" data-testid=\"logo-text\">\n                Orion\n              </span>\n            </Link>\n\n            {/* Desktop Navigation Tabs */}\n            <div className=\"hidden lg:flex items-center gap-1\">\n              <Link href=\"/dashboard\" className=\"px-4 py-2 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 rounded transition-colors\" data-testid=\"nav-dashboard\">\n                <div className=\"flex items-center gap-2\">\n                  <Home className=\"w-4 h-4\" />\n                  Dashboard\n                </div>\n              </Link>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"gap-1 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 px-4 py-2\" \n                    data-testid=\"dropdown-analytics\"\n                  >\n                    <BarChart3 className=\"w-4 h-4\" />\n                    Analytics <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 bg-background dark:bg-slate-800 border-border dark:border-slate-700\">\n                  <div className=\"grid grid-cols-2 gap-4 p-4\">\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Performance</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-smart-reporting\" onSelect={() => handleNavigation('/dashboard')}>\n                          Smart Reporting\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-performance-metrics\" onSelect={() => handleNavigation('/dashboard')}>\n                          Performance Metrics\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-budget-analysis\" onSelect={() => handleNavigation('/dashboard')}>\n                          Budget Analysis\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Intelligence</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-cost-intelligence\" onSelect={() => handleNavigation('/dashboard')}>\n                          Cost Intelligence\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-ai-insights\" onSelect={() => handleNavigation('/dashboard')}>\n                          AI Insights\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-trend-analysis\" onSelect={() => handleNavigation('/dashboard')}>\n                          Trend Analysis\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                  </div>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"gap-1 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 px-4 py-2\" \n                    data-testid=\"dropdown-reports\"\n                  >\n                    <FileText className=\"w-4 h-4\" />\n                    Reports <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 bg-background dark:bg-slate-800 border-border dark:border-slate-700\">\n                  <div className=\"grid grid-cols-2 gap-4 p-4\">\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Financial</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-financial-reports\" onSelect={() => handleNavigation('/financial-reports')}>\n                          Financial Reports\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-budget-reports\" onSelect={() => handleNavigation('/dashboard')}>\n                          Budget Reports\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-cost-reports\" onSelect={() => handleNavigation('/dashboard')}>\n                          Cost Reports\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Operational</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-monthly-summary\" onSelect={() => handleNavigation('/dashboard')}>\n                          Monthly Summary\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-department-reports\" onSelect={() => handleNavigation('/dashboard')}>\n                          Department Reports\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-project-reports\" onSelect={() => handleNavigation('/dashboard')}>\n                          Project Reports\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                  </div>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"gap-1 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 px-4 py-2\" \n                    data-testid=\"dropdown-planning\"\n                  >\n                    <Target className=\"w-4 h-4\" />\n                    Planning <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 bg-background dark:bg-slate-800 border-border dark:border-slate-700\">\n                  <div className=\"grid grid-cols-2 gap-4 p-4\">\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Budget & Forecast</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-collaborative-planning\" onSelect={() => handleNavigation('/dashboard')}>\n                          Collaborative Planning\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-scenario-modeling\" onSelect={() => handleNavigation('/dashboard')}>\n                          Scenario Modeling\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-budget-planner\" onSelect={() => handleNavigation('/dashboard')}>\n                          Budget Planner\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Strategy</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-forecast-models\" onSelect={() => handleNavigation('/dashboard')}>\n                          Forecast Models\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-resource-planning\" onSelect={() => handleNavigation('/dashboard')}>\n                          Resource Planning\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-strategic-analysis\" onSelect={() => handleNavigation('/dashboard')}>\n                          Strategic Analysis\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                  </div>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"gap-1 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 px-4 py-2\" \n                    data-testid=\"dropdown-teams\"\n                  >\n                    <Users className=\"w-4 h-4\" />\n                    Teams <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 bg-background dark:bg-slate-800 border-border dark:border-slate-700\">\n                  <div className=\"grid grid-cols-2 gap-4 p-4\">\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Management</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-team-management\" onSelect={() => handleNavigation('/dashboard')}>\n                          Team Management\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-department-overview\" onSelect={() => handleNavigation('/dashboard')}>\n                          Department Overview\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-user-roles\" onSelect={() => handleNavigation('/dashboard')}>\n                          User Roles\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Collaboration</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-access-control\" onSelect={() => handleNavigation('/dashboard')}>\n                          Access Control\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-team-reports\" onSelect={() => handleNavigation('/dashboard')}>\n                          Team Reports\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-collaboration-tools\" onSelect={() => handleNavigation('/dashboard')}>\n                          Collaboration Tools\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                  </div>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    className=\"gap-1 text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800 px-4 py-2\" \n                    data-testid=\"dropdown-tools\"\n                  >\n                    <Settings className=\"w-4 h-4\" />\n                    Tools <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"w-80 bg-background dark:bg-slate-800 border-border dark:border-slate-700\">\n                  <div className=\"grid grid-cols-2 gap-4 p-4\">\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Configuration</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-settings\" onSelect={() => handleNavigation('/dashboard')}>\n                          Settings\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-integrations\" onSelect={() => handleNavigation('/dashboard')}>\n                          Integrations\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-api-access\" onSelect={() => handleNavigation('/dashboard')}>\n                          API Access\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                    <div>\n                      <div className=\"text-xs font-semibold text-muted-foreground dark:text-slate-400 uppercase tracking-wide mb-2\">Support</div>\n                      <div className=\"space-y-1\">\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-help-center\" onSelect={() => handleNavigation('/dashboard')}>\n                          Help Center\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-documentation\" onSelect={() => handleNavigation('/dashboard')}>\n                          Documentation\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-700\" data-testid=\"menu-ai-assistant\" onSelect={() => handleNavigation('/dashboard')}>\n                          AI Assistant\n                        </DropdownMenuItem>\n                      </div>\n                    </div>\n                  </div>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n\n            {/* Desktop User Actions */}\n            <div className=\"hidden lg:flex items-center gap-3\">\n              <Button variant=\"ghost\" className=\"text-foreground dark:text-white hover:bg-muted dark:hover:bg-slate-800\" data-testid=\"button-sign-in\">\n                Sign In\n              </Button>\n              <Button className=\"bg-primary hover:bg-primary/90 dark:bg-blue-600 dark:hover:bg-blue-700 text-primary-foreground dark:text-white\" data-testid=\"button-subscribe\">\n                Subscribe\n              </Button>\n            </div>\n\n            {/* Mobile Menu */}\n            <div className=\"lg:hidden\">\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                    <Menu className=\"w-5 h-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"left\" className=\"w-80 p-0 bg-background dark:bg-slate-900\">\n                  <div className=\"p-6\">\n                    <div className=\"flex items-center gap-2 mb-6\">\n                      <Sparkles className=\"w-6 h-6 text-primary dark:text-blue-400\" />\n                      <span className=\"text-lg font-bold text-foreground dark:text-white\">\n                        Orion\n                      </span>\n                    </div>\n                    \n                    <div className=\"space-y-4\">\n                      <Link href=\"/dashboard\" className=\"flex items-center gap-2 p-3 rounded hover:bg-muted dark:hover:bg-slate-800\" onClick={() => handleNavigation('/dashboard')} data-testid=\"mobile-nav-dashboard\">\n                        <Home className=\"w-5 h-5\" />\n                        Dashboard\n                      </Link>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-semibold text-muted-foreground dark:text-slate-400\">Analytics</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Smart Reporting</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Performance Metrics</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Budget Analysis</div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-semibold text-muted-foreground dark:text-slate-400\">Reports</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Financial Reports</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Monthly Summary</div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-semibold text-muted-foreground dark:text-slate-400\">Planning</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Collaborative Planning</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Scenario Modeling</div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-semibold text-muted-foreground dark:text-slate-400\">Teams</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Team Management</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Department Overview</div>\n                      </div>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"text-sm font-semibold text-muted-foreground dark:text-slate-400\">Tools</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Settings</div>\n                        <div className=\"block p-2 rounded hover:bg-muted dark:hover:bg-slate-800 ml-4 cursor-pointer\" onClick={() => handleNavigation('/dashboard')}>Help Center</div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"mt-8 pt-6 border-t border-border dark:border-slate-700 space-y-2\">\n                      <Button variant=\"ghost\" className=\"w-full justify-start\" data-testid=\"mobile-button-sign-in\">\n                        Sign In\n                      </Button>\n                      <Button className=\"w-full bg-primary hover:bg-primary/90 dark:bg-blue-600 dark:hover:bg-blue-700\" data-testid=\"mobile-button-subscribe\">\n                        Subscribe\n                      </Button>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":23260},"client/src/components/UseCases.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nconst useCases = [\n  {\n    id: \"analyst\",\n    title: \"Finance Analyst\",\n    tagline: \"Finally, Focus on Analysis, Not Data Prep\",\n    beforeTitle: \"Priya's Day Before Orion:\",\n    before: [\n      \"3 hours exporting and consolidating data\",\n      \"2 hours creating variance reports\", \n      \"1 hour explaining variances\",\n      \"0 hours on strategic analysis\"\n    ],\n    afterTitle: \"Priya's Day With Orion:\",\n    after: [\n      \"0 minutes on data prep (automated)\",\n      \"15 minutes reviewing AI-generated variances\",\n      \"5+ hours on strategic analysis and improvements\"\n    ],\n    features: [\n      \"Automated report generation\",\n      \"Drill-down to transaction level\",\n      \"AI-powered variance explanations\", \n      \"Excel add-in for familiar workflows\"\n    ]\n  },\n  {\n    id: \"controller\",\n    title: \"Financial Controller\", \n    tagline: \"Control and Compliance, Automated\",\n    beforeTitle: \"David's Wins with Orion:\",\n    before: [\n      \"🛡️ Automated anomaly detection prevents errors\",\n      \"📋 Complete audit trails for every change\",\n      \"⚡ Month-end close reduced by 20%\",\n      \"🔒 SOX compliance built-in\"\n    ],\n    afterTitle: \"Features David Loves:\",\n    after: [\n      \"Real-time consolidation across entities\",\n      \"Automated journal entry validation\",\n      \"Role-based access controls\",\n      \"One-click regulatory reporting\"\n    ],\n    features: []\n  },\n  {\n    id: \"cfo\",\n    title: \"CFO\",\n    tagline: \"Strategic Insights at the Speed of Thought\", \n    beforeTitle: \"Sarah's Strategic Advantages:\",\n    before: [\n      \"Board decks generated automatically\",\n      \"Predictive forecasts with external data\",\n      \"Scenario planning in real-time\",\n      \"Natural language queries for instant insights\"\n    ],\n    afterTitle: \"Executive Features:\",\n    after: [\n      \"AI-generated executive summaries\",\n      \"Competitor and market intelligence\", \n      \"Long-range planning tools\",\n      \"Mobile-first dashboard design\"\n    ],\n    features: []\n  },\n  {\n    id: \"department-head\", \n    title: \"Department Head\",\n    tagline: \"Your Budget, Clearly Understood\",\n    beforeTitle: \"Mark's Experience:\",\n    before: [\n      \"Simple web portal for budget submission\",\n      \"Real-time spending visibility\",\n      \"Automatic alerts for budget variances\",\n      \"Clear approval workflows\"\n    ],\n    afterTitle: \"What Mark Appreciates:\",\n    after: [\n      \"No more spreadsheet email chains\",\n      \"Instant budget vs actual comparisons\",\n      \"Mobile access to spending data\",\n      \"Collaborative planning with finance team\"\n    ],\n    features: []\n  }\n];\n\nexport default function UseCases() {\n  const [activeTab, setActiveTab] = useState(\"analyst\");\n\n  return (\n    <section className=\"py-24 bg-gradient-to-b from-background to-muted/10\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16 space-y-4\">\n          <div className=\"inline-block px-4 py-2 bg-primary/10 rounded-full border border-primary/20 mb-2\">\n            <span className=\"text-primary font-semibold text-sm\">\n              👥 User Stories\n            </span>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\" data-testid=\"use-cases-title\">\n            Built for Every Finance Professional\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            See how Orion transforms daily workflows for finance teams at every level.\n          </p>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2 md:grid-cols-4 mb-12 bg-muted/30 p-2 rounded-xl\" data-testid=\"use-cases-tabs\">\n            {useCases.map((useCase, index) => (\n              <TabsTrigger \n                key={useCase.id} \n                value={useCase.id} \n                className=\"text-sm py-3 px-4 rounded-lg data-[state=active]:bg-primary data-[state=active]:text-primary-foreground transition-all duration-200 font-semibold\"\n                data-testid={`tab-${useCase.id}`}\n              >\n                <div className=\"text-center\">\n                  <div className=\"text-xs text-muted-foreground data-[state=active]:text-primary-foreground/80\">Role {index + 1}</div>\n                  <div>{useCase.title}</div>\n                </div>\n              </TabsTrigger>\n            ))}\n          </TabsList>\n\n          {useCases.map((useCase) => (\n            <TabsContent key={useCase.id} value={useCase.id} className=\"mt-0\">\n              <div className=\"max-w-4xl mx-auto\">\n                <div className=\"text-center mb-12 p-8 bg-gradient-to-r from-primary/5 to-chart-1/5 rounded-2xl border border-primary/10\">\n                  <h3 className=\"text-3xl font-bold text-foreground mb-2\" data-testid={`use-case-title-${useCase.id}`}>\n                    {useCase.title}\n                  </h3>\n                  <p className=\"text-xl text-primary font-semibold mb-4\" data-testid={`use-case-tagline-${useCase.id}`}>\n                    {useCase.tagline}\n                  </p>\n                  <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                    <span>Real user transformation story</span>\n                  </div>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-8 mb-8\">\n                  <Card className=\"p-6 border-2 border-red-200 relative overflow-hidden\">\n                    <div className=\"absolute top-4 right-4\">\n                      <div className=\"bg-red-100 text-red-800 px-2 py-1 rounded-full text-xs font-semibold\">\n                        🔴 Before Orion\n                      </div>\n                    </div>\n                    <CardContent className=\"p-0 mt-2\">\n                      <h4 className=\"font-bold text-foreground mb-4 flex items-center gap-2\" data-testid={`before-title-${useCase.id}`}>\n                        <span className=\"text-red-500\">❌</span>\n                        {useCase.beforeTitle}\n                      </h4>\n                      <ul className=\"space-y-3\">\n                        {useCase.before.map((item, index) => (\n                          <li key={index} className=\"text-muted-foreground flex items-start gap-3\" data-testid={`before-item-${useCase.id}-${index}`}>\n                            <span className=\"text-red-400 mt-1 text-xs\">●</span>\n                            <span className=\"flex-1\">{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n\n                  <Card className=\"p-6 bg-gradient-to-br from-green-50 to-blue-50 border-2 border-green-200 relative overflow-hidden\">\n                    <div className=\"absolute top-4 right-4\">\n                      <div className=\"bg-green-100 text-green-800 px-2 py-1 rounded-full text-xs font-semibold\">\n                        🟢 With Orion\n                      </div>\n                    </div>\n                    <CardContent className=\"p-0 mt-2\">\n                      <h4 className=\"font-bold text-foreground mb-4 flex items-center gap-2\" data-testid={`after-title-${useCase.id}`}>\n                        <span className=\"text-green-500\">✓</span>\n                        {useCase.afterTitle}\n                      </h4>\n                      <ul className=\"space-y-3\">\n                        {useCase.after.map((item, index) => (\n                          <li key={index} className=\"text-muted-foreground flex items-start gap-3\" data-testid={`after-item-${useCase.id}-${index}`}>\n                            <span className=\"text-green-500 mt-1 text-xs\">✓</span>\n                            <span className=\"flex-1\">{item}</span>\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {useCase.features.length > 0 && (\n                  <Card className=\"p-6 bg-gradient-to-r from-primary/5 to-chart-2/5 border border-primary/20\">\n                    <CardContent className=\"p-0\">\n                      <h4 className=\"font-bold text-foreground mb-4 flex items-center gap-2\">\n                        <span className=\"text-primary\">🚀</span>\n                        Key Features for {useCase.title}s:\n                      </h4>\n                      <div className=\"grid grid-cols-2 gap-3\">\n                        {useCase.features.map((feature, index) => (\n                          <div key={index} className=\"flex items-center gap-2 p-3 bg-background/80 rounded-lg border border-border/50\" data-testid={`feature-${useCase.id}-${index}`}>\n                            <div className=\"w-2 h-2 bg-primary rounded-full\"></div>\n                            <span className=\"text-sm font-medium text-foreground\">{feature}</span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                <div className=\"mt-8 text-center\">\n                  <div className=\"inline-flex items-center gap-2 px-6 py-3 bg-primary/10 rounded-full border border-primary/20\">\n                    <span className=\"text-primary font-semibold text-sm\">\n                      📈 Results: Up to 90% time savings\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n      </div>\n    </section>\n  );\n}","size_bytes":9878},"client/src/components/ValueProposition.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Rocket, Target, Lightbulb } from \"lucide-react\";\n\nconst pillars = [\n  {\n    icon: Rocket,\n    title: \"10x Faster Insights\",\n    metric: \"10x\",\n    metricLabel: \"Speed Increase\",\n    description: \"From days of Excel manipulation to instant AI-powered analysis. Ask questions in plain English, get answers with full drill-down capability.\",\n    features: [\"Natural language queries\", \"Instant data processing\", \"Smart drill-down\", \"Automated reporting\"],\n    color: \"text-chart-1\",\n    bgColor: \"bg-chart-1/10\",\n    borderColor: \"border-chart-1/20\"\n  },\n  {\n    icon: Target,\n    title: \"99.9% Accuracy\",\n    metric: \"99.9%\",\n    metricLabel: \"Data Accuracy\",\n    description: \"Automated anomaly detection catches errors before they impact reports. Single source of truth with complete audit trails.\",\n    features: [\"Anomaly detection\", \"Error prevention\", \"Audit trails\", \"Data validation\"],\n    color: \"text-chart-2\",\n    bgColor: \"bg-chart-2/10\",\n    borderColor: \"border-chart-2/20\"\n  },\n  {\n    icon: Lightbulb,\n    title: \"Predictive Intelligence\",\n    metric: \"95%\",\n    metricLabel: \"Forecast Accuracy\",\n    description: \"Move beyond historical reporting. AI-powered forecasts that learn from your patterns and external market data.\",\n    features: [\"Market intelligence\", \"Pattern recognition\", \"Trend analysis\", \"Risk modeling\"],\n    color: \"text-chart-3\",\n    bgColor: \"bg-chart-3/10\",\n    borderColor: \"border-chart-3/20\"\n  },\n];\n\nexport default function ValueProposition() {\n  return (\n    <section className=\"py-24 bg-gradient-to-br from-muted/30 via-background to-muted/30\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"text-center mb-16 space-y-4\">\n          <div className=\"inline-block px-4 py-2 bg-primary/10 rounded-full border border-primary/20 mb-2\">\n            <span className=\"text-primary font-semibold text-sm\">\n              🏆 Proven Results\n            </span>\n          </div>\n          <h2 className=\"text-4xl md:text-5xl font-bold text-foreground mb-4\" data-testid=\"value-prop-title\">\n            Why Finance Teams Choose Orion\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Join hundreds of finance teams who have transformed their operations with measurable results.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-3 gap-8\">\n          {pillars.map((pillar, index) => {\n            const Icon = pillar.icon;\n            return (\n              <div key={index} className={`text-center p-8 rounded-2xl border-2 ${pillar.borderColor} ${pillar.bgColor} hover:shadow-lg transition-all duration-300 group`} data-testid={`pillar-${index}`}>\n                <div className=\"mb-6 flex justify-center\">\n                  <div className=\"p-4 rounded-full bg-background/80 shadow-md group-hover:scale-110 transition-transform duration-300\">\n                    <Icon className={`w-12 h-12 ${pillar.color}`} />\n                  </div>\n                </div>\n                \n                <div className=\"mb-4\">\n                  <div className={`text-5xl font-black ${pillar.color} mb-2`} data-testid={`pillar-metric-${index}`}>\n                    {pillar.metric}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground font-semibold\">\n                    {pillar.metricLabel}\n                  </div>\n                </div>\n                \n                <h3 className=\"text-2xl font-bold text-foreground mb-4 group-hover:text-primary transition-colors\" data-testid={`pillar-title-${index}`}>\n                  {pillar.title}\n                </h3>\n                \n                <p className=\"text-muted-foreground text-base leading-relaxed mb-6\" data-testid={`pillar-description-${index}`}>\n                  {pillar.description}\n                </p>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"text-xs text-muted-foreground font-semibold mb-3\">Key Capabilities:</div>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {pillar.features.map((feature, featureIndex) => (\n                      <div key={featureIndex} className=\"text-xs px-2 py-1 bg-background/60 rounded-full text-muted-foreground border border-border/50\">\n                        ✓ {feature}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":4579},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import Navigation from \"@/components/Navigation\";\nimport Hero from \"@/components/Hero\";\nimport FeaturesOverview from \"@/components/FeaturesOverview\";\nimport ValueProposition from \"@/components/ValueProposition\";\nimport FeatureDeepDive from \"@/components/FeatureDeepDive\";\nimport UseCases from \"@/components/UseCases\";\nimport Footer from \"@/components/Footer\";\nimport SectionDivider from \"@/components/SectionDivider\";\n\nexport default function Home() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Navigation />\n      <main className=\"space-y-8\">\n        <Hero />\n        <SectionDivider variant=\"dots\" />\n        <FeaturesOverview />\n        <SectionDivider variant=\"gradient\" />\n        <ValueProposition />\n        <SectionDivider variant=\"dots\" />\n        <FeatureDeepDive />\n        <SectionDivider variant=\"gradient\" />\n        <UseCases />\n      </main>\n      <Footer />\n    </div>\n  );\n}","size_bytes":916},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/FeatureDeepDive.tsx":{"content":"import FeatureDeepDive from '../FeatureDeepDive';\n\nexport default function FeatureDeepDiveExample() {\n  return <FeatureDeepDive />;\n}","size_bytes":133},"client/src/components/examples/FeaturesOverview.tsx":{"content":"import FeaturesOverview from '../FeaturesOverview';\n\nexport default function FeaturesOverviewExample() {\n  return <FeaturesOverview />;\n}","size_bytes":137},"client/src/components/examples/Footer.tsx":{"content":"import Footer from '../Footer';\n\nexport default function FooterExample() {\n  return <Footer />;\n}","size_bytes":97},"client/src/components/examples/Hero.tsx":{"content":"import Hero from '../Hero';\n\nexport default function HeroExample() {\n  return <Hero />;\n}","size_bytes":89},"client/src/components/examples/Navigation.tsx":{"content":"import Navigation from '../Navigation';\n\nexport default function NavigationExample() {\n  return <Navigation />;\n}","size_bytes":113},"client/src/components/examples/UseCases.tsx":{"content":"import UseCases from '../UseCases';\n\nexport default function UseCasesExample() {\n  return <UseCases />;\n}","size_bytes":105},"client/src/components/examples/ValueProposition.tsx":{"content":"import ValueProposition from '../ValueProposition';\n\nexport default function ValuePropositionExample() {\n  return <ValueProposition />;\n}","size_bytes":137},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/Dashboard.tsx":{"content":"import { useState, useEffect, useMemo } from \"react\";\nimport Navigation from \"@/components/Navigation\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { \n  TrendingUp, \n  TrendingDown, \n  Building2, \n  BarChart3, \n  Globe, \n  Clock,\n  Activity,\n  DollarSign,\n  Users,\n  ArrowUpRight,\n  ArrowDownRight,\n  Menu,\n  Target,\n  PieChart,\n  FileText,\n  Calendar,\n  Zap,\n  Heart,\n  Shield,\n  Search,\n  Filter,\n  Grid,\n  List\n} from \"lucide-react\";\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  PieChart as RechartsPieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line,\n  Area,\n  AreaChart\n} from \"recharts\";\nimport heroBackground from \"@assets/generated_images/Gradient_mesh_hero_background_83768b02.png\";\n\n// Define types for better type safety\ntype Detail = {\n  label: string;\n  value: string;\n  trend: string;\n};\n\ntype Topic = {\n  title: string;\n  icon: React.ReactNode;\n  summary: string;\n  details: Detail[];\n};\n\nconst topics: Record<string, Topic> = {\n  performance: {\n    title: \"Performance Overview\",\n    icon: <TrendingUp className=\"w-5 h-5\" />,\n    summary: \"Company performance remains strong across all key metrics. Revenue growth of 15% YoY with improved operational efficiency.\",\n    details: [\n      { label: \"Revenue Growth\", value: \"+15% YoY\", trend: \"up\" },\n      { label: \"Profit Margin\", value: \"18.5%\", trend: \"up\" },\n      { label: \"Customer Satisfaction\", value: \"4.6/5\", trend: \"up\" },\n      { label: \"Employee Retention\", value: \"94%\", trend: \"stable\" }\n    ]\n  },\n  financial: {\n    title: \"Financial Health\",\n    icon: <DollarSign className=\"w-5 h-5\" />,\n    summary: \"Strong financial position with healthy cash flow and controlled spending across all departments. Budget variance within acceptable range.\",\n    details: [\n      { label: \"Cash Flow\", value: \"+$2.1M\", trend: \"up\" },\n      { label: \"Budget Variance\", value: \"-2.3%\", trend: \"good\" },\n      { label: \"Operating Costs\", value: \"$8.2M\", trend: \"stable\" },\n      { label: \"ROI\", value: \"22.4%\", trend: \"up\" }\n    ]\n  },\n  operations: {\n    title: \"Operational Excellence\",\n    icon: <Activity className=\"w-5 h-5\" />,\n    summary: \"Operational efficiency improved through automation and process optimization. Project delivery rate exceeds targets.\",\n    details: [\n      { label: \"Project Success Rate\", value: \"89%\", trend: \"up\" },\n      { label: \"Process Efficiency\", value: \"+12%\", trend: \"up\" },\n      { label: \"System Uptime\", value: \"99.8%\", trend: \"excellent\" },\n      { label: \"Response Time\", value: \"<2h\", trend: \"good\" }\n    ]\n  },\n  growth: {\n    title: \"Growth Trajectory\",\n    icon: <BarChart3 className=\"w-5 h-5\" />,\n    summary: \"Sustained growth momentum with new customer acquisition and market expansion initiatives showing positive results.\",\n    details: [\n      { label: \"New Customers\", value: \"+284\", trend: \"up\" },\n      { label: \"Market Share\", value: \"12.8%\", trend: \"up\" },\n      { label: \"Product Adoption\", value: \"+28%\", trend: \"up\" },\n      { label: \"Churn Rate\", value: \"5.8%\", trend: \"down\" }\n    ]\n  }\n};\n\ntype TopicFocusContentProps = {\n  selectedTopic: string;\n  setSelectedTopic: (topic: string) => void;\n};\n\nconst TopicFocusContent = ({ selectedTopic, setSelectedTopic }: TopicFocusContentProps) => {\n  const currentTopic = topics[selectedTopic];\n\n  return (\n    <div className=\"p-6\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-2xl font-bold bg-gradient-to-r from-primary to-blue-600 bg-clip-text text-transparent mb-2\" data-testid=\"topic-focus-title\">\n          Strategic Hub\n        </h1>\n        <p className=\"text-sm text-muted-foreground\">\n          Key insights and performance metrics\n        </p>\n      </div>\n      \n      {/* Strategic Categories */}\n      <div className=\"space-y-3 mb-6\">\n        <h2 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-3\">\n          Categories\n        </h2>\n        {Object.entries(topics).map(([key, topic]) => (\n          <Button\n            key={key}\n            variant={selectedTopic === key ? \"default\" : \"ghost\"}\n            className={`w-full justify-start h-12 transition-all duration-200 hover:scale-[1.02] ${\n              selectedTopic === key \n                ? 'bg-gradient-to-r from-primary to-primary/80 shadow-lg hover:shadow-primary/25' \n                : 'hover:bg-muted/80'\n            }`}\n            onClick={() => setSelectedTopic(key)}\n            data-testid={`topic-${key}`}\n          >\n            <div className={`p-1.5 rounded-md mr-3 ${\n              selectedTopic === key \n                ? 'bg-white/20' \n                : 'bg-muted'\n            }`}>\n              {topic.icon}\n            </div>\n            <div className=\"flex-1 text-left\">\n              <div className=\"font-semibold text-sm\">{topic.title}</div>\n              <div className=\"text-xs opacity-75 truncate\">\n                {key === 'performance' && 'Revenue & Growth'}\n                {key === 'financial' && 'Budget & Costs'}\n                {key === 'operations' && 'Efficiency Metrics'}\n                {key === 'growth' && 'Market Expansion'}\n              </div>\n            </div>\n          </Button>\n        ))}\n      </div>\n\n      <Separator className=\"my-6\" />\n\n      {/* Strategic Insights */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center gap-3 mb-4 p-3 bg-gradient-to-r from-muted/50 to-muted/30 rounded-lg border\">\n          <div className=\"p-2 bg-primary/10 rounded-lg\">\n            {currentTopic.icon}\n          </div>\n          <div>\n            <h2 className=\"text-lg font-semibold text-foreground\" data-testid=\"current-topic-title\">\n              {currentTopic.title}\n            </h2>\n            <div className=\"text-xs text-muted-foreground font-medium\">\n              Live Analytics\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"bg-gradient-to-br from-card/80 to-muted/30 rounded-lg p-4 mb-4 border border-border/50\">\n          <p className=\"text-sm text-foreground/80 leading-relaxed\" data-testid=\"topic-summary\">\n            {currentTopic.summary}\n          </p>\n        </div>\n\n        <div className=\"space-y-3\">\n          <h3 className=\"text-xs font-semibold text-muted-foreground uppercase tracking-wider mb-4 flex items-center gap-2\">\n            <BarChart3 className=\"w-3 h-3\" />\n            Key Performance Indicators\n          </h3>\n          {currentTopic.details.map((detail: Detail, index: number) => (\n            <div key={index} className=\"group p-3 rounded-lg bg-gradient-to-r from-card/60 to-card/40 border border-border/30 hover:border-primary/30 hover:shadow-lg transition-all duration-200\" data-testid={`indicator-${index}`}>\n              <div className=\"flex justify-between items-center\">\n                <div className=\"text-sm font-medium text-foreground flex items-center gap-2\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    detail.trend === 'up' ? 'bg-green-500' :\n                    detail.trend === 'down' ? 'bg-red-500' :\n                    'bg-blue-500'\n                  }`} />\n                  {detail.label}\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"text-sm font-bold\">{detail.value}</span>\n                  <div className={`p-1 rounded-md ${\n                    detail.trend === 'up' ? 'bg-green-100 dark:bg-green-900/30' :\n                    detail.trend === 'down' ? 'bg-red-100 dark:bg-red-900/30' :\n                    'bg-blue-100 dark:bg-blue-900/30'\n                  }`}>\n                    {detail.trend === \"up\" && <TrendingUp className=\"w-3 h-3 text-green-600\" />}\n                    {detail.trend === \"down\" && <TrendingDown className=\"w-3 h-3 text-red-600\" />}\n                    {detail.trend === \"stable\" && <Activity className=\"w-3 h-3 text-blue-600\" />}\n                    {(detail.trend === \"good\" || detail.trend === \"excellent\") && <Target className=\"w-3 h-3 text-green-600\" />}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <Separator className=\"my-6\" />\n\n      {/* Executive Summary */}\n      <div>\n        <h3 className=\"text-xs font-semibold text-muted-foreground mb-4 uppercase tracking-wider flex items-center gap-2\" data-testid=\"quick-metrics-title\">\n          <DollarSign className=\"w-3 h-3\" />\n          Executive Summary\n        </h3>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"relative group bg-gradient-to-br from-green-500/10 to-green-600/5 rounded-lg p-3 text-center border border-green-500/20 hover:border-green-500/40 transition-all duration-200 hover:shadow-lg hover:shadow-green-500/10\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-green-500/5 to-transparent rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200\" />\n            <div className=\"relative z-10\">\n              <div className=\"text-lg font-bold text-green-600\" data-testid=\"metric-revenue\">$2.8M</div>\n              <div className=\"text-xs text-muted-foreground font-medium\">Monthly Revenue</div>\n            </div>\n          </div>\n          <div className=\"relative group bg-gradient-to-br from-blue-500/10 to-blue-600/5 rounded-lg p-3 text-center border border-blue-500/20 hover:border-blue-500/40 transition-all duration-200 hover:shadow-lg hover:shadow-blue-500/10\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-blue-500/5 to-transparent rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200\" />\n            <div className=\"relative z-10\">\n              <div className=\"text-lg font-bold text-blue-600\" data-testid=\"metric-customers\">284</div>\n              <div className=\"text-xs text-muted-foreground font-medium\">New Customers</div>\n            </div>\n          </div>\n          <div className=\"relative group bg-gradient-to-br from-purple-500/10 to-purple-600/5 rounded-lg p-3 text-center border border-purple-500/20 hover:border-purple-500/40 transition-all duration-200 hover:shadow-lg hover:shadow-purple-500/10\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 to-transparent rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200\" />\n            <div className=\"relative z-10\">\n              <div className=\"text-lg font-bold text-purple-600\" data-testid=\"metric-success\">89%</div>\n              <div className=\"text-xs text-muted-foreground font-medium\">Success Rate</div>\n            </div>\n          </div>\n          <div className=\"relative group bg-gradient-to-br from-orange-500/10 to-orange-600/5 rounded-lg p-3 text-center border border-orange-500/20 hover:border-orange-500/40 transition-all duration-200 hover:shadow-lg hover:shadow-orange-500/10\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-orange-500/5 to-transparent rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200\" />\n            <div className=\"relative z-10\">\n              <div className=\"text-lg font-bold text-orange-600\" data-testid=\"metric-satisfaction\">4.6/5</div>\n              <div className=\"text-xs text-muted-foreground font-medium\">Satisfaction</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function Dashboard() {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [selectedTopic, setSelectedTopic] = useState(\"performance\");\n  const [isLoading, setIsLoading] = useState(true);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState(\"all\");\n  const [viewMode, setViewMode] = useState(\"grid\");\n  \n  useEffect(() => {\n    const timer = setTimeout(() => setIsLoading(false), 1000);\n    return () => clearTimeout(timer);\n  }, []);\n  \n  // Mock internal business data for company overview\n  const departmentData = [\n    { \n      id: \"1\", \n      name: \"Sales\", \n      budget: \"$2.5M\", \n      spent: \"$2.1M\", \n      status: \"On Track\",\n      performance: \"+15%\",\n      summary: \"Sales team exceeding Q4 targets with strong enterprise deals pipeline. Budget on track with 84% utilization.\",\n      trend: \"up\"\n    },\n    { \n      id: \"2\", \n      name: \"Marketing\", \n      budget: \"$1.8M\", \n      spent: \"$2.0M\", \n      status: \"Over Budget\",\n      performance: \"+8%\",\n      summary: \"Marketing spend increased for holiday campaign launch. ROI positive at 3.2x, justifying budget overrun.\",\n      trend: \"up\"\n    },\n    { \n      id: \"3\", \n      name: \"Engineering\", \n      budget: \"$4.2M\", \n      spent: \"$3.8M\", \n      status: \"Under Budget\",\n      performance: \"+22%\",\n      summary: \"Engineering delivery accelerated due to process improvements. Budget savings from remote hiring strategy.\",\n      trend: \"up\"\n    },\n    { \n      id: \"4\", \n      name: \"Operations\", \n      budget: \"$1.1M\", \n      spent: \"$1.0M\", \n      status: \"On Track\",\n      performance: \"+5%\",\n      summary: \"Operations running efficiently with recent automation. Cost savings reinvested in infrastructure upgrades.\",\n      trend: \"stable\"\n    },\n    { \n      id: \"5\", \n      name: \"Customer Success\", \n      budget: \"$850K\", \n      spent: \"$825K\", \n      status: \"On Track\",\n      performance: \"+12%\",\n      summary: \"Customer satisfaction scores improved to 4.8/5. Reduced churn by 18% through proactive engagement.\",\n      trend: \"up\"\n    },\n    { \n      id: \"6\", \n      name: \"HR\", \n      budget: \"$650K\", \n      spent: \"$580K\", \n      status: \"Under Budget\",\n      performance: \"+3%\",\n      summary: \"Hiring goals met efficiently. Savings from reduced recruitment agency fees and improved retention.\",\n      trend: \"stable\"\n    }\n  ];\n\n  const companyUpdates = [\n    { \n      id: \"1\", \n      category: \"Sales\", \n      importance: \"high\", \n      type: \"Monthly Report\",\n      title: \"Q4 Sales Performance Exceeds Forecast\",\n      summary: \"Sales team closed $2.8M in November, 15% above target. Major enterprise deals with TechCorp and FinanceInc finalized. December pipeline looking strong with $3.2M potential.\",\n      impact: \"Revenue\",\n      date: \"2 hours ago\"\n    },\n    { \n      id: \"2\", \n      category: \"Product\", \n      importance: \"medium\", \n      type: \"Feature Release\",\n      title: \"Mobile App Update Drives User Engagement\",\n      summary: \"New mobile features launched last week showing 28% increase in daily active users. Customer feedback overwhelmingly positive with 4.7/5 app store rating.\",\n      impact: \"Growth\",\n      date: \"5 hours ago\"\n    },\n    { \n      id: \"3\", \n      category: \"Operations\", \n      importance: \"high\", \n      type: \"System Update\",\n      title: \"Infrastructure Upgrade Improves Performance\",\n      summary: \"Server migration completed successfully. System uptime improved to 99.8% and page load times reduced by 40%. Customer complaints down 60%.\",\n      impact: \"Efficiency\",\n      date: \"1 day ago\"\n    },\n    { \n      id: \"4\", \n      category: \"HR\", \n      importance: \"medium\", \n      type: \"Team Announcement\",\n      title: \"New Engineering Manager Joins Team\",\n      summary: \"Sarah Chen joins as Senior Engineering Manager from Google. Will lead our AI initiatives and scale engineering practices. Team excited about new technical direction.\",\n      impact: \"Growth\",\n      date: \"2 days ago\"\n    },\n    { \n      id: \"5\", \n      category: \"Finance\", \n      importance: \"low\", \n      type: \"Budget Review\",\n      title: \"Q4 Budget Review Shows Positive Variance\",\n      summary: \"Overall company spending at 92% of budget with strong revenue performance. Recommend reinvesting savings into Q1 marketing campaign and engineering tools.\",\n      impact: \"Strategy\",\n      date: \"3 days ago\"\n    }\n  ];\n\n  const activeProjects = [\n    { \n      id: \"1\", \n      name: \"Q4 Product Launch\", \n      status: \"In Progress\", \n      team: \"Product Team\",\n      progress: \"75%\",\n      timeline: \"2 weeks remaining\",\n      budget: \"$450K\",\n      summary: \"Major product release on schedule. Beta testing with 200 customers showing excellent feedback. Launch event planned for Dec 15th with marketing campaign ready.\",\n      risk: \"Low\"\n    },\n    { \n      id: \"2\", \n      name: \"Customer Portal Redesign\", \n      status: \"Planning\", \n      team: \"Engineering\",\n      progress: \"25%\",\n      timeline: \"6 weeks\",\n      budget: \"$280K\",\n      summary: \"UI/UX research complete. New design will reduce customer support tickets by estimated 30%. Development starts next week with 3 engineers assigned.\",\n      risk: \"Medium\"\n    },\n    { \n      id: \"3\", \n      name: \"Sales Process Optimization\", \n      status: \"Complete\", \n      team: \"Sales Ops\",\n      progress: \"100%\",\n      timeline: \"Completed\",\n      budget: \"$120K\",\n      summary: \"CRM automation implemented successfully. Sales cycle reduced from 45 to 32 days average. Team productivity increased 18% with better lead qualification.\",\n      risk: \"None\"\n    }\n  ];\n  \n  // Filter data based on search and filter selections\n  const filteredDepartments = useMemo(() => {\n    if (selectedFilter === 'projects' || selectedFilter === 'updates') return [];\n    \n    return departmentData.filter(dept => {\n      const matchesSearch = searchTerm === '' || \n        dept.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        dept.summary.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesFilter = selectedFilter === 'all' || selectedFilter === 'departments' ||\n        (selectedFilter === 'high-priority' && (dept.status === 'Over Budget' || dept.performance.includes('-')));\n        \n      return matchesSearch && matchesFilter;\n    });\n  }, [searchTerm, selectedFilter]);\n  \n  const filteredUpdates = useMemo(() => {\n    if (selectedFilter === 'departments' || selectedFilter === 'projects') return [];\n    \n    return companyUpdates.filter(update => {\n      const matchesSearch = searchTerm === '' || \n        update.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        update.summary.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        update.category.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesFilter = selectedFilter === 'all' || selectedFilter === 'updates' ||\n        (selectedFilter === 'high-priority' && update.importance === 'high');\n        \n      return matchesSearch && matchesFilter;\n    });\n  }, [searchTerm, selectedFilter]);\n  \n  const filteredProjects = useMemo(() => {\n    if (selectedFilter === 'departments' || selectedFilter === 'updates') return [];\n    \n    return activeProjects.filter(project => {\n      const matchesSearch = searchTerm === '' || \n        project.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        project.team.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        project.summary.toLowerCase().includes(searchTerm.toLowerCase());\n      \n      const matchesFilter = selectedFilter === 'all' || selectedFilter === 'projects' ||\n        (selectedFilter === 'high-priority' && project.risk === 'High');\n        \n      return matchesSearch && matchesFilter;\n    });\n  }, [searchTerm, selectedFilter]);\n\n\n  const formatCurrency = (value: string) => {\n    const num = parseFloat(value);\n    if (num >= 1e12) return `$${(num / 1e12).toFixed(1)}T`;\n    if (num >= 1e9) return `$${(num / 1e9).toFixed(1)}B`;\n    if (num >= 1e6) return `$${(num / 1e6).toFixed(1)}M`;\n    return `$${num.toLocaleString()}`;\n  };\n\n  const formatChange = (change: string, changePercent: string) => {\n    const changeNum = parseFloat(change);\n    const isPositive = changeNum >= 0;\n    return (\n      <span className={`flex items-center gap-1 ${isPositive ? 'text-green-600' : 'text-red-600'}`}>\n        {isPositive ? <ArrowUpRight className=\"w-4 h-4\" /> : <ArrowDownRight className=\"w-4 h-4\" />}\n        {Math.abs(changeNum).toFixed(2)} ({Math.abs(parseFloat(changePercent)).toFixed(2)}%)\n      </span>\n    );\n  };\n\n\n  return (\n    <div className=\"min-h-screen bg-background relative overflow-hidden\">\n      {/* Navigation Bar like landing page */}\n      <Navigation />\n      \n      {/* Beautiful Background like landing page */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${heroBackground})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-background/60 to-background/80\" />\n      \n      <div className=\"relative z-10 flex pt-20\">\n        {/* Desktop Sidebar */}\n        <div className=\"hidden lg:block w-80 bg-card backdrop-blur-sm border-r border-border/20 flex-shrink-0 fixed left-0 top-20 bottom-0 z-40\">\n          <ScrollArea className=\"h-full\">\n            <TopicFocusContent selectedTopic={selectedTopic} setSelectedTopic={setSelectedTopic} />\n          </ScrollArea>\n        </div>\n\n        {/* Mobile Header */}\n        <div className=\"lg:hidden fixed top-0 left-0 right-0 z-50 bg-card/95 backdrop-blur-md border-b border-border/20\">\n          <div className=\"flex items-center justify-between p-4\">\n            <h1 className=\"text-lg font-bold text-foreground\" data-testid=\"mobile-dashboard-title\">\n              Company Dashboard\n            </h1>\n            <Sheet open={sidebarOpen} onOpenChange={setSidebarOpen}>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"mobile-menu-trigger\">\n                  <Menu className=\"w-5 h-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"left\" className=\"w-80 p-0 bg-card/95 backdrop-blur-sm\">\n                <ScrollArea className=\"h-full\">\n                  <TopicFocusContent selectedTopic={selectedTopic} setSelectedTopic={setSelectedTopic} />\n                </ScrollArea>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n\n        {/* Main Content Area */}\n        <div className={`flex-1 p-6 pt-20 lg:pt-6 lg:ml-80 transition-opacity duration-1000 ${isLoading ? 'opacity-0' : 'opacity-100'}`}>\n          <div className=\"max-w-6xl mx-auto space-y-6\">\n            {/* Loading Overlay */}\n            {isLoading && (\n              <div className=\"fixed inset-0 bg-background/50 backdrop-blur-sm flex items-center justify-center z-50\">\n                <div className=\"bg-card p-8 rounded-lg shadow-xl\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                    <div className=\"text-lg font-semibold\">Loading Dashboard...</div>\n                  </div>\n                </div>\n              </div>\n            )}\n            {/* Search and Filter Controls */}\n            <Card className=\"bg-card/95 backdrop-blur-sm shadow-lg transition-all duration-300 border-0 mb-6\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between\">\n                  <div className=\"flex flex-col sm:flex-row gap-3 w-full sm:w-auto\">\n                    <div className=\"relative w-full sm:w-64\">\n                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\n                      <Input\n                        placeholder=\"Search projects, departments...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"pl-10 w-full\"\n                        data-testid=\"search-input\"\n                      />\n                    </div>\n                    <Select value={selectedFilter} onValueChange={setSelectedFilter}>\n                      <SelectTrigger className=\"w-full sm:w-48\" data-testid=\"filter-select\">\n                        <Filter className=\"w-4 h-4 mr-2\" />\n                        <SelectValue placeholder=\"Filter by...\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">All Items</SelectItem>\n                        <SelectItem value=\"departments\">Departments Only</SelectItem>\n                        <SelectItem value=\"projects\">Projects Only</SelectItem>\n                        <SelectItem value=\"updates\">Updates Only</SelectItem>\n                        <SelectItem value=\"high-priority\">High Priority</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      variant={viewMode === 'grid' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('grid')}\n                      data-testid=\"grid-view-btn\"\n                    >\n                      <Grid className=\"w-4 h-4\" />\n                    </Button>\n                    <Button\n                      variant={viewMode === 'list' ? 'default' : 'outline'}\n                      size=\"sm\"\n                      onClick={() => setViewMode('list')}\n                      data-testid=\"list-view-btn\"\n                    >\n                      <List className=\"w-4 h-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Key Performance Metrics */}\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 md:gap-4 mb-6\">\n              <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 border-blue-200 dark:border-blue-800 hover:shadow-lg transition-all duration-300 cursor-pointer hover:scale-105\">\n                <CardContent className=\"p-3 md:p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs md:text-sm font-medium text-blue-700 dark:text-blue-300\">Total Revenue</p>\n                      <p className=\"text-xl md:text-2xl font-bold text-blue-900 dark:text-blue-100\">$2.8M</p>\n                      <p className=\"text-xs text-blue-600 dark:text-blue-400 flex items-center mt-1\">\n                        <TrendingUp className=\"w-3 h-3 mr-1\" />\n                        <span className=\"hidden sm:inline\">+15% from last month</span>\n                        <span className=\"sm:hidden\">+15%</span>\n                      </p>\n                    </div>\n                    <div className=\"h-10 w-10 md:h-12 md:w-12 bg-blue-200 dark:bg-blue-800 rounded-full flex items-center justify-center\">\n                      <DollarSign className=\"h-5 w-5 md:h-6 md:w-6 text-blue-700 dark:text-blue-300\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 border-green-200 dark:border-green-800 hover:shadow-lg transition-all duration-300 cursor-pointer hover:scale-105\">\n                <CardContent className=\"p-3 md:p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs md:text-sm font-medium text-green-700 dark:text-green-300\">Active Projects</p>\n                      <p className=\"text-xl md:text-2xl font-bold text-green-900 dark:text-green-100\">24</p>\n                      <p className=\"text-xs text-green-600 dark:text-green-400 flex items-center mt-1\">\n                        <Target className=\"w-3 h-3 mr-1\" />\n                        <span className=\"hidden sm:inline\">89% success rate</span>\n                        <span className=\"sm:hidden\">89%</span>\n                      </p>\n                    </div>\n                    <div className=\"h-10 w-10 md:h-12 md:w-12 bg-green-200 dark:bg-green-800 rounded-full flex items-center justify-center\">\n                      <BarChart3 className=\"h-5 w-5 md:h-6 md:w-6 text-green-700 dark:text-green-300\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 border-purple-200 dark:border-purple-800 hover:shadow-lg transition-all duration-300 cursor-pointer hover:scale-105\">\n                <CardContent className=\"p-3 md:p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs md:text-sm font-medium text-purple-700 dark:text-purple-300\">Team Members</p>\n                      <p className=\"text-xl md:text-2xl font-bold text-purple-900 dark:text-purple-100\">156</p>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400 flex items-center mt-1\">\n                        <Users className=\"w-3 h-3 mr-1\" />\n                        <span className=\"hidden sm:inline\">94% satisfaction</span>\n                        <span className=\"sm:hidden\">94%</span>\n                      </p>\n                    </div>\n                    <div className=\"h-10 w-10 md:h-12 md:w-12 bg-purple-200 dark:bg-purple-800 rounded-full flex items-center justify-center\">\n                      <Users className=\"h-5 w-5 md:h-6 md:w-6 text-purple-700 dark:text-purple-300\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/50 dark:to-orange-900/50 border-orange-200 dark:border-orange-800 hover:shadow-lg transition-all duration-300 cursor-pointer hover:scale-105\">\n                <CardContent className=\"p-3 md:p-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-xs md:text-sm font-medium text-orange-700 dark:text-orange-300\">System Health</p>\n                      <p className=\"text-xl md:text-2xl font-bold text-orange-900 dark:text-orange-100\">99.8%</p>\n                      <p className=\"text-xs text-orange-600 dark:text-orange-400 flex items-center mt-1\">\n                        <Shield className=\"w-3 h-3 mr-1\" />\n                        <span className=\"hidden sm:inline\">All systems online</span>\n                        <span className=\"sm:hidden\">Online</span>\n                      </p>\n                    </div>\n                    <div className=\"h-10 w-10 md:h-12 md:w-12 bg-orange-200 dark:bg-orange-800 rounded-full flex items-center justify-center\">\n                      <Activity className=\"h-5 w-5 md:h-6 md:w-6 text-orange-700 dark:text-orange-300\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Revenue Chart */}\n            <Card className=\"bg-card/95 backdrop-blur-sm hover:bg-card shadow-lg hover:shadow-xl transition-all duration-300 border-0 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"w-5 h-5\" />\n                  Revenue Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <AreaChart\n                      data={[\n                        { month: 'Jan', revenue: 2200000, target: 2000000 },\n                        { month: 'Feb', revenue: 2350000, target: 2100000 },\n                        { month: 'Mar', revenue: 2100000, target: 2200000 },\n                        { month: 'Apr', revenue: 2600000, target: 2300000 },\n                        { month: 'May', revenue: 2750000, target: 2400000 },\n                        { month: 'Jun', revenue: 2800000, target: 2500000 }\n                      ]}\n                      margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n                    >\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                      <XAxis dataKey=\"month\" className=\"text-xs\" />\n                      <YAxis tickFormatter={(value) => `$${(value/1000000).toFixed(1)}M`} className=\"text-xs\" />\n                      <Tooltip formatter={(value: any) => [`$${(value/1000000).toFixed(2)}M`, 'Amount']} />\n                      <Area type=\"monotone\" dataKey=\"revenue\" stroke=\"hsl(var(--primary))\" fill=\"hsl(var(--primary))\" fillOpacity={0.3} />\n                      <Area type=\"monotone\" dataKey=\"target\" stroke=\"hsl(var(--muted-foreground))\" fill=\"transparent\" strokeDasharray=\"5 5\" />\n                    </AreaChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n            \n            {/* Department Overview */}\n            <Card className=\"bg-card/95 backdrop-blur-sm hover:bg-card shadow-lg hover:shadow-xl transition-all duration-300 border-0\" data-testid=\"department-overview-card\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Building2 className=\"w-5 h-5\" />\n                  Department Overview\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className={viewMode === 'grid' ? 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4' : 'space-y-4'}>\n                  {filteredDepartments.length === 0 ? (\n                    <div className=\"col-span-full text-center py-8 text-muted-foreground\">\n                      <Building2 className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                      <p>No departments found matching your criteria</p>\n                    </div>\n                  ) : (\n                    filteredDepartments.map((dept, index) => (\n                    <div \n                      key={dept.id} \n                      className=\"p-4 border rounded-lg hover:bg-muted/50 hover:shadow-lg hover:scale-[1.02] transition-all duration-300 ease-in-out bg-card/50 backdrop-blur-sm group cursor-pointer transform\" \n                      data-testid={`dept-${dept.name.toLowerCase()}`}\n                      style={{ animationDelay: `${index * 100}ms` }}\n                    >\n                      <div className=\"flex justify-between items-start mb-3\">\n                        <div className=\"group-hover:translate-x-1 transition-transform duration-300\">\n                          <div className=\"font-semibold text-foreground group-hover:text-primary transition-colors duration-300\">{dept.name}</div>\n                          <div className=\"text-sm text-muted-foreground\">{dept.spent} / {dept.budget}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            variant={dept.status === \"On Track\" ? \"default\" : dept.status === \"Over Budget\" ? \"destructive\" : \"secondary\"} \n                            className=\"text-xs mb-1\"\n                          >\n                            {dept.status}\n                          </Badge>\n                          <div className={`text-sm font-semibold ${dept.performance.startsWith('+') ? 'text-green-600' : 'text-red-600'}`}>\n                            {dept.performance}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground leading-relaxed\">\n                        {dept.summary}\n                      </div>\n                      <div className=\"mt-2 flex items-center gap-1\">\n                        {dept.trend === 'up' ? (\n                          <TrendingUp className=\"w-3 h-3 text-green-600\" />\n                        ) : dept.trend === 'down' ? (\n                          <TrendingDown className=\"w-3 h-3 text-red-600\" />\n                        ) : (\n                          <Activity className=\"w-3 h-3 text-blue-600\" />\n                        )}\n                        <span className=\"text-xs text-muted-foreground\">\n                          {dept.trend === 'up' ? 'Trending Up' : dept.trend === 'down' ? 'Trending Down' : 'Stable'}\n                        </span>\n                      </div>\n                    </div>\n                    ))\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Department Budget Distribution Chart */}\n            <Card className=\"bg-card/95 backdrop-blur-sm hover:bg-card shadow-lg hover:shadow-xl transition-all duration-300 border-0 mb-6\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <PieChart className=\"w-5 h-5\" />\n                  Budget Distribution by Department\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-64\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <RechartsPieChart>\n                      <Pie\n                        data={[\n                          { name: 'Engineering', value: 2800000, color: '#3b82f6' },\n                          { name: 'Marketing', value: 1200000, color: '#10b981' },\n                          { name: 'Sales', value: 1800000, color: '#8b5cf6' },\n                          { name: 'Operations', value: 950000, color: '#f59e0b' },\n                          { name: 'HR', value: 650000, color: '#ef4444' }\n                        ]}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        dataKey=\"value\"\n                      >\n                        {[\n                          { name: 'Engineering', value: 2800000, color: '#3b82f6' },\n                          { name: 'Marketing', value: 1200000, color: '#10b981' },\n                          { name: 'Sales', value: 1800000, color: '#8b5cf6' },\n                          { name: 'Operations', value: 950000, color: '#f59e0b' },\n                          { name: 'HR', value: 650000, color: '#ef4444' }\n                        ].map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={entry.color} />\n                        ))}\n                      </Pie>\n                      <Tooltip formatter={(value: any) => [`$${(value/1000000).toFixed(2)}M`, 'Budget']} />\n                    </RechartsPieChart>\n                  </ResponsiveContainer>\n                </div>\n                <div className=\"flex flex-wrap gap-2 mt-4\">\n                  {[\n                    { name: 'Engineering', color: '#3b82f6' },\n                    { name: 'Marketing', color: '#10b981' },\n                    { name: 'Sales', color: '#8b5cf6' },\n                    { name: 'Operations', color: '#f59e0b' },\n                    { name: 'HR', color: '#ef4444' }\n                  ].map((item) => (\n                    <div key={item.name} className=\"flex items-center gap-2\">\n                      <div \n                        className=\"w-3 h-3 rounded-full\" \n                        style={{ backgroundColor: item.color }}\n                      />\n                      <span className=\"text-sm text-muted-foreground\">{item.name}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Company Updates */}\n              <Card className=\"bg-card/95 backdrop-blur-sm hover:bg-card shadow-lg hover:shadow-xl transition-all duration-300 border-0\" data-testid=\"company-updates-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Clock className=\"w-5 h-5\" />\n                    Latest Company Updates\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-80\">\n                    <div className=\"space-y-4\">\n                      {filteredUpdates.length === 0 ? (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <Clock className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                          <p>No updates found matching your criteria</p>\n                        </div>\n                      ) : (\n                        filteredUpdates.map((update) => (\n                        <div key={update.id} className=\"pb-4 border-b last:border-b-0 hover:bg-muted/30 rounded-lg p-2 -m-2 transition-all duration-200 cursor-pointer\" data-testid={`update-${update.id}`}>\n                          <div className=\"flex items-start gap-3\">\n                            <div className=\"flex-1\">\n                              <div className=\"flex items-center gap-2 mb-2\">\n                                <Badge \n                                  variant={update.importance === 'high' ? 'destructive' : update.importance === 'medium' ? 'default' : 'secondary'}\n                                  className=\"text-xs\"\n                                >\n                                  {update.importance}\n                                </Badge>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {update.category}\n                                </Badge>\n                                <Badge variant=\"secondary\" className=\"text-xs\">\n                                  {update.impact}\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">{update.date}</span>\n                              </div>\n                              <h4 className=\"font-semibold text-sm mb-2\">{update.title}</h4>\n                              <p className=\"text-xs text-muted-foreground leading-relaxed\">\n                                {update.summary}\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                        ))\n                      )}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n\n              {/* Active Projects */}\n              <Card className=\"bg-card/95 backdrop-blur-sm hover:bg-card shadow-lg hover:shadow-xl transition-all duration-300 border-0\" data-testid=\"active-projects-card\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Target className=\"w-5 h-5\" />\n                    Active Projects\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ScrollArea className=\"h-80\">\n                    <div className=\"space-y-4\">\n                      {filteredProjects.length === 0 ? (\n                        <div className=\"text-center py-8 text-muted-foreground\">\n                          <Target className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                          <p>No projects found matching your criteria</p>\n                        </div>\n                      ) : (\n                        filteredProjects.map((project) => (\n                        <div key={project.id} className=\"p-4 border rounded-lg bg-card/50 backdrop-blur-sm hover:bg-card/80 hover:shadow-md hover:scale-[1.01] transition-all duration-200 cursor-pointer\" data-testid={`project-${project.id}`}>\n                          <div className=\"flex justify-between items-start mb-3\">\n                            <div>\n                              <h4 className=\"font-semibold\">{project.name}</h4>\n                              <p className=\"text-sm text-muted-foreground\">{project.team}</p>\n                            </div>\n                            <div className=\"text-right\">\n                              <Badge \n                                variant={project.status === \"Complete\" ? \"default\" : project.status === \"In Progress\" ? \"secondary\" : \"outline\"} \n                                className=\"text-xs mb-1\"\n                              >\n                                {project.status}\n                              </Badge>\n                              <div className=\"text-xs text-muted-foreground\">Risk: {project.risk}</div>\n                            </div>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm mb-3\">\n                            <div>\n                              <div className=\"text-muted-foreground\">Progress</div>\n                              <div className=\"font-semibold\">{project.progress}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-muted-foreground\">Timeline</div>\n                              <div className=\"font-semibold\">{project.timeline}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-muted-foreground\">Budget</div>\n                              <div className=\"font-semibold\">{project.budget}</div>\n                            </div>\n                            <div>\n                              <div className=\"text-muted-foreground\">Status</div>\n                              <div className=\"font-semibold\">{project.status}</div>\n                            </div>\n                          </div>\n                          <div className=\"text-xs text-muted-foreground leading-relaxed\">\n                            {project.summary}\n                          </div>\n                        </div>\n                        ))\n                      )}\n                    </div>\n                  </ScrollArea>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":46461},"replit.md":{"content":"# Orion AI Finance Platform\n\n## Overview\n\nOrion is an AI-powered Financial Planning & Analysis (FP&A) platform designed as a comprehensive finance team companion. The application provides intelligent financial reporting, scenario modeling, cost intelligence, collaborative planning, and an AI assistant for natural language queries. Built as a modern web application, it features a sophisticated landing page showcasing the platform's capabilities and a dashboard for financial data visualization and analysis.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript for type safety and modern development\n- **Build Tool**: Vite for fast development and optimized production builds\n- **Styling**: Tailwind CSS with a custom design system inspired by shadcn/ui components\n- **Component Library**: Comprehensive UI component library built on Radix UI primitives\n- **State Management**: TanStack Query for server state management and data fetching\n- **Routing**: Wouter for lightweight client-side routing\n- **Design System**: Custom theme with CSS variables supporting light/dark modes, featuring a navy/blue/purple color palette\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for full-stack type safety\n- **API Design**: RESTful APIs with structured error handling and logging middleware\n- **Data Access**: Organized storage interface pattern with both in-memory and database implementations\n- **Development**: Hot module replacement and development middleware integration\n\n### Database & ORM\n- **Database**: PostgreSQL configured for production use\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Schema Management**: Centralized schema definitions with validation using Zod\n- **Migrations**: Drizzle Kit for database schema migrations\n- **Connection**: Neon Database serverless PostgreSQL integration\n\n### Component Architecture\n- **Landing Page**: Modular component structure with Hero, Features, Value Proposition, Deep Dive, and Use Cases sections\n- **Dashboard**: Comprehensive financial data visualization with charts, metrics, and interactive elements\n- **Design Patterns**: Container/Presenter pattern with reusable UI components\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n### Development Tooling\n- **Type Checking**: Strict TypeScript configuration with path mapping\n- **Linting & Formatting**: Integrated code quality tools\n- **Asset Management**: Vite-based asset bundling with alias support\n- **Environment Management**: Separate development and production configurations\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@tanstack/react-query**: Server state management and caching\n- **wouter**: Lightweight React routing\n- **react-hook-form** with **@hookform/resolvers**: Form handling and validation\n\n### UI Component Libraries\n- **@radix-ui/react-***: Accessible, unstyled UI primitives for complex components (accordion, dialog, dropdown, navigation, etc.)\n- **lucide-react**: Modern icon library\n- **recharts**: Data visualization and charting library\n- **embla-carousel-react**: Carousel/slider functionality\n\n### Database & API Integration\n- **@neondatabase/serverless**: Serverless PostgreSQL database connection\n- **drizzle-orm**: Type-safe ORM for database operations\n- **drizzle-zod**: Schema validation integration\n- **connect-pg-simple**: PostgreSQL session store\n\n### Styling & Design\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **clsx** and **tailwind-merge**: Conditional class name utilities\n- **autoprefixer**: CSS vendor prefixing\n\n### Development & Build Tools\n- **vite**: Fast build tool and development server\n- **@vitejs/plugin-react**: React integration for Vite\n- **tsx**: TypeScript execution for development\n- **esbuild**: Fast JavaScript bundler for production\n\n### Utility Libraries\n- **date-fns**: Date manipulation and formatting\n- **nanoid**: Unique ID generation\n- **zod**: Schema validation and type inference","size_bytes":4145},"client/src/pages/FinancialReports.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  FileText, \n  Filter, \n  Save, \n  Edit2, \n  Check, \n  X,\n  Calculator,\n  TrendingUp,\n  BarChart3,\n  AlertCircle,\n  DollarSign,\n  PieChart,\n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  Download,\n  FileDown,\n  Printer,\n  ChevronDown,\n  ChevronRight,\n  Plus,\n  Minus\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/Navigation\";\nimport heroBackground from \"@assets/generated_images/Gradient_mesh_hero_background_83768b02.png\";\nimport type { \n  ProfitLossStatement,\n  BalanceSheet,\n  CashFlowStatement \n} from \"@shared/schema\";\n\nexport default function FinancialReports() {\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"all\");\n  const [startPeriod, setStartPeriod] = useState<string>(\"none\");\n  const [endPeriod, setEndPeriod] = useState<string>(\"none\");\n  const [activeTab, setActiveTab] = useState<string>(\"pl\");\n  const [editingCells, setEditingCells] = useState<Record<string, any>>({});\n  const queryClient = useQueryClient();\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>({});\n  const { toast } = useToast();\n\n  // Fetch financial reports data\n  const { data: plStatements = [], isLoading: plLoading } = useQuery({\n    queryKey: ['/api/profit-loss', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/profit-loss?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch P&L statements');\n      return response.json() as Promise<ProfitLossStatement[]>;\n    }\n  });\n\n  const { data: balanceSheets = [], isLoading: bsLoading } = useQuery({\n    queryKey: ['/api/balance-sheet', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/balance-sheet?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch balance sheets');\n      return response.json() as Promise<BalanceSheet[]>;\n    }\n  });\n\n  const { data: cashFlowStatements = [], isLoading: cfLoading } = useQuery({\n    queryKey: ['/api/cash-flow', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/cash-flow?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch cash flow statements');\n      return response.json() as Promise<CashFlowStatement[]>;\n    }\n  });\n\n  // Get unique topics and periods for filtering\n  const uniqueTopics = useMemo(() => {\n    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];\n    return Array.from(new Set(allData.map(item => item.topic)));\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  const uniquePeriods = useMemo(() => {\n    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];\n    const periods = Array.from(new Set(allData.map(item => item.period)));\n    // Sort periods properly for YYYY-MM format, then reverse for newest first\n    return periods.sort((a, b) => {\n      // Handle 'none' values\n      if (a === 'none') return 1;\n      if (b === 'none') return -1;\n      // Standard string comparison works for YYYY-MM format\n      return a.localeCompare(b);\n    }).reverse();\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  // Helper function for safe number parsing\n  const safeParseFloat = (value: string | undefined): number => {\n    if (!value) return 0;\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? 0 : parsed;\n  };\n\n  // Helper function for percentage change calculation\n  const calculatePercentageChange = (current: number, previous: number): number => {\n    if (previous === 0) return 0;\n    return ((current - previous) / Math.abs(previous)) * 100;\n  };\n\n  // Helper functions for collapsible sections\n  const toggleSection = (sectionKey: string) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey]\n    }));\n  };\n\n  const isCollapsed = (sectionKey: string) => {\n    return collapsedSections[sectionKey] || false;\n  };\n\n  // Export helper functions\n  const exportToCSV = (data: any[], fileName: string, reportType: string) => {\n    try {\n      let csvContent = '';\n      \n      if (reportType === 'pl') {\n        // Profit & Loss CSV format\n        csvContent = 'Topic,Period,Total Revenue,Cost of Goods Sold,Gross Profit,Operating Expenses,Operating Income,Other Income,Other Expenses,Net Income Before Tax,Tax Expense,Net Income\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.totalRevenue}\",\"${item.costOfGoodsSold}\",\"${item.grossProfit}\",\"${item.operatingExpenses}\",\"${item.operatingIncome}\",\"${item.otherIncome}\",\"${item.otherExpenses}\",\"${item.netIncomeBeforeTax}\",\"${item.taxExpense}\",\"${item.netIncome}\"\\n`;\n        });\n      } else if (reportType === 'bs') {\n        // Balance Sheet CSV format\n        csvContent = 'Topic,Period,Current Assets,Cash,Accounts Receivable,Inventory,Non-Current Assets,Property Plant Equipment,Intangible Assets,Total Assets,Current Liabilities,Accounts Payable,Short Term Debt,Long Term Liabilities,Long Term Debt,Total Liabilities,Shareholders Equity,Retained Earnings\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.currentAssets}\",\"${item.cash}\",\"${item.accountsReceivable}\",\"${item.inventory}\",\"${item.nonCurrentAssets}\",\"${item.propertyPlantEquipment}\",\"${item.intangibleAssets}\",\"${item.totalAssets}\",\"${item.currentLiabilities}\",\"${item.accountsPayable}\",\"${item.shortTermDebt}\",\"${item.longTermLiabilities}\",\"${item.longTermDebt}\",\"${item.totalLiabilities}\",\"${item.shareholdersEquity}\",\"${item.retainedEarnings}\"\\n`;\n        });\n      } else if (reportType === 'cf') {\n        // Cash Flow CSV format\n        csvContent = 'Topic,Period,Operating Cash Flow,Net Income,Depreciation,Change in Working Capital,Investing Cash Flow,Capital Expenditures,Acquisitions,Financing Cash Flow,Debt Issuance,Debt Repayment,Dividends Paid,Net Change in Cash,Beginning Cash Balance,Ending Cash Balance\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.operatingCashFlow}\",\"${item.netIncome}\",\"${item.depreciation}\",\"${item.changeInWorkingCapital}\",\"${item.investingCashFlow}\",\"${item.capitalExpenditures}\",\"${item.acquisitions}\",\"${item.financingCashFlow}\",\"${item.debtIssuance}\",\"${item.debtRepayment}\",\"${item.dividendsPaid}\",\"${item.netChangeInCash}\",\"${item.beginningCashBalance}\",\"${item.endingCashBalance}\"\\n`;\n        });\n      }\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', fileName);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({ description: `${fileName} exported successfully` });\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({ description: 'Export failed. Please try again.', variant: 'destructive' });\n    }\n  };\n\n  const exportToPDF = (reportType: string) => {\n    try {\n      // Get the current tab content\n      const activeTabElement = document.querySelector(`[data-testid=\"tab-content-${reportType}\"]`);\n      if (!activeTabElement) {\n        toast({ description: 'No data to export', variant: 'destructive' });\n        return;\n      }\n\n      // Create a new window for printing\n      const printWindow = window.open('', '_blank');\n      if (!printWindow) {\n        toast({ description: 'Popup blocked. Please allow popups and try again.', variant: 'destructive' });\n        return;\n      }\n\n      const reportTitle = reportType === 'pl' ? 'Profit & Loss Statement' : \n                         reportType === 'bs' ? 'Balance Sheet' : 'Cash Flow Statement';\n\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>${reportTitle}</title>\n            <style>\n              body { font-family: Arial, sans-serif; margin: 20px; }\n              h1 { color: #333; text-align: center; }\n              table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n              th { background-color: #f2f2f2; font-weight: bold; }\n              .number { text-align: right; }\n              @media print {\n                body { margin: 0; }\n                .no-print { display: none; }\n              }\n            </style>\n          </head>\n          <body>\n            <h1>${reportTitle}</h1>\n            <div>${activeTabElement.innerHTML}</div>\n            <script>\n              window.onload = function() {\n                // Clean up the content for printing\n                const editButtons = document.querySelectorAll('button');\n                editButtons.forEach(btn => btn.style.display = 'none');\n                \n                // Auto print\n                window.print();\n                window.close();\n              };\n            </script>\n          </body>\n        </html>\n      `);\n      \n      printWindow.document.close();\n      \n      toast({ description: `${reportTitle} PDF export initiated` });\n    } catch (error) {\n      console.error('PDF export error:', error);\n      toast({ description: 'PDF export failed. Please try again.', variant: 'destructive' });\n    }\n  };\n\n  // Calculate key financial metrics\n  const financialMetrics = useMemo(() => {\n    // Get latest periods for each statement type\n    const plPeriods = plStatements.map(pl => pl.period).sort().reverse();\n    const bsPeriods = balanceSheets.map(bs => bs.period).sort().reverse();\n    const cfPeriods = cashFlowStatements.map(cf => cf.period).sort().reverse();\n    \n    const latestPLPeriod = plPeriods[0] || '';\n    const previousPLPeriod = plPeriods[1] || '';\n    const latestBSPeriod = bsPeriods[0] || '';\n    const previousBSPeriod = bsPeriods[1] || '';\n    const latestCFPeriod = cfPeriods[0] || '';\n    const previousCFPeriod = cfPeriods[1] || '';\n    \n    // P&L Metrics\n    const latestPL = plStatements.find(pl => pl.period === latestPLPeriod);\n    const previousPL = plStatements.find(pl => pl.period === previousPLPeriod);\n    \n    const currentRevenue = latestPL ? safeParseFloat(latestPL.totalRevenue) : 0;\n    const currentExpenses = latestPL ? \n      safeParseFloat(latestPL.costOfGoodsSold) + \n      safeParseFloat(latestPL.operatingExpenses) + \n      safeParseFloat(latestPL.otherExpenses) + \n      safeParseFloat(latestPL.taxExpense) : 0;\n    const currentNetIncome = latestPL ? safeParseFloat(latestPL.netIncome) : 0;\n    \n    const previousRevenue = previousPL ? safeParseFloat(previousPL.totalRevenue) : 0;\n    const previousExpenses = previousPL ? \n      safeParseFloat(previousPL.costOfGoodsSold) + \n      safeParseFloat(previousPL.operatingExpenses) + \n      safeParseFloat(previousPL.otherExpenses) + \n      safeParseFloat(previousPL.taxExpense) : 0;\n    const previousNetIncome = previousPL ? safeParseFloat(previousPL.netIncome) : 0;\n    \n    // Balance Sheet Metrics\n    const latestBS = balanceSheets.find(bs => bs.period === latestBSPeriod);\n    const previousBS = balanceSheets.find(bs => bs.period === previousBSPeriod);\n    \n    const currentTotalAssets = latestBS ? safeParseFloat(latestBS.totalAssets) : 0;\n    const currentCurrentAssets = latestBS ? safeParseFloat(latestBS.currentAssets) : 0;\n    const currentCurrentLiabilities = latestBS ? safeParseFloat(latestBS.currentLiabilities) : 0;\n    const workingCapital = currentCurrentAssets - currentCurrentLiabilities;\n    \n    const previousTotalAssets = previousBS ? safeParseFloat(previousBS.totalAssets) : 0;\n    const previousCurrentAssets = previousBS ? safeParseFloat(previousBS.currentAssets) : 0;\n    const previousCurrentLiabilities = previousBS ? safeParseFloat(previousBS.currentLiabilities) : 0;\n    const previousWorkingCapital = previousCurrentAssets - previousCurrentLiabilities;\n    \n    // Cash Flow Metrics\n    const latestCF = cashFlowStatements.find(cf => cf.period === latestCFPeriod);\n    const previousCF = cashFlowStatements.find(cf => cf.period === previousCFPeriod);\n    \n    const operatingCashFlow = latestCF ? safeParseFloat(latestCF.operatingCashFlow) : 0;\n    const previousOperatingCashFlow = previousCF ? safeParseFloat(previousCF.operatingCashFlow) : 0;\n    \n    // Calculate percentage changes\n    const revenueChange = calculatePercentageChange(currentRevenue, previousRevenue);\n    const expenseChange = calculatePercentageChange(currentExpenses, previousExpenses);\n    const netIncomeChange = calculatePercentageChange(currentNetIncome, previousNetIncome);\n    const assetsChange = calculatePercentageChange(currentTotalAssets, previousTotalAssets);\n    const workingCapitalChange = calculatePercentageChange(workingCapital, previousWorkingCapital);\n    const operatingCashFlowChange = calculatePercentageChange(operatingCashFlow, previousOperatingCashFlow);\n    \n    return {\n      currentRevenue,\n      currentExpenses,\n      currentNetIncome,\n      currentTotalAssets,\n      workingCapital,\n      operatingCashFlow,\n      revenueChange,\n      expenseChange,\n      netIncomeChange,\n      assetsChange,\n      workingCapitalChange,\n      operatingCashFlowChange,\n      latestPLPeriod,\n      latestBSPeriod,\n      latestCFPeriod,\n      hasPreviousPL: !!previousPL,\n      hasPreviousBS: !!previousBS,\n      hasPreviousCF: !!previousCF\n    };\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  // Date range validation\n  const validateDateRange = (start: string, end: string): boolean => {\n    if (start === 'none' || end === 'none') return true;\n    if (start > end) {\n      toast({\n        description: \"Start period must be before or equal to end period\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n    return true;\n  };\n\n  // Enhanced period change handlers with validation\n  const handleStartPeriodChange = (value: string) => {\n    if (validateDateRange(value, endPeriod)) {\n      setStartPeriod(value);\n    }\n  };\n\n  const handleEndPeriodChange = (value: string) => {\n    if (validateDateRange(startPeriod, value)) {\n      setEndPeriod(value);\n    }\n  };\n\n  // Validation helper function\n  const validateNumericInput = (value: string): string | null => {\n    if (value.trim() === '') return 'Value is required';\n    \n    const num = parseFloat(value);\n    if (isNaN(num)) return 'Must be a valid number';\n    \n    // Check decimal places\n    if (value.includes('.') && value.split('.')[1].length > 2) {\n      return 'Maximum 2 decimal places allowed';\n    }\n    \n    return null;\n  };\n\n  // Update mutations with improved error handling\n  const updatePLMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/profit-loss/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/profit-loss'] });\n      toast({ description: \"Profit & Loss statement updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('P&L update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  const updateBSMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/balance-sheet/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/balance-sheet'] });\n      toast({ description: \"Balance sheet updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('Balance sheet update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  const updateCFMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/cash-flow/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-flow'] });\n      toast({ description: \"Cash flow statement updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('Cash flow update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  // Edit cell functions\n  const startEditing = (cellKey: string, currentValue: string) => {\n    setEditingCells(prev => ({ ...prev, [cellKey]: currentValue }));\n  };\n\n  const saveEdit = async (cellKey: string, itemId: string, field: string, reportType: 'pl' | 'bs' | 'cf') => {\n    const newValue = editingCells[cellKey];\n    \n    // Client-side validation\n    const validationError = validateNumericInput(newValue);\n    if (validationError) {\n      setValidationErrors(prev => ({ ...prev, [cellKey]: validationError }));\n      toast({ \n        description: validationError, \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    // Clear any existing validation errors for this cell\n    setValidationErrors(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n    \n    try {\n      if (reportType === 'pl') {\n        await updatePLMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      } else if (reportType === 'bs') {\n        await updateBSMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      } else if (reportType === 'cf') {\n        await updateCFMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      }\n\n      setEditingCells(prev => {\n        const newState = { ...prev };\n        delete newState[cellKey];\n        return newState;\n      });\n    } catch (error) {\n      // Error handling is done in the mutation onError callbacks\n      console.error('Save edit error:', error);\n    }\n  };\n\n  const cancelEdit = (cellKey: string) => {\n    setEditingCells(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n    \n    // Clear any validation errors for this cell\n    setValidationErrors(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n  };\n\n  // Format number for display\n  const formatNumber = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(num);\n  };\n\n  // Editable cell component\n  const EditableCell = ({ \n    value, \n    itemId, \n    field, \n    reportType, \n    isEditable = true, \n    className = \"\" \n  }: {\n    value: string;\n    itemId: string;\n    field: string;\n    reportType: 'pl' | 'bs' | 'cf';\n    isEditable?: boolean;\n    className?: string;\n  }) => {\n    const cellKey = `${itemId}-${field}`;\n    const isEditing = cellKey in editingCells;\n    const hasError = cellKey in validationErrors;\n    const isSaving = updatePLMutation.isPending || updateBSMutation.isPending || updateCFMutation.isPending;\n\n    if (!isEditable) {\n      return (\n        <TableCell className={`text-right font-medium text-base py-4 px-6 ${className}`} data-testid={`cell-readonly-${field}`}>\n          <span className=\"text-foreground\">{formatNumber(value)}</span>\n        </TableCell>\n      );\n    }\n\n    if (isEditing) {\n      return (\n        <TableCell className=\"text-right p-2\" data-testid={`cell-editing-${field}`}>\n          <div className=\"flex flex-col gap-1\">\n            <div className=\"flex items-center gap-1\">\n              <Input\n                value={editingCells[cellKey]}\n                onChange={(e) => {\n                  setEditingCells(prev => ({ ...prev, [cellKey]: e.target.value }));\n                  // Clear validation error on input change\n                  if (hasError) {\n                    setValidationErrors(prev => {\n                      const newState = { ...prev };\n                      delete newState[cellKey];\n                      return newState;\n                    });\n                  }\n                }}\n                className={`h-8 text-right ${hasError ? 'border-red-500 focus:border-red-500' : ''}`}\n                type=\"number\"\n                step=\"0.01\"\n                disabled={isSaving}\n                data-testid={`input-edit-${field}`}\n              />\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => saveEdit(cellKey, itemId, field, reportType)}\n                className=\"h-8 w-8 p-0\"\n                disabled={isSaving}\n                data-testid={`button-save-${field}`}\n              >\n                {isSaving ? (\n                  <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-green-600 border-t-transparent\" />\n                ) : (\n                  <Check className=\"h-4 w-4 text-green-600\" />\n                )}\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => cancelEdit(cellKey)}\n                className=\"h-8 w-8 p-0\"\n                disabled={isSaving}\n                data-testid={`button-cancel-${field}`}\n              >\n                <X className=\"h-4 w-4 text-red-600\" />\n              </Button>\n            </div>\n            {hasError && (\n              <div className=\"flex items-center gap-1 text-xs text-red-600\">\n                <AlertCircle className=\"h-3 w-3\" />\n                <span>{validationErrors[cellKey]}</span>\n              </div>\n            )}\n          </div>\n        </TableCell>\n      );\n    }\n\n    return (\n      <TableCell \n        className={`text-right cursor-pointer hover:bg-muted/50 ${className}`}\n        onClick={() => startEditing(cellKey, value)}\n        data-testid={`cell-editable-${field}`}\n      >\n        <div className=\"flex items-center justify-end gap-2\">\n          {formatNumber(value)}\n          <Edit2 className=\"h-3 w-3 opacity-50\" />\n        </div>\n      </TableCell>\n    );\n  };\n\n  // Collapsible Table Section Component\n  interface CollapsibleSectionProps {\n    title: string;\n    sectionKey: string;\n    children: React.ReactNode;\n    statements: any[];\n    className?: string;\n    isSubSection?: boolean;\n    showToggle?: boolean;\n  }\n\n  const CollapsibleTableSection = ({ \n    title, \n    sectionKey, \n    children, \n    statements,\n    className = \"\",\n    isSubSection = false,\n    showToggle = true\n  }: CollapsibleSectionProps) => {\n    const collapsed = isCollapsed(sectionKey);\n    const indentClass = isSubSection ? \"pl-8\" : \"pl-6\";\n    \n    return (\n      <>\n        <TableRow \n          className={`${className} ${collapsed ? 'border-b border-border/30' : ''}`}\n        >\n          <TableCell \n            className={`font-bold sticky left-0 bg-muted/60 z-10 border-r border-border/50 py-3 px-4 text-foreground ${indentClass}`}\n            onClick={showToggle ? () => toggleSection(sectionKey) : undefined}\n            style={{ cursor: showToggle ? 'pointer' : 'default' }}\n            data-testid={`section-${sectionKey}`}\n          >\n            <div className=\"flex items-center gap-2\">\n              {showToggle && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0 hover:bg-muted/80\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    toggleSection(sectionKey);\n                  }}\n                  data-testid={`toggle-${sectionKey}`}\n                >\n                  {collapsed ? (\n                    <Plus className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Minus className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              )}\n              <span className={isSubSection ? \"text-sm\" : \"text-base\"}>{title}</span>\n            </div>\n          </TableCell>\n          {statements.map((statement) => (\n            <TableCell \n              key={`${statement.id}-${sectionKey}`}\n              className=\"text-right font-medium bg-muted/40 py-3 px-6\"\n            >\n              {/* Section total could be calculated here if needed */}\n            </TableCell>\n          ))}\n        </TableRow>\n        {!collapsed && children}\n      </>\n    );\n  };\n\n  // Section hierarchy definitions based on financial statement structure\n  const financialSections = {\n    profitLoss: {\n      income: {\n        title: \"Income\",\n        key: \"income\",\n        items: [\n          { field: \"totalRevenue\", title: \"Total Revenue\" }\n        ]\n      },\n      cost: {\n        title: \"Cost\",\n        key: \"cost\", \n        items: [\n          { field: \"costOfGoodsSold\", title: \"Cost of Goods Sold\" }\n        ]\n      },\n      grossProfit: {\n        title: \"Gross Profit\",\n        key: \"grossProfit\",\n        isCalculated: true,\n        items: [\n          { field: \"grossProfit\", title: \"Gross Profit\" }\n        ]\n      },\n      operatingExpenses: {\n        title: \"Operating Expenses\",\n        key: \"operatingExpenses\",\n        items: [\n          { field: \"operatingExpenses\", title: \"Total Operating Expenses\" }\n        ]\n      },\n      operatingIncome: {\n        title: \"Operating Income\",\n        key: \"operatingIncome\",\n        isCalculated: true,\n        items: [\n          { field: \"operatingIncome\", title: \"Operating Income\" }\n        ]\n      },\n      otherItems: {\n        title: \"Other Items\",\n        key: \"otherItems\",\n        items: [\n          { field: \"otherIncome\", title: \"Other Income\" },\n          { field: \"otherExpenses\", title: \"Other Expenses\" }\n        ]\n      },\n      netIncome: {\n        title: \"Net Income\",\n        key: \"netIncome\",\n        isCalculated: true,\n        items: [\n          { field: \"netIncomeBeforeTax\", title: \"Income Before Tax\" },\n          { field: \"taxExpense\", title: \"Tax Expense\" },\n          { field: \"netIncome\", title: \"Net Income\" }\n        ]\n      }\n    },\n    balanceSheet: {\n      assets: {\n        title: \"Assets\",\n        key: \"assets\",\n        sections: {\n          currentAssets: {\n            title: \"Current Assets\",\n            key: \"currentAssets\",\n            items: [\n              { field: \"cash\", title: \"Cash\" },\n              { field: \"accountsReceivable\", title: \"Accounts Receivable\" },\n              { field: \"inventory\", title: \"Inventory\" }\n            ]\n          },\n          nonCurrentAssets: {\n            title: \"Non-Current Assets\", \n            key: \"nonCurrentAssets\",\n            items: [\n              { field: \"propertyPlantEquipment\", title: \"Property, Plant & Equipment\" },\n              { field: \"intangibleAssets\", title: \"Intangible Assets\" }\n            ]\n          }\n        }\n      },\n      liabilities: {\n        title: \"Liabilities\",\n        key: \"liabilities\", \n        sections: {\n          currentLiabilities: {\n            title: \"Current Liabilities\",\n            key: \"currentLiabilities\",\n            items: [\n              { field: \"accountsPayable\", title: \"Accounts Payable\" },\n              { field: \"shortTermDebt\", title: \"Short-term Debt\" }\n            ]\n          },\n          longTermLiabilities: {\n            title: \"Long-term Liabilities\",\n            key: \"longTermLiabilities\", \n            items: [\n              { field: \"longTermDebt\", title: \"Long-term Debt\" }\n            ]\n          }\n        }\n      },\n      equity: {\n        title: \"Shareholders' Equity\",\n        key: \"equity\",\n        items: [\n          { field: \"shareholdersEquity\", title: \"Total Shareholders' Equity\" },\n          { field: \"retainedEarnings\", title: \"Retained Earnings\" }\n        ]\n      }\n    },\n    cashFlow: {\n      operating: {\n        title: \"Operating Activities\",\n        key: \"operating\",\n        items: [\n          { field: \"netIncome\", title: \"Net Income\" },\n          { field: \"depreciation\", title: \"Depreciation\" },\n          { field: \"changeInWorkingCapital\", title: \"Change in Working Capital\" },\n          { field: \"operatingCashFlow\", title: \"Operating Cash Flow\" }\n        ]\n      },\n      investing: {\n        title: \"Investing Activities\", \n        key: \"investing\",\n        items: [\n          { field: \"capitalExpenditures\", title: \"Capital Expenditures\" },\n          { field: \"acquisitions\", title: \"Acquisitions\" },\n          { field: \"investingCashFlow\", title: \"Investing Cash Flow\" }\n        ]\n      },\n      financing: {\n        title: \"Financing Activities\",\n        key: \"financing\",\n        items: [\n          { field: \"debtIssuance\", title: \"Debt Issuance\" },\n          { field: \"debtRepayment\", title: \"Debt Repayment\" },\n          { field: \"dividendsPaid\", title: \"Dividends Paid\" },\n          { field: \"financingCashFlow\", title: \"Financing Cash Flow\" }\n        ]\n      },\n      netCashChange: {\n        title: \"Net Change in Cash\",\n        key: \"netCashChange\",\n        isCalculated: true,\n        items: [\n          { field: \"netChangeInCash\", title: \"Net Change in Cash\" },\n          { field: \"beginningCashBalance\", title: \"Beginning Cash Balance\" },\n          { field: \"endingCashBalance\", title: \"Ending Cash Balance\" }\n        ]\n      }\n    }\n  };\n\n  // Profit & Loss Table Component - Comparative View\n  const ProfitLossTable = () => {\n    if (plLoading) {\n      return (\n        <div className=\"p-12 text-center\" data-testid=\"loading-pl\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"text-lg font-medium text-muted-foreground\">Loading data...</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">Please wait</p>\n        </div>\n      );\n    }\n\n    if (plStatements.length === 0) {\n      return <div className=\"p-8 text-center text-muted-foreground\">No profit & loss data available</div>;\n    }\n\n    // Group statements by topic and sort periods\n    const groupedStatements = plStatements.reduce((acc, statement) => {\n      if (!acc[statement.topic]) acc[statement.topic] = [];\n      acc[statement.topic].push(statement);\n      return acc;\n    }, {} as Record<string, ProfitLossStatement[]>);\n\n    // Sort periods for each topic\n    Object.keys(groupedStatements).forEach(topic => {\n      groupedStatements[topic].sort((a, b) => a.period.localeCompare(b.period));\n    });\n\n    return (\n      <div className=\"space-y-6\">\n        {Object.entries(groupedStatements).map(([topic, statements]) => {\n          const firstStatement = statements[0];\n          const editableFields = JSON.parse(firstStatement?.isEditable || '{}');\n\n          return (\n            <Card key={topic} className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid={`pl-comparative-${topic}`}>\n              <CardHeader className=\"bg-muted/50 border-b border-border/50\">\n                <CardTitle className=\"flex items-center gap-3 text-xl font-bold\">\n                  <div className=\"p-2 rounded-lg bg-primary/10 border border-primary/20\">\n                    <Calculator className=\"h-6 w-6 text-primary\" />\n                  </div>\n                  <div>\n                    <span className=\"text-foreground\">Profit & Loss Statement</span>\n                    <div className=\"text-sm font-normal text-muted-foreground\">{topic}</div>\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <Table className=\"min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden\">\n                    <TableHeader>\n                      <TableRow className=\"bg-muted/70 border-b-2 border-border\">\n                        <TableHead className=\"sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6\">Line Item</TableHead>\n                        {statements.map((statement) => (\n                          <TableHead key={statement.period} className=\"text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6\" data-testid={`header-${statement.period}`}>\n                            {statement.period}\n                          </TableHead>\n                        ))}\n                      </TableRow>\n                    </TableHeader>\n                  <TableBody>\n                    {/* Income Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.income.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.income.key}`}\n                      statements={statements}\n                      className=\"bg-muted/30 dark:bg-muted/20\"\n                    >\n                      {financialSections.profitLoss.income.items.map((item) => (\n                        <TableRow key={item.field}>\n                          <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Cost Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.cost.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.cost.key}`}\n                      statements={statements}\n                      className=\"bg-muted/30 dark:bg-muted/20\"\n                    >\n                      {financialSections.profitLoss.cost.items.map((item) => (\n                        <TableRow key={item.field}>\n                          <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Gross Profit - Calculated Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.grossProfit.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.grossProfit.key}`}\n                      statements={statements}\n                      className=\"border-t-2 bg-primary/10 dark:bg-primary/5\"\n                      showToggle={false}\n                    >\n                      {financialSections.profitLoss.grossProfit.items.map((item) => (\n                        <TableRow key={item.field} className=\"bg-primary/5 dark:bg-primary/5\">\n                          <TableCell className=\"font-bold sticky left-0 bg-primary/10 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                              className=\"font-bold\"\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Operating Expenses Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.operatingExpenses.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.operatingExpenses.key}`}\n                      statements={statements}\n                      className=\"bg-muted/30 dark:bg-muted/20\"\n                    >\n                      {financialSections.profitLoss.operatingExpenses.items.map((item) => (\n                        <TableRow key={item.field}>\n                          <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Operating Income - Calculated Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.operatingIncome.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.operatingIncome.key}`}\n                      statements={statements}\n                      className=\"border-t-2 bg-primary/10 dark:bg-primary/5\"\n                      showToggle={false}\n                    >\n                      {financialSections.profitLoss.operatingIncome.items.map((item) => (\n                        <TableRow key={item.field} className=\"bg-primary/5 dark:bg-primary/5\">\n                          <TableCell className=\"font-bold sticky left-0 bg-primary/10 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                              className=\"font-bold\"\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Other Items Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.otherItems.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.otherItems.key}`}\n                      statements={statements}\n                      className=\"bg-muted/30 dark:bg-muted/20\"\n                    >\n                      {financialSections.profitLoss.otherItems.items.map((item) => (\n                        <TableRow key={item.field}>\n                          <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-12\">\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n\n                    {/* Net Income Section - Final Calculated Section */}\n                    <CollapsibleTableSection \n                      title={financialSections.profitLoss.netIncome.title}\n                      sectionKey={`${topic}-${financialSections.profitLoss.netIncome.key}`}\n                      statements={statements}\n                      className=\"border-t-2 bg-primary/15 dark:bg-primary/10\"\n                      showToggle={false}\n                    >\n                      {financialSections.profitLoss.netIncome.items.map((item, index) => (\n                        <TableRow key={item.field} className={index === financialSections.profitLoss.netIncome.items.length - 1 ? \"bg-primary/20 dark:bg-primary/15\" : \"bg-primary/10 dark:bg-primary/5\"}>\n                          <TableCell className={`${index === financialSections.profitLoss.netIncome.items.length - 1 ? \"font-bold text-lg\" : \"font-bold\"} sticky left-0 bg-primary/20 z-10 border-r border-border/50 pl-12`}>\n                            {item.title}\n                          </TableCell>\n                          {statements.map((statement) => (\n                            <EditableCell\n                              key={`${statement.id}-${item.field}`}\n                              value={statement[item.field as keyof ProfitLossStatement] as string}\n                              itemId={statement.id}\n                              field={item.field}\n                              reportType=\"pl\"\n                              isEditable={JSON.parse(statement.isEditable || '{}')[item.field]}\n                              className={index === financialSections.profitLoss.netIncome.items.length - 1 ? \"font-bold text-lg\" : \"font-bold\"}\n                            />\n                          ))}\n                        </TableRow>\n                      ))}\n                    </CollapsibleTableSection>\n                  </TableBody>\n                </Table>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n    );\n  };\n\n  // Balance Sheet Table Component - Comparative View\n  const BalanceSheetTable = () => {\n    if (bsLoading) {\n      return (\n        <div className=\"p-12 text-center\" data-testid=\"loading-bs\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"text-lg font-medium text-muted-foreground\">Loading data...</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">Please wait</p>\n        </div>\n      );\n    }\n\n    if (balanceSheets.length === 0) {\n      return <div className=\"p-8 text-center text-muted-foreground\">No balance sheet data available</div>;\n    }\n\n    // Group statements by topic and sort periods\n    const groupedSheets = balanceSheets.reduce((acc, sheet) => {\n      if (!acc[sheet.topic]) acc[sheet.topic] = [];\n      acc[sheet.topic].push(sheet);\n      return acc;\n    }, {} as Record<string, BalanceSheet[]>);\n\n    // Sort periods for each topic\n    Object.keys(groupedSheets).forEach(topic => {\n      groupedSheets[topic].sort((a, b) => a.period.localeCompare(b.period));\n    });\n\n    return (\n      <div className=\"space-y-6\">\n        {Object.entries(groupedSheets).map(([topic, sheets]) => (\n          <Card key={topic} className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid={`bs-comparative-${topic}`}>\n            <CardHeader className=\"bg-muted/50 border-b border-border/50\">\n              <CardTitle className=\"flex items-center gap-3 text-xl font-bold\">\n                <div className=\"p-2 rounded-lg bg-primary/10 border border-primary/20\">\n                  <BarChart3 className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <span className=\"text-foreground\">Balance Sheet</span>\n                  <div className=\"text-sm font-normal text-muted-foreground\">{topic}</div>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table className=\"min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden\">\n                  <TableHeader>\n                    <TableRow className=\"bg-muted/70 border-b-2 border-border\">\n                      <TableHead className=\"sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6\">Line Item</TableHead>\n                      {sheets.map((sheet) => (\n                        <TableHead key={sheet.period} className=\"text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6\" data-testid={`header-${sheet.period}`}>\n                          {sheet.period}\n                        </TableHead>\n                      ))}\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {/* Assets Section */}\n                    <TableRow className=\"bg-muted/40 dark:bg-muted/30 border-t border-border/30\">\n                      <TableCell className=\"font-bold text-base sticky left-0 bg-muted/60 z-10 border-r border-border/50 py-4 px-6 text-foreground\">Current Assets</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-currentAssets`}\n                          value={sheet.currentAssets}\n                          itemId={sheet.id}\n                          field=\"currentAssets\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').currentAssets}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Cash</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-cash`}\n                          value={sheet.cash}\n                          itemId={sheet.id}\n                          field=\"cash\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').cash}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Accounts Receivable</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-accountsReceivable`}\n                          value={sheet.accountsReceivable}\n                          itemId={sheet.id}\n                          field=\"accountsReceivable\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').accountsReceivable}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Inventory</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-inventory`}\n                          value={sheet.inventory}\n                          itemId={sheet.id}\n                          field=\"inventory\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').inventory}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                      <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Non-Current Assets</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-nonCurrentAssets`}\n                          value={sheet.nonCurrentAssets}\n                          itemId={sheet.id}\n                          field=\"nonCurrentAssets\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').nonCurrentAssets}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Property, Plant & Equipment</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-propertyPlantEquipment`}\n                          value={sheet.propertyPlantEquipment}\n                          itemId={sheet.id}\n                          field=\"propertyPlantEquipment\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').propertyPlantEquipment}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Intangible Assets</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-intangibleAssets`}\n                          value={sheet.intangibleAssets}\n                          itemId={sheet.id}\n                          field=\"intangibleAssets\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').intangibleAssets}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow className=\"border-t-2 bg-muted/50 dark:bg-muted/40\">\n                      <TableCell className=\"font-bold text-lg sticky left-0 bg-muted/70 z-10 border-r border-border/50 py-4 px-6 text-foreground\">Total Assets</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-totalAssets`}\n                          value={sheet.totalAssets}\n                          itemId={sheet.id}\n                          field=\"totalAssets\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').totalAssets}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    \n                    {/* Liabilities Section */}\n                    <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                      <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Current Liabilities</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-currentLiabilities`}\n                          value={sheet.currentLiabilities}\n                          itemId={sheet.id}\n                          field=\"currentLiabilities\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').currentLiabilities}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Accounts Payable</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-accountsPayable`}\n                          value={sheet.accountsPayable}\n                          itemId={sheet.id}\n                          field=\"accountsPayable\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').accountsPayable}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Short-term Liabilities</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-shortTermDebt`}\n                          value={sheet.shortTermDebt}\n                          itemId={sheet.id}\n                          field=\"shortTermDebt\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').shortTermDebt}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                      <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Long-term Liabilities</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-longTermLiabilities`}\n                          value={sheet.longTermLiabilities}\n                          itemId={sheet.id}\n                          field=\"longTermLiabilities\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').longTermLiabilities}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Long-term Debt</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-longTermDebt`}\n                          value={sheet.longTermDebt}\n                          itemId={sheet.id}\n                          field=\"longTermDebt\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').longTermDebt}\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow className=\"border-t-2 bg-muted/30 dark:bg-muted/20\">\n                      <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Total Liabilities</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-totalLiabilities`}\n                          value={sheet.totalLiabilities}\n                          itemId={sheet.id}\n                          field=\"totalLiabilities\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').totalLiabilities}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    \n                    {/* Equity Section */}\n                    <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                      <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Shareholders' Equity</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-shareholdersEquity`}\n                          value={sheet.shareholdersEquity}\n                          itemId={sheet.id}\n                          field=\"shareholdersEquity\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').shareholdersEquity}\n                          className=\"font-bold\"\n                        />\n                      ))}\n                    </TableRow>\n                    <TableRow>\n                      <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-6\">Retained Earnings</TableCell>\n                      {sheets.map((sheet) => (\n                        <EditableCell\n                          key={`${sheet.id}-retainedEarnings`}\n                          value={sheet.retainedEarnings}\n                          itemId={sheet.id}\n                          field=\"retainedEarnings\"\n                          reportType=\"bs\"\n                          isEditable={JSON.parse(sheet.isEditable || '{}').retainedEarnings}\n                        />\n                      ))}\n                    </TableRow>\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  // Cash Flow Table Component - Comparative View\n  const CashFlowTable = () => {\n    if (cfLoading) {\n      return (\n        <div className=\"p-12 text-center\" data-testid=\"loading-cf\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            <span className=\"text-lg font-medium text-muted-foreground\">Loading data...</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">Please wait</p>\n        </div>\n      );\n    }\n\n    if (cashFlowStatements.length === 0) {\n      return <div className=\"p-8 text-center text-muted-foreground\">No cash flow data available</div>;\n    }\n\n    // Group statements by topic and sort periods\n    const groupedStatements = cashFlowStatements.reduce((acc, statement) => {\n      if (!acc[statement.topic]) acc[statement.topic] = [];\n      acc[statement.topic].push(statement);\n      return acc;\n    }, {} as Record<string, CashFlowStatement[]>);\n\n    // Sort periods for each topic\n    Object.keys(groupedStatements).forEach(topic => {\n      groupedStatements[topic].sort((a, b) => a.period.localeCompare(b.period));\n    });\n\n    return (\n      <div className=\"space-y-6\">\n        {Object.entries(groupedStatements).map(([topic, statements]) => (\n          <Card key={topic} className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid={`cf-comparative-${topic}`}>\n            <CardHeader className=\"bg-muted/50 border-b border-border/50\">\n              <CardTitle className=\"flex items-center gap-3 text-xl font-bold\">\n                <div className=\"p-2 rounded-lg bg-primary/10 border border-primary/20\">\n                  <TrendingUp className=\"h-6 w-6 text-primary\" />\n                </div>\n                <div>\n                  <span className=\"text-foreground\">Cash Flow Statement</span>\n                  <div className=\"text-sm font-normal text-muted-foreground\">{topic}</div>\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <Table className=\"min-w-full border-separate border-spacing-0 rounded-xl overflow-hidden\">\n                  <TableHeader>\n                    <TableRow className=\"bg-muted/70 border-b-2 border-border\">\n                      <TableHead className=\"sticky left-0 bg-muted/70 z-10 min-w-[200px] border-r border-border/50 font-bold text-lg text-foreground py-5 px-6\">Line Item</TableHead>\n                      {statements.map((statement) => (\n                        <TableHead key={statement.period} className=\"text-right min-w-[120px] font-bold text-lg text-foreground py-5 px-6\" data-testid={`header-${statement.period}`}>\n                          {statement.period}\n                        </TableHead>\n                      ))}\n                    </TableRow>\n                  </TableHeader>\n                <TableBody>\n                  <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                    <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Operating Cash Flow</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-operatingCashFlow`}\n                        value={statement.operatingCashFlow}\n                        itemId={statement.id}\n                        field=\"operatingCashFlow\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').operatingCashFlow}\n                        className=\"font-bold\"\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Net Income</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-netIncome`}\n                        value={statement.netIncome}\n                        itemId={statement.id}\n                        field=\"netIncome\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').netIncome}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Depreciation</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-depreciation`}\n                        value={statement.depreciation}\n                        itemId={statement.id}\n                        field=\"depreciation\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').depreciation}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Changes in Working Capital</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-changeInWorkingCapital`}\n                        value={statement.changeInWorkingCapital}\n                        itemId={statement.id}\n                        field=\"changeInWorkingCapital\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').changeInWorkingCapital}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                    <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Investing Cash Flow</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-investingCashFlow`}\n                        value={statement.investingCashFlow}\n                        itemId={statement.id}\n                        field=\"investingCashFlow\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').investingCashFlow}\n                        className=\"font-bold\"\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Capital Expenditures</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-capitalExpenditures`}\n                        value={statement.capitalExpenditures}\n                        itemId={statement.id}\n                        field=\"capitalExpenditures\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').capitalExpenditures}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Business Acquisitions</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-acquisitions`}\n                        value={statement.acquisitions}\n                        itemId={statement.id}\n                        field=\"acquisitions\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').acquisitions}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow className=\"bg-muted/30 dark:bg-muted/20\">\n                    <TableCell className=\"font-bold sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Financing Cash Flow</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-financingCashFlow`}\n                        value={statement.financingCashFlow}\n                        itemId={statement.id}\n                        field=\"financingCashFlow\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').financingCashFlow}\n                        className=\"font-bold\"\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Loan Proceeds</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-debtIssuance`}\n                        value={statement.debtIssuance}\n                        itemId={statement.id}\n                        field=\"debtIssuance\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').debtIssuance}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Debt Repayments</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-debtRepayment`}\n                        value={statement.debtRepayment}\n                        itemId={statement.id}\n                        field=\"debtRepayment\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').debtRepayment}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50 pl-8\">Dividends Paid</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-dividendsPaid`}\n                        value={statement.dividendsPaid}\n                        itemId={statement.id}\n                        field=\"dividendsPaid\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').dividendsPaid}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow className=\"border-t-2 bg-muted/30 dark:bg-muted/20\">\n                    <TableCell className=\"font-bold text-lg sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Net Change in Cash</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-netChangeInCash`}\n                        value={statement.netChangeInCash}\n                        itemId={statement.id}\n                        field=\"netChangeInCash\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').netChangeInCash}\n                        className=\"font-bold text-lg\"\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow>\n                    <TableCell className=\"font-medium sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Beginning Cash Balance</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-beginningCashBalance`}\n                        value={statement.beginningCashBalance}\n                        itemId={statement.id}\n                        field=\"beginningCashBalance\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').beginningCashBalance}\n                      />\n                    ))}\n                  </TableRow>\n                  <TableRow className=\"border-t-2 bg-muted/30 dark:bg-muted/20\">\n                    <TableCell className=\"font-bold text-lg sticky left-0 bg-muted/50 z-10 border-r border-border/50\">Ending Cash Balance</TableCell>\n                    {statements.map((statement) => (\n                      <EditableCell\n                        key={`${statement.id}-endingCashBalance`}\n                        value={statement.endingCashBalance}\n                        itemId={statement.id}\n                        field=\"endingCashBalance\"\n                        reportType=\"cf\"\n                        isEditable={JSON.parse(statement.isEditable || '{}').endingCashBalance}\n                        className=\"font-bold text-lg\"\n                      />\n                    ))}\n                  </TableRow>\n                </TableBody>\n              </Table>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen relative overflow-hidden\">\n      {/* Background */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n        style={{ backgroundImage: `url(${heroBackground})` }}\n      />\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/20 via-background/60 to-background/80\" />\n      \n      <div className=\"relative z-10\">\n        <Navigation />\n        \n        {/* Hero Section */}\n        <section className=\"py-24\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center space-y-6\">\n            <h1 className=\"text-5xl md:text-6xl font-black text-foreground mb-6 leading-tight\" data-testid=\"page-title\">\n              Financial Reports\n              <span className=\"bg-gradient-to-r from-chart-1 to-chart-2 bg-clip-text text-transparent\"> Suite</span>\n            </h1>\n            <p className=\"text-xl md:text-2xl text-foreground/80 max-w-4xl mx-auto leading-relaxed font-medium\" data-testid=\"page-description\">\n              View and edit financial reports including Profit & Loss statements, Balance Sheets, and Cash Flow statements with real-time intelligent analysis\n            </p>\n            <div className=\"flex justify-center gap-4 text-sm text-muted-foreground\">\n              <Badge variant=\"outline\" className=\"px-4 py-2\">\n                <strong className=\"text-foreground\">Live Data</strong> Updated\n              </Badge>\n              <Badge variant=\"outline\" className=\"px-4 py-2\">\n                <strong className=\"text-foreground\">AI-Powered</strong> Analysis\n              </Badge>\n              <Badge variant=\"outline\" className=\"px-4 py-2\">\n                <strong className=\"text-foreground\">Real-time</strong> Editable\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <main className=\"container mx-auto px-6 py-12\">\n        <div className=\"max-w-7xl mx-auto space-y-8\">\n\n          {/* Enhanced Filters Section */}\n          <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300 mb-8\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 rounded-lg bg-primary/10\">\n                  <Filter className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div>\n                  <CardTitle className=\"text-xl font-bold text-foreground\">Data Filters</CardTitle>\n                  <p className=\"text-base text-foreground/70 mt-1\">Select the data you want to view</p>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <label className=\"text-base font-semibold text-foreground\">Topic</label>\n                  <Select value={selectedTopic} onValueChange={setSelectedTopic}>\n                    <SelectTrigger className=\"w-full bg-background/80 border-muted focus:border-primary transition-colors\" data-testid=\"select-topic\">\n                      <SelectValue placeholder=\"Select topic\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\" data-testid=\"option-all-topics\">All Topics</SelectItem>\n                      {uniqueTopics.map((topic) => (\n                        <SelectItem key={topic} value={topic} data-testid={`option-topic-${topic}`}>\n                          {topic}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-foreground\">Start Period</label>\n                  <Select value={startPeriod} onValueChange={handleStartPeriodChange}>\n                    <SelectTrigger className=\"w-full bg-background/80 border-muted focus:border-primary transition-colors\" data-testid=\"select-start-period\">\n                      <SelectValue placeholder=\"Select start period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\" data-testid=\"option-no-start\">Not specified</SelectItem>\n                      {uniquePeriods.map((period) => (\n                        <SelectItem key={period} value={period} data-testid={`option-start-${period}`}>\n                          {period}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-foreground\">End Period</label>\n                  <Select value={endPeriod} onValueChange={handleEndPeriodChange}>\n                    <SelectTrigger className=\"w-full bg-background/80 border-muted focus:border-primary transition-colors\" data-testid=\"select-end-period\">\n                      <SelectValue placeholder=\"Select end period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\" data-testid=\"option-no-end\">Not specified</SelectItem>\n                      {uniquePeriods.map((period) => (\n                        <SelectItem key={period} value={period} data-testid={`option-end-${period}`}>\n                          {period}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label className=\"text-sm font-medium text-foreground\">Actions</label>\n                  {(selectedTopic && selectedTopic !== \"all\" || (startPeriod && startPeriod !== \"none\") || (endPeriod && endPeriod !== \"none\")) ? (\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-muted-foreground/20 hover:border-primary hover:bg-primary/5 transition-all duration-200\"\n                      onClick={() => {\n                        setSelectedTopic(\"all\");\n                        setStartPeriod(\"none\");\n                        setEndPeriod(\"none\");\n                      }}\n                      data-testid=\"button-clear-filters\"\n                    >\n                      Clear Filters\n                    </Button>\n                  ) : (\n                    <div className=\"h-10 flex items-center\">\n                      <p className=\"text-sm text-muted-foreground\">Use filters to search</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Financial Metrics Dashboard */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6 mb-8\">\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-revenue\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Revenue</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.currentRevenue)}</p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.revenueChange >= 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.revenueChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.revenueChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-green-100 dark:bg-green-900/20\">\n                    <DollarSign className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-expenses\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Expenses</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.currentExpenses)}</p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.expenseChange <= 0 ? (\n                          <ArrowDownRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowUpRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.expenseChange <= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.expenseChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-red-100 dark:bg-red-900/20\">\n                    <TrendingUp className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-net-income\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Net Income</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.currentNetIncome)}</p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.netIncomeChange >= 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.netIncomeChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.netIncomeChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-blue-100 dark:bg-blue-900/20\">\n                    <Calculator className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-assets\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Assets</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.currentTotalAssets)}</p>\n                    {financialMetrics.hasPreviousBS && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.assetsChange >= 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.assetsChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.assetsChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-purple-100 dark:bg-purple-900/20\">\n                    <BarChart3 className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-working-capital\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Working Capital</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.workingCapital)}</p>\n                    {financialMetrics.hasPreviousBS && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.workingCapitalChange >= 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.workingCapitalChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.workingCapitalChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-orange-100 dark:bg-orange-900/20\">\n                    <PieChart className=\"h-6 w-6 text-orange-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"bg-card/95 backdrop-blur-sm border border-border/50 shadow-lg hover-elevate transition-all duration-300\" data-testid=\"metric-cash-flow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">Operating Cash Flow</p>\n                    <p className=\"text-2xl font-bold text-foreground\">${formatNumber(financialMetrics.operatingCashFlow)}</p>\n                    {financialMetrics.hasPreviousCF && (\n                      <div className=\"flex items-center mt-1\">\n                        {financialMetrics.operatingCashFlowChange >= 0 ? (\n                          <ArrowUpRight className=\"h-4 w-4 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-4 w-4 text-red-600\" />\n                        )}\n                        <span className={`text-sm ${financialMetrics.operatingCashFlowChange >= 0 ? 'text-green-600' : 'text-red-600'}`}>\n                          {Math.abs(financialMetrics.operatingCashFlowChange).toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <div className=\"p-3 rounded-full bg-teal-100 dark:bg-teal-900/20\">\n                    <Activity className=\"h-6 w-6 text-teal-600\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Enhanced Financial Reports Tabs */}\n          <div className=\"bg-gradient-to-r from-background/50 to-muted/30 rounded-2xl p-6 backdrop-blur-sm border border-border/50\">\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-2xl font-bold text-foreground flex items-center gap-3\">\n                    <div className=\"p-2 rounded-lg bg-primary/10\">\n                      <FileText className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    Financial Reports\n                  </h2>\n                  <p className=\"text-muted-foreground mt-2\">Select the type of report you want to view</p>\n                </div>\n                \n                {/* Export Buttons */}\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      const data = activeTab === 'pl' ? plStatements : \n                                   activeTab === 'bs' ? balanceSheets : cashFlowStatements;\n                      const reportName = activeTab === 'pl' ? 'Profit_Loss_Statement' : \n                                        activeTab === 'bs' ? 'Balance_Sheet' : 'Cash_Flow_Statement';\n                      exportToCSV(data, `${reportName}_${new Date().toISOString().split('T')[0]}.csv`, activeTab);\n                    }}\n                    className=\"gap-2 hover-elevate\"\n                    data-testid=\"button-export-csv\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    CSV\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => exportToPDF(activeTab)}\n                    className=\"gap-2 hover-elevate\"\n                    data-testid=\"button-export-pdf\"\n                  >\n                    <Printer className=\"h-4 w-4\" />\n                    PDF\n                  </Button>\n                </div>\n              </div>\n            </div>\n            \n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-8\">\n              <TabsList className=\"grid w-full grid-cols-3 p-1 bg-muted/50 backdrop-blur-sm rounded-xl border border-border/30 shadow-lg\" data-testid=\"tabs-list\">\n                <TabsTrigger \n                  value=\"pl\" \n                  className=\"flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10\" \n                  data-testid=\"tab-pl\"\n                >\n                  <Calculator className=\"h-5 w-5\" />\n                  <span className=\"hidden sm:inline\">Profit & Loss</span>\n                  <span className=\"sm:hidden\">P&L</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"bs\" \n                  className=\"flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10\" \n                  data-testid=\"tab-bs\"\n                >\n                  <BarChart3 className=\"h-5 w-5\" />\n                  <span className=\"hidden sm:inline\">Balance Sheet</span>\n                  <span className=\"sm:hidden\">BS</span>\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"cf\" \n                  className=\"flex items-center gap-3 px-6 py-4 text-sm font-medium rounded-lg transition-all duration-300 data-[state=active]:bg-primary data-[state=active]:text-primary-foreground data-[state=active]:shadow-lg hover:bg-muted-foreground/10\" \n                  data-testid=\"tab-cf\"\n                >\n                  <TrendingUp className=\"h-5 w-5\" />\n                  <span className=\"hidden sm:inline\">Cash Flow</span>\n                  <span className=\"sm:hidden\">CF</span>\n                </TabsTrigger>\n              </TabsList>\n\n            <TabsContent value=\"pl\" data-testid=\"tab-content-pl\">\n              <ProfitLossTable />\n            </TabsContent>\n\n            <TabsContent value=\"bs\" data-testid=\"tab-content-bs\">\n              <BalanceSheetTable />\n            </TabsContent>\n\n            <TabsContent value=\"cf\" data-testid=\"tab-content-cf\">\n              <CashFlowTable />\n            </TabsContent>\n          </Tabs>\n        </div>\n        </div>\n      </main>\n      </div>\n    </div>\n  );\n}","size_bytes":95392},"client/src/pages/FinancialReportsClean.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Tabs, TabsList, TabsTrigger, TabsContent } from \"@/components/ui/tabs\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { \n  FileText, \n  Filter, \n  Save, \n  Edit2, \n  Check, \n  X,\n  Calculator,\n  TrendingUp,\n  BarChart3,\n  AlertCircle,\n  DollarSign,\n  PieChart,\n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  Download,\n  FileDown,\n  Printer,\n  ChevronDown,\n  ChevronRight,\n  Plus,\n  Minus\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Navigation from \"@/components/Navigation\";\nimport heroBackground from \"@assets/generated_images/Gradient_mesh_hero_background_83768b02.png\";\nimport type { \n  ProfitLossStatement,\n  BalanceSheet,\n  CashFlowStatement \n} from \"@shared/schema\";\n\n// Clean constants - no object literals in JSX\nconst REVENUE_FIELDS = [\"totalRevenue\"];\nconst COGS_FIELDS = [\"costOfGoodsSold\"];\nconst OPERATING_EXPENSE_FIELDS = [\"operatingExpenses\"];\nconst OTHER_INCOME_FIELDS = [\"otherIncome\"];\nconst OTHER_EXPENSE_FIELDS = [\"otherExpenses\"];\nconst TAX_EXPENSE_FIELDS = [\"taxExpense\"];\n\nconst CURRENT_ASSET_FIELDS = [\"cash\", \"accountsReceivable\", \"inventory\"];\nconst NON_CURRENT_ASSET_FIELDS = [\"propertyPlantEquipment\", \"intangibleAssets\"];\nconst CURRENT_LIABILITY_FIELDS = [\"accountsPayable\", \"shortTermDebt\"];\nconst LONG_TERM_LIABILITY_FIELDS = [\"longTermDebt\"];\n\nconst OPERATING_CASH_FIELDS = [\"netIncome\", \"depreciation\", \"changeInWorkingCapital\"];\nconst INVESTING_CASH_FIELDS = [\"capitalExpenditures\", \"acquisitions\"];\nconst FINANCING_CASH_FIELDS = [\"debtIssuance\", \"debtRepayment\", \"dividendsPaid\"];\n\nexport default function FinancialReportsClean() {\n  const [selectedTopic, setSelectedTopic] = useState<string>(\"all\");\n  const [startPeriod, setStartPeriod] = useState<string>(\"none\");\n  const [endPeriod, setEndPeriod] = useState<string>(\"none\");\n  const [activeTab, setActiveTab] = useState<string>(\"pl\");\n  const [editingCells, setEditingCells] = useState<Record<string, any>>({});\n  const queryClient = useQueryClient();\n  const [validationErrors, setValidationErrors] = useState<Record<string, string>>({});\n  // Smart defaults - key sections that should be collapsed (true means collapsed)\n  const defaultCollapsedSections: Record<string, boolean> = {\n    'pl-income': true, // Revenue section collapsed by default\n    'pl-operatingExpenses': true, // Expenses collapsed\n    'pl-netIncome': false, // Net Income expanded by default\n    'bs-assets': false, // Assets expanded\n    'bs-liabilities': true, // Liabilities collapsed\n    'bs-equity': false, // Equity expanded\n    'cf-operating': false, // Operating activities expanded\n    'cf-investing': true, // Investing collapsed\n    'cf-financing': true // Financing collapsed\n  };\n\n  const [collapsedSections, setCollapsedSections] = useState<Record<string, boolean>>(() => defaultCollapsedSections);\n  const { toast } = useToast();\n\n  // Fetch financial reports data\n  const { data: plStatements = [], isLoading: plLoading } = useQuery({\n    queryKey: ['/api/profit-loss', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/profit-loss?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch P&L statements');\n      return response.json() as Promise<ProfitLossStatement[]>;\n    }\n  });\n\n  const { data: balanceSheets = [], isLoading: bsLoading } = useQuery({\n    queryKey: ['/api/balance-sheet', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/balance-sheet?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch balance sheets');\n      return response.json() as Promise<BalanceSheet[]>;\n    }\n  });\n\n  const { data: cashFlowStatements = [], isLoading: cfLoading } = useQuery({\n    queryKey: ['/api/cash-flow', selectedTopic, startPeriod, endPeriod],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (selectedTopic && selectedTopic !== 'all') params.append('topic', selectedTopic);\n      if (startPeriod && startPeriod !== 'none') params.append('startPeriod', startPeriod);\n      if (endPeriod && endPeriod !== 'none') params.append('endPeriod', endPeriod);\n      \n      const response = await fetch(`/api/cash-flow?${params}`);\n      if (!response.ok) throw new Error('Failed to fetch cash flow statements');\n      return response.json() as Promise<CashFlowStatement[]>;\n    }\n  });\n\n  // Get unique topics and periods for filtering\n  const uniqueTopics = useMemo(() => {\n    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];\n    return Array.from(new Set(allData.map(item => item.topic)));\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  const uniquePeriods = useMemo(() => {\n    const allData = [...plStatements, ...balanceSheets, ...cashFlowStatements];\n    const periods = Array.from(new Set(allData.map(item => item.period)));\n    return periods.sort((a, b) => {\n      if (a === 'none') return 1;\n      if (b === 'none') return -1;\n      return a.localeCompare(b);\n    }).reverse();\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  // Helper function for safe number parsing\n  const safeParseFloat = (value: string | undefined): number => {\n    if (!value) return 0;\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? 0 : parsed;\n  };\n\n  // Helper function for percentage change calculation\n  const calculatePercentageChange = (current: number, previous: number): number => {\n    if (previous === 0) return 0;\n    return ((current - previous) / Math.abs(previous)) * 100;\n  };\n\n  // Helper functions for collapsible sections\n  const toggleSection = (sectionKey: string) => {\n    setCollapsedSections(prev => ({\n      ...prev,\n      [sectionKey]: !prev[sectionKey]\n    }));\n  };\n\n  const isCollapsed = (sectionKey: string) => {\n    // Use smart defaults if section hasn't been explicitly set\n    return collapsedSections[sectionKey] ?? defaultCollapsedSections[sectionKey] ?? true;\n  };\n\n  // Helper function to calculate section totals\n  const calculateSectionTotals = (statements: any[], fields: string[]) => {\n    return statements.map(statement => {\n      const total = fields.reduce((sum, field) => {\n        return sum + safeParseFloat(statement[field]);\n      }, 0);\n      return total;\n    });\n  };\n\n  // Export helper functions\n  const exportToCSV = (data: any[], fileName: string, reportType: string) => {\n    try {\n      let csvContent = '';\n      \n      if (reportType === 'pl') {\n        csvContent = 'Topic,Period,Total Revenue,Cost of Goods Sold,Gross Profit,Operating Expenses,Operating Income,Other Income,Other Expenses,Net Income Before Tax,Tax Expense,Net Income\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.totalRevenue}\",\"${item.costOfGoodsSold}\",\"${item.grossProfit}\",\"${item.operatingExpenses}\",\"${item.operatingIncome}\",\"${item.otherIncome}\",\"${item.otherExpenses}\",\"${item.netIncomeBeforeTax}\",\"${item.taxExpense}\",\"${item.netIncome}\"\\n`;\n        });\n      } else if (reportType === 'bs') {\n        csvContent = 'Topic,Period,Current Assets,Cash,Accounts Receivable,Inventory,Non-Current Assets,Property Plant Equipment,Intangible Assets,Total Assets,Current Liabilities,Accounts Payable,Short Term Debt,Long Term Liabilities,Long Term Debt,Total Liabilities,Shareholders Equity,Retained Earnings\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.currentAssets}\",\"${item.cash}\",\"${item.accountsReceivable}\",\"${item.inventory}\",\"${item.nonCurrentAssets}\",\"${item.propertyPlantEquipment}\",\"${item.intangibleAssets}\",\"${item.totalAssets}\",\"${item.currentLiabilities}\",\"${item.accountsPayable}\",\"${item.shortTermDebt}\",\"${item.longTermLiabilities}\",\"${item.longTermDebt}\",\"${item.totalLiabilities}\",\"${item.shareholdersEquity}\",\"${item.retainedEarnings}\"\\n`;\n        });\n      } else if (reportType === 'cf') {\n        csvContent = 'Topic,Period,Operating Cash Flow,Net Income,Depreciation,Change in Working Capital,Investing Cash Flow,Capital Expenditures,Acquisitions,Financing Cash Flow,Debt Issuance,Debt Repayment,Dividends Paid,Net Change in Cash,Beginning Cash Balance,Ending Cash Balance\\n';\n        data.forEach(item => {\n          csvContent += `\"${item.topic}\",\"${item.period}\",\"${item.operatingCashFlow}\",\"${item.netIncome}\",\"${item.depreciation}\",\"${item.changeInWorkingCapital}\",\"${item.investingCashFlow}\",\"${item.capitalExpenditures}\",\"${item.acquisitions}\",\"${item.financingCashFlow}\",\"${item.debtIssuance}\",\"${item.debtRepayment}\",\"${item.dividendsPaid}\",\"${item.netChangeInCash}\",\"${item.beginningCashBalance}\",\"${item.endingCashBalance}\"\\n`;\n        });\n      }\n\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n      const link = document.createElement('a');\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', fileName);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({ description: `${fileName} exported successfully` });\n    } catch (error) {\n      console.error('Export error:', error);\n      toast({ description: 'Export failed. Please try again.', variant: 'destructive' });\n    }\n  };\n\n  const exportToPDF = (reportType: string) => {\n    try {\n      const activeTabElement = document.querySelector(`[data-testid=\"tab-content-${reportType}\"]`);\n      if (!activeTabElement) {\n        toast({ description: 'No data to export', variant: 'destructive' });\n        return;\n      }\n\n      const printWindow = window.open('', '_blank');\n      if (!printWindow) {\n        toast({ description: 'Popup blocked. Please allow popups and try again.', variant: 'destructive' });\n        return;\n      }\n\n      const reportTitle = reportType === 'pl' ? 'Profit & Loss Statement' : \n                         reportType === 'bs' ? 'Balance Sheet' : 'Cash Flow Statement';\n\n      printWindow.document.write(`\n        <html>\n          <head>\n            <title>${reportTitle}</title>\n            <style>\n              body { font-family: Arial, sans-serif; margin: 20px; }\n              h1 { color: #333; text-align: center; }\n              table { width: 100%; border-collapse: collapse; margin: 20px 0; }\n              th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n              th { background-color: #f2f2f2; font-weight: bold; }\n              .number { text-align: right; }\n              @media print {\n                body { margin: 0; }\n                .no-print { display: none; }\n              }\n            </style>\n          </head>\n          <body>\n            <h1>${reportTitle}</h1>\n            <div>${activeTabElement.innerHTML}</div>\n            <script>\n              window.onload = function() {\n                const editButtons = document.querySelectorAll('button');\n                editButtons.forEach(btn => btn.style.display = 'none');\n                window.print();\n                window.close();\n              };\n            </script>\n          </body>\n        </html>\n      `);\n      \n      printWindow.document.close();\n      \n      toast({ description: `${reportTitle} PDF export initiated` });\n    } catch (error) {\n      console.error('PDF export error:', error);\n      toast({ description: 'PDF export failed. Please try again.', variant: 'destructive' });\n    }\n  };\n\n  // Calculate key financial metrics\n  const financialMetrics = useMemo(() => {\n    const plPeriods = plStatements.map(pl => pl.period).sort().reverse();\n    const bsPeriods = balanceSheets.map(bs => bs.period).sort().reverse();\n    const cfPeriods = cashFlowStatements.map(cf => cf.period).sort().reverse();\n    \n    const latestPLPeriod = plPeriods[0] || '';\n    const previousPLPeriod = plPeriods[1] || '';\n    const latestBSPeriod = bsPeriods[0] || '';\n    const previousBSPeriod = bsPeriods[1] || '';\n    const latestCFPeriod = cfPeriods[0] || '';\n    const previousCFPeriod = cfPeriods[1] || '';\n    \n    const latestPL = plStatements.find(pl => pl.period === latestPLPeriod);\n    const previousPL = plStatements.find(pl => pl.period === previousPLPeriod);\n    \n    const currentRevenue = latestPL ? safeParseFloat(latestPL.totalRevenue) : 0;\n    const currentExpenses = latestPL ? \n      safeParseFloat(latestPL.costOfGoodsSold) + \n      safeParseFloat(latestPL.operatingExpenses) + \n      safeParseFloat(latestPL.otherExpenses) + \n      safeParseFloat(latestPL.taxExpense) : 0;\n    const currentNetIncome = latestPL ? safeParseFloat(latestPL.netIncome) : 0;\n    \n    const previousRevenue = previousPL ? safeParseFloat(previousPL.totalRevenue) : 0;\n    const previousExpenses = previousPL ? \n      safeParseFloat(previousPL.costOfGoodsSold) + \n      safeParseFloat(previousPL.operatingExpenses) + \n      safeParseFloat(previousPL.otherExpenses) + \n      safeParseFloat(previousPL.taxExpense) : 0;\n    const previousNetIncome = previousPL ? safeParseFloat(previousPL.netIncome) : 0;\n    \n    const latestBS = balanceSheets.find(bs => bs.period === latestBSPeriod);\n    const previousBS = balanceSheets.find(bs => bs.period === previousBSPeriod);\n    \n    const currentTotalAssets = latestBS ? safeParseFloat(latestBS.totalAssets) : 0;\n    const currentCurrentAssets = latestBS ? safeParseFloat(latestBS.currentAssets) : 0;\n    const currentCurrentLiabilities = latestBS ? safeParseFloat(latestBS.currentLiabilities) : 0;\n    const workingCapital = currentCurrentAssets - currentCurrentLiabilities;\n    \n    const previousTotalAssets = previousBS ? safeParseFloat(previousBS.totalAssets) : 0;\n    const previousCurrentAssets = previousBS ? safeParseFloat(previousBS.currentAssets) : 0;\n    const previousCurrentLiabilities = previousBS ? safeParseFloat(previousBS.currentLiabilities) : 0;\n    const previousWorkingCapital = previousCurrentAssets - previousCurrentLiabilities;\n    \n    const latestCF = cashFlowStatements.find(cf => cf.period === latestCFPeriod);\n    const previousCF = cashFlowStatements.find(cf => cf.period === previousCFPeriod);\n    \n    const operatingCashFlow = latestCF ? safeParseFloat(latestCF.operatingCashFlow) : 0;\n    const previousOperatingCashFlow = previousCF ? safeParseFloat(previousCF.operatingCashFlow) : 0;\n    \n    const revenueChange = calculatePercentageChange(currentRevenue, previousRevenue);\n    const expenseChange = calculatePercentageChange(currentExpenses, previousExpenses);\n    const netIncomeChange = calculatePercentageChange(currentNetIncome, previousNetIncome);\n    const assetsChange = calculatePercentageChange(currentTotalAssets, previousTotalAssets);\n    const workingCapitalChange = calculatePercentageChange(workingCapital, previousWorkingCapital);\n    const operatingCashFlowChange = calculatePercentageChange(operatingCashFlow, previousOperatingCashFlow);\n    \n    return {\n      currentRevenue,\n      currentExpenses,\n      currentNetIncome,\n      currentTotalAssets,\n      workingCapital,\n      operatingCashFlow,\n      revenueChange,\n      expenseChange,\n      netIncomeChange,\n      assetsChange,\n      workingCapitalChange,\n      operatingCashFlowChange,\n      latestPLPeriod,\n      latestBSPeriod,\n      latestCFPeriod,\n      hasPreviousPL: !!previousPL,\n      hasPreviousBS: !!previousBS,\n      hasPreviousCF: !!previousCF\n    };\n  }, [plStatements, balanceSheets, cashFlowStatements]);\n\n  // Date range validation\n  const validateDateRange = (start: string, end: string): boolean => {\n    if (start === 'none' || end === 'none') return true;\n    if (start > end) {\n      toast({\n        description: \"Start period must be before or equal to end period\",\n        variant: \"destructive\"\n      });\n      return false;\n    }\n    return true;\n  };\n\n  const handleStartPeriodChange = (value: string) => {\n    if (validateDateRange(value, endPeriod)) {\n      setStartPeriod(value);\n    }\n  };\n\n  const handleEndPeriodChange = (value: string) => {\n    if (validateDateRange(startPeriod, value)) {\n      setEndPeriod(value);\n    }\n  };\n\n  // Validation helper function\n  const validateNumericInput = (value: string): string | null => {\n    if (value.trim() === '') return 'Value is required';\n    \n    const num = parseFloat(value);\n    if (isNaN(num)) return 'Must be a valid number';\n    \n    if (value.includes('.') && value.split('.')[1].length > 2) {\n      return 'Maximum 2 decimal places allowed';\n    }\n    \n    return null;\n  };\n\n  // Update mutations\n  const updatePLMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/profit-loss/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/profit-loss'] });\n      toast({ description: \"Profit & Loss statement updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('P&L update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  const updateBSMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/balance-sheet/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/balance-sheet'] });\n      toast({ description: \"Balance sheet updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('Balance sheet update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  const updateCFMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const response = await apiRequest('PUT', `/api/cash-flow/${id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cash-flow'] });\n      toast({ description: \"Cash flow statement updated successfully\" });\n    },\n    onError: (error: any) => {\n      console.error('Cash flow update error:', error);\n      let errorMessage = \"An error occurred while updating\";\n      \n      if (error.message.includes('400')) {\n        errorMessage = \"Invalid data. Please check the entered values\";\n      } else if (error.message.includes('404')) {\n        errorMessage = \"Data to be updated not found\";\n      }\n      \n      toast({ description: errorMessage, variant: \"destructive\" });\n    }\n  });\n\n  // Edit cell functions\n  const startEditing = (cellKey: string, currentValue: string) => {\n    setEditingCells(prev => ({ ...prev, [cellKey]: currentValue }));\n  };\n\n  const saveEdit = async (cellKey: string, itemId: string, field: string, reportType: 'pl' | 'bs' | 'cf') => {\n    const newValue = editingCells[cellKey];\n    \n    const validationError = validateNumericInput(newValue);\n    if (validationError) {\n      setValidationErrors(prev => ({ ...prev, [cellKey]: validationError }));\n      toast({ \n        description: validationError, \n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    setValidationErrors(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n    \n    try {\n      if (reportType === 'pl') {\n        await updatePLMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      } else if (reportType === 'bs') {\n        await updateBSMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      } else if (reportType === 'cf') {\n        await updateCFMutation.mutateAsync({ \n          id: itemId, \n          data: { [field]: newValue } \n        });\n      }\n\n      setEditingCells(prev => {\n        const newState = { ...prev };\n        delete newState[cellKey];\n        return newState;\n      });\n    } catch (error) {\n      console.error('Save edit error:', error);\n    }\n  };\n\n  const cancelEdit = (cellKey: string) => {\n    setEditingCells(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n    \n    setValidationErrors(prev => {\n      const newState = { ...prev };\n      delete newState[cellKey];\n      return newState;\n    });\n  };\n\n  // Format number for display\n  const formatNumber = (value: string | number) => {\n    const num = typeof value === 'string' ? parseFloat(value) : value;\n    return new Intl.NumberFormat('en-US', {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    }).format(num);\n  };\n\n  // Editable cell component\n  const EditableCell = ({ \n    value, \n    itemId, \n    field, \n    reportType, \n    isEditable = true, \n    className = \"\" \n  }: {\n    value: string;\n    itemId: string;\n    field: string;\n    reportType: 'pl' | 'bs' | 'cf';\n    isEditable?: boolean;\n    className?: string;\n  }) => {\n    const cellKey = `${itemId}-${field}`;\n    const isEditing = cellKey in editingCells;\n    const hasError = cellKey in validationErrors;\n    const isSaving = updatePLMutation.isPending || updateBSMutation.isPending || updateCFMutation.isPending;\n\n    if (!isEditable) {\n      return (\n        <TableCell className={`text-right font-medium text-base py-4 px-6 ${className}`} data-testid={`cell-readonly-${field}`}>\n          <span className=\"text-foreground\">{formatNumber(value)}</span>\n        </TableCell>\n      );\n    }\n\n    if (isEditing) {\n      return (\n        <TableCell className=\"text-right p-2\" data-testid={`cell-editing-${field}`}>\n          <div className=\"flex flex-col gap-1\">\n            <div className=\"flex items-center gap-1\">\n              <Input\n                value={editingCells[cellKey]}\n                onChange={(e) => {\n                  setEditingCells(prev => ({ ...prev, [cellKey]: e.target.value }));\n                  if (hasError) {\n                    setValidationErrors(prev => {\n                      const newState = { ...prev };\n                      delete newState[cellKey];\n                      return newState;\n                    });\n                  }\n                }}\n                className={`h-8 text-right ${hasError ? 'border-red-500 focus:border-red-500' : ''}`}\n                type=\"number\"\n                step=\"0.01\"\n                disabled={isSaving}\n                data-testid={`input-edit-${field}`}\n              />\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => saveEdit(cellKey, itemId, field, reportType)}\n                className=\"h-8 w-8 p-0\"\n                disabled={isSaving}\n                data-testid={`button-save-${field}`}\n              >\n                {isSaving ? (\n                  <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-green-600 border-t-transparent\" />\n                ) : (\n                  <Check className=\"h-4 w-4 text-green-600\" />\n                )}\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"ghost\"\n                onClick={() => cancelEdit(cellKey)}\n                className=\"h-8 w-8 p-0\"\n                disabled={isSaving}\n                data-testid={`button-cancel-${field}`}\n              >\n                <X className=\"h-4 w-4 text-red-600\" />\n              </Button>\n            </div>\n            {hasError && (\n              <div className=\"flex items-center gap-1 text-xs text-red-600\">\n                <AlertCircle className=\"h-3 w-3\" />\n                <span>{validationErrors[cellKey]}</span>\n              </div>\n            )}\n          </div>\n        </TableCell>\n      );\n    }\n\n    return (\n      <TableCell \n        className={`text-right cursor-pointer hover:bg-muted/50 ${className}`}\n        onClick={() => startEditing(cellKey, value)}\n        data-testid={`cell-editable-${field}`}\n      >\n        <div className=\"flex items-center justify-end gap-2\">\n          {formatNumber(value)}\n          <Edit2 className=\"h-3 w-3 opacity-50\" />\n        </div>\n      </TableCell>\n    );\n  };\n\n  // Clean CollapsibleTableSection Component - NO OBJECT LITERALS IN JSX\n  interface CollapsibleSectionProps {\n    title: string;\n    sectionKey: string;\n    children: React.ReactNode;\n    statements: any[];\n    className?: string;\n    isSubSection?: boolean;\n    showToggle?: boolean;\n    prefix?: string;\n    calculateTotal?: boolean;\n    totalFields?: string[];\n  }\n\n  const CollapsibleTableSection = ({ \n    title, \n    sectionKey, \n    children, \n    statements,\n    className = \"\",\n    isSubSection = false,\n    showToggle = true,\n    prefix = \"\",\n    calculateTotal = false,\n    totalFields = []\n  }: CollapsibleSectionProps) => {\n    const namespacedKey = prefix ? `${prefix}-${sectionKey}` : sectionKey;\n    const collapsed = isCollapsed(namespacedKey);\n    const indentClass = isSubSection ? \"pl-8\" : \"pl-6\";\n    \n    // Calculate totals if needed - CLEAN: No object literals here\n    const sectionTotals = calculateTotal && totalFields.length > 0 \n      ? calculateSectionTotals(statements, totalFields)\n      : [];\n    \n    return (\n      <>\n        <TableRow \n          className={`${className} ${collapsed ? 'border-b border-border/30' : ''}`}\n        >\n          <TableCell \n            className={`font-bold sticky left-0 bg-muted/60 z-10 border-r border-border/50 py-3 px-4 text-foreground ${indentClass}`}\n            onClick={showToggle ? () => toggleSection(namespacedKey) : undefined}\n            style={{ cursor: showToggle ? 'pointer' : 'default' }}\n            data-testid={`section-${sectionKey}`}\n            role={showToggle ? \"button\" : undefined}\n            aria-expanded={showToggle ? !collapsed : undefined}\n            aria-controls={showToggle ? `section-content-${namespacedKey}` : undefined}\n          >\n            <div className=\"flex items-center gap-2\">\n              {showToggle && (\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-6 w-6 p-0 hover:bg-muted/80\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    toggleSection(namespacedKey);\n                  }}\n                  data-testid={`toggle-${sectionKey}`}\n                  aria-label={`${collapsed ? 'Expand' : 'Collapse'} ${title} section`}\n                >\n                  {collapsed ? (\n                    <Plus className=\"h-4 w-4 text-muted-foreground\" />\n                  ) : (\n                    <Minus className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </Button>\n              )}\n              <span className={isSubSection ? \"text-sm\" : \"text-base\"}>{title}</span>\n            </div>\n          </TableCell>\n          {statements.map((statement, index) => {\n            const total = calculateTotal && totalFields.length > 0 ? sectionTotals[index] : 0;\n            const displayValue = calculateTotal && totalFields.length > 0 \n              ? (total === 0 ? \"—\" : formatNumber(total))\n              : \"—\";\n\n            return (\n              <TableCell \n                key={`${statement.id}-${sectionKey}`}\n                className=\"text-right font-medium bg-muted/40 py-3 px-6\"\n                data-testid={`total-${namespacedKey}-${statement.period}`}\n              >\n                <span className=\"text-foreground\">{displayValue}</span>\n              </TableCell>\n            );\n          })}\n        </TableRow>\n        {!collapsed && (\n          <div id={`section-content-${namespacedKey}`}>\n            {children}\n          </div>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div \n      className=\"min-h-screen bg-background\"\n      style={{\n        backgroundImage: `url(${heroBackground})`,\n        backgroundSize: 'cover',\n        backgroundPosition: 'center',\n        backgroundAttachment: 'fixed'\n      }}\n    >\n      <div className=\"absolute inset-0 bg-background/95 backdrop-blur-sm\" />\n      \n      <div className=\"relative z-10\">\n        <Navigation />\n        \n        <div className=\"container mx-auto px-4 py-8\">\n          {/* Enhanced Header Section */}\n          <div className=\"mb-8\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <div>\n                <h1 className=\"text-4xl font-bold text-foreground mb-3 flex items-center gap-3\" data-testid=\"title-financial-reports\">\n                  <BarChart3 className=\"h-10 w-10 text-primary\" />\n                  Financial Reports\n                </h1>\n                <p className=\"text-xl text-muted-foreground mb-4\" data-testid=\"text-subtitle\">\n                  Comprehensive financial statements and analysis\n                </p>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Activity className=\"h-4 w-4\" />\n                  <span>Click on section headers to expand/collapse details</span>\n                </div>\n              </div>\n            </div>\n            \n            {/* Quick Overview Summary */}\n            {!plLoading && !bsLoading && !cfLoading && (plStatements.length > 0 || balanceSheets.length > 0 || cashFlowStatements.length > 0) && (\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n                {/* Revenue Overview */}\n                {plStatements.length > 0 && (\n                  <Card className=\"border-border/50 bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 backdrop-blur-sm\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <div className=\"p-2 bg-green-100 dark:bg-green-900/50 rounded-lg\">\n                          <TrendingUp className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Latest Revenue</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {plStatements[0]?.totalRevenue ? `${formatNumber(plStatements[0].totalRevenue)}` : '—'}\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">{plStatements[0]?.period || 'Latest Period'}</p>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                {/* Net Income Overview */}\n                {plStatements.length > 0 && (\n                  <Card className=\"border-border/50 bg-gradient-to-br from-blue-50 to-indigo-50 dark:from-blue-950/30 dark:to-indigo-950/30 backdrop-blur-sm\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <div className=\"p-2 bg-blue-100 dark:bg-blue-900/50 rounded-lg\">\n                          <DollarSign className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Net Income</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {plStatements[0]?.netIncome ? `${formatNumber(plStatements[0].netIncome)}` : '—'}\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">{plStatements[0]?.period || 'Latest Period'}</p>\n                    </CardContent>\n                  </Card>\n                )}\n                \n                {/* Cash Balance Overview */}\n                {balanceSheets.length > 0 && (\n                  <Card className=\"border-border/50 bg-gradient-to-br from-purple-50 to-violet-50 dark:from-purple-950/30 dark:to-violet-950/30 backdrop-blur-sm\">\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center gap-3 mb-2\">\n                        <div className=\"p-2 bg-purple-100 dark:bg-purple-900/50 rounded-lg\">\n                          <PieChart className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n                        </div>\n                        <div>\n                          <p className=\"text-sm font-medium text-muted-foreground\">Cash Balance</p>\n                          <p className=\"text-2xl font-bold text-foreground\">\n                            {balanceSheets[0]?.cash ? `${formatNumber(balanceSheets[0].cash)}` : '—'}\n                          </p>\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-muted-foreground\">{balanceSheets[0]?.period || 'Latest Period'}</p>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n          </div>\n\n          {/* Enhanced Filters Section */}\n          <Card className=\"mb-8 border-border/50 bg-card/95 backdrop-blur-sm shadow-lg\" data-testid=\"card-filters\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-foreground text-lg\" data-testid=\"title-filters\">\n                <Filter className=\"h-5 w-5 text-primary\" />\n                Filter Reports\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs\">Optional</Badge>\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground mt-2\">Filter by company, time period, or view all data</p>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"topic-select\" className=\"text-sm font-medium text-foreground\">\n                    Topic\n                  </label>\n                  <Select value={selectedTopic} onValueChange={setSelectedTopic}>\n                    <SelectTrigger id=\"topic-select\" data-testid=\"select-topic\">\n                      <SelectValue placeholder=\"Select topic\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\" data-testid=\"option-topic-all\">All Topics</SelectItem>\n                      {uniqueTopics.map(topic => (\n                        <SelectItem \n                          key={topic} \n                          value={topic} \n                          data-testid={`option-topic-${topic.replace(/\\s+/g, '-').toLowerCase()}`}\n                        >\n                          {topic}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"start-period-select\" className=\"text-sm font-medium text-foreground\">\n                    Start Period\n                  </label>\n                  <Select value={startPeriod} onValueChange={handleStartPeriodChange}>\n                    <SelectTrigger id=\"start-period-select\" data-testid=\"select-start-period\">\n                      <SelectValue placeholder=\"Start period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\" data-testid=\"option-start-period-none\">No start limit</SelectItem>\n                      {uniquePeriods.map(period => (\n                        <SelectItem \n                          key={period} \n                          value={period} \n                          data-testid={`option-start-period-${period}`}\n                        >\n                          {period}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <label htmlFor=\"end-period-select\" className=\"text-sm font-medium text-foreground\">\n                    End Period\n                  </label>\n                  <Select value={endPeriod} onValueChange={handleEndPeriodChange}>\n                    <SelectTrigger id=\"end-period-select\" data-testid=\"select-end-period\">\n                      <SelectValue placeholder=\"End period\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\" data-testid=\"option-end-period-none\">No end limit</SelectItem>\n                      {uniquePeriods.map(period => (\n                        <SelectItem \n                          key={period} \n                          value={period} \n                          data-testid={`option-end-period-${period}`}\n                        >\n                          {period}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Financial Metrics Overview */}\n          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8\">\n            {/* Revenue Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-revenue\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Revenue</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-revenue\">\n                      ${formatNumber(financialMetrics.currentRevenue)}\n                    </p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.revenueChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-red-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.revenueChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                          data-testid=\"change-revenue\"\n                        >\n                          {financialMetrics.revenueChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Expenses Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-expenses\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Expenses</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-expenses\">\n                      ${formatNumber(financialMetrics.currentExpenses)}\n                    </p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.expenseChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-red-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-green-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.expenseChange >= 0 ? 'text-red-600' : 'text-green-600'}`}\n                          data-testid=\"change-expenses\"\n                        >\n                          {financialMetrics.expenseChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <TrendingUp className=\"h-8 w-8 text-red-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Net Income Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-net-income\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Net Income</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-net-income\">\n                      ${formatNumber(financialMetrics.currentNetIncome)}\n                    </p>\n                    {financialMetrics.hasPreviousPL && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.netIncomeChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-red-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.netIncomeChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                          data-testid=\"change-net-income\"\n                        >\n                          {financialMetrics.netIncomeChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <BarChart3 className=\"h-8 w-8 text-green-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Total Assets Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-total-assets\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Total Assets</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-total-assets\">\n                      ${formatNumber(financialMetrics.currentTotalAssets)}\n                    </p>\n                    {financialMetrics.hasPreviousBS && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.assetsChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-red-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.assetsChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                          data-testid=\"change-total-assets\"\n                        >\n                          {financialMetrics.assetsChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <PieChart className=\"h-8 w-8 text-purple-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Working Capital Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-working-capital\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Working Capital</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-working-capital\">\n                      ${formatNumber(financialMetrics.workingCapital)}\n                    </p>\n                    {financialMetrics.hasPreviousBS && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.workingCapitalChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-red-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.workingCapitalChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                          data-testid=\"change-working-capital\"\n                        >\n                          {financialMetrics.workingCapitalChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <Calculator className=\"h-8 w-8 text-orange-600\" />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Operating Cash Flow Metric */}\n            <Card className=\"border-border/50 bg-card/90 backdrop-blur-sm\" data-testid=\"metric-operating-cash-flow\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Operating Cash Flow</p>\n                    <p className=\"text-lg font-semibold text-foreground\" data-testid=\"value-operating-cash-flow\">\n                      ${formatNumber(financialMetrics.operatingCashFlow)}\n                    </p>\n                    {financialMetrics.hasPreviousCF && (\n                      <div className=\"flex items-center gap-1 mt-1\">\n                        {financialMetrics.operatingCashFlowChange >= 0 ? (\n                          <ArrowUpRight className=\"h-3 w-3 text-green-600\" />\n                        ) : (\n                          <ArrowDownRight className=\"h-3 w-3 text-red-600\" />\n                        )}\n                        <span \n                          className={`text-xs ${financialMetrics.operatingCashFlowChange >= 0 ? 'text-green-600' : 'text-red-600'}`}\n                          data-testid=\"change-operating-cash-flow\"\n                        >\n                          {financialMetrics.operatingCashFlowChange.toFixed(1)}%\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                  <Activity className=\"h-8 w-8 text-cyan-600\" />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Enhanced Main Reports Tabs */}\n          <Card className=\"border-border/50 bg-card/95 backdrop-blur-sm shadow-lg\" data-testid=\"card-main-reports\">\n            <CardHeader className=\"border-b border-border/50\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n                <CardTitle className=\"flex items-center gap-2 text-foreground text-xl\" data-testid=\"title-reports\">\n                  <FileText className=\"h-5 w-5 text-primary\" />\n                  Financial Statements\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground mt-2\">Detailed financial data organized by statement type</p>\n                \n                {/* Export Controls */}\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => exportToCSV(\n                      activeTab === 'pl' ? plStatements : \n                      activeTab === 'bs' ? balanceSheets : cashFlowStatements,\n                      `${activeTab === 'pl' ? 'Profit_Loss' : \n                        activeTab === 'bs' ? 'Balance_Sheet' : 'Cash_Flow'}_${new Date().toISOString().split('T')[0]}.csv`,\n                      activeTab\n                    )}\n                    className=\"text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-export-csv\"\n                  >\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Export CSV\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => exportToPDF(activeTab)}\n                    className=\"text-muted-foreground hover:text-foreground\"\n                    data-testid=\"button-export-pdf\"\n                  >\n                    <FileDown className=\"h-4 w-4 mr-2\" />\n                    Export PDF\n                  </Button>\n                </div>\n              </div>\n            </CardHeader>\n            \n            <CardContent className=\"p-0\">\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                <div className=\"border-b border-border/50\">\n                  <TabsList className=\"grid w-full grid-cols-3 bg-transparent h-auto p-1\" data-testid=\"tabs-list\">\n                    <TabsTrigger \n                      value=\"pl\" \n                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-6 py-3 font-medium\"\n                      data-testid=\"tab-profit-loss\"\n                    >\n                      Profit & Loss\n                    </TabsTrigger>\n                    <TabsTrigger \n                      value=\"bs\" \n                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-6 py-3 font-medium\"\n                      data-testid=\"tab-balance-sheet\"\n                    >\n                      Balance Sheet\n                    </TabsTrigger>\n                    <TabsTrigger \n                      value=\"cf\" \n                      className=\"data-[state=active]:bg-primary data-[state=active]:text-primary-foreground px-6 py-3 font-medium\"\n                      data-testid=\"tab-cash-flow\"\n                    >\n                      Cash Flow\n                    </TabsTrigger>\n                  </TabsList>\n                </div>\n\n                {/* Profit & Loss Tab */}\n                <TabsContent value=\"pl\" className=\"m-0\" data-testid=\"tab-content-pl\">\n                  {plLoading ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"loading-profit-loss\">\n                      <div className=\"text-center\">\n                        <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent mx-auto mb-2\" />\n                        <p className=\"text-muted-foreground\">Loading Profit & Loss statements...</p>\n                      </div>\n                    </div>\n                  ) : plStatements.length === 0 ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"empty-profit-loss\">\n                      <div className=\"text-center\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-lg font-medium text-foreground mb-2\">No Profit & Loss Data</p>\n                        <p className=\"text-muted-foreground\">No statements found for the selected filters.</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-auto max-h-[800px]\" data-testid=\"table-container-profit-loss\">\n                      <Table className=\"relative\">\n                        <TableHeader className=\"sticky top-0 z-20\">\n                          <TableRow className=\"bg-muted/80 border-border/50\">\n                            <TableHead className=\"sticky left-0 bg-muted/80 z-30 border-r border-border/50 font-bold text-foreground py-4 px-6 min-w-[200px]\">\n                              Account / Period\n                            </TableHead>\n                            {plStatements.map(statement => (\n                              <TableHead \n                                key={statement.id} \n                                className=\"text-center font-bold text-foreground py-4 px-6 min-w-[150px]\"\n                                data-testid={`header-period-${statement.period}`}\n                              >\n                                <div>\n                                  <div className=\"text-sm\">{statement.topic}</div>\n                                  <div className=\"text-lg\">{statement.period}</div>\n                                </div>\n                              </TableHead>\n                            ))}\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {/* Revenue Section */}\n                          <CollapsibleTableSection\n                            title=\"Revenue\"\n                            sectionKey=\"revenue\"\n                            statements={plStatements}\n                            className=\"bg-blue-50/50 dark:bg-blue-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={REVENUE_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Total Revenue\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-totalRevenue`}\n                                  value={statement.totalRevenue}\n                                  itemId={statement.id}\n                                  field=\"totalRevenue\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Cost of Goods Sold Section */}\n                          <CollapsibleTableSection\n                            title=\"Cost of Goods Sold\"\n                            sectionKey=\"cogs\"\n                            statements={plStatements}\n                            className=\"bg-red-50/50 dark:bg-red-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={COGS_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Cost of Goods Sold\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-costOfGoodsSold`}\n                                  value={statement.costOfGoodsSold}\n                                  itemId={statement.id}\n                                  field=\"costOfGoodsSold\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Gross Profit */}\n                          <TableRow className=\"bg-green-50/50 dark:bg-green-950/20 border-t-2 border-green-300 dark:border-green-700\">\n                            <TableCell className=\"sticky left-0 bg-green-100/80 dark:bg-green-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Gross Profit\n                            </TableCell>\n                            {plStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-grossProfit`}\n                                value={statement.grossProfit}\n                                itemId={statement.id}\n                                field=\"grossProfit\"\n                                reportType=\"pl\"\n                                isEditable={false}\n                                className=\"bg-green-100/60 dark:bg-green-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Operating Expenses Section */}\n                          <CollapsibleTableSection\n                            title=\"Operating Expenses\"\n                            sectionKey=\"operatingExpenses\"\n                            statements={plStatements}\n                            className=\"bg-orange-50/50 dark:bg-orange-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={OPERATING_EXPENSE_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Operating Expenses\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-operatingExpenses`}\n                                  value={statement.operatingExpenses}\n                                  itemId={statement.id}\n                                  field=\"operatingExpenses\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Operating Income */}\n                          <TableRow className=\"bg-blue-50/50 dark:bg-blue-950/20 border-t-2 border-blue-300 dark:border-blue-700\">\n                            <TableCell className=\"sticky left-0 bg-blue-100/80 dark:bg-blue-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Operating Income\n                            </TableCell>\n                            {plStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-operatingIncome`}\n                                value={statement.operatingIncome}\n                                itemId={statement.id}\n                                field=\"operatingIncome\"\n                                reportType=\"pl\"\n                                isEditable={false}\n                                className=\"bg-blue-100/60 dark:bg-blue-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Other Income Section */}\n                          <CollapsibleTableSection\n                            title=\"Other Income\"\n                            sectionKey=\"otherIncome\"\n                            statements={plStatements}\n                            className=\"bg-green-50/50 dark:bg-green-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={OTHER_INCOME_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Other Income\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-otherIncome`}\n                                  value={statement.otherIncome}\n                                  itemId={statement.id}\n                                  field=\"otherIncome\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Other Expenses Section */}\n                          <CollapsibleTableSection\n                            title=\"Other Expenses\"\n                            sectionKey=\"otherExpenses\"\n                            statements={plStatements}\n                            className=\"bg-red-50/50 dark:bg-red-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={OTHER_EXPENSE_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Other Expenses\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-otherExpenses`}\n                                  value={statement.otherExpenses}\n                                  itemId={statement.id}\n                                  field=\"otherExpenses\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Net Income Before Tax */}\n                          <TableRow className=\"bg-purple-50/50 dark:bg-purple-950/20 border-t-2 border-purple-300 dark:border-purple-700\">\n                            <TableCell className=\"sticky left-0 bg-purple-100/80 dark:bg-purple-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Net Income Before Tax\n                            </TableCell>\n                            {plStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-netIncomeBeforeTax`}\n                                value={statement.netIncomeBeforeTax}\n                                itemId={statement.id}\n                                field=\"netIncomeBeforeTax\"\n                                reportType=\"pl\"\n                                isEditable={false}\n                                className=\"bg-purple-100/60 dark:bg-purple-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Tax Expense Section */}\n                          <CollapsibleTableSection\n                            title=\"Tax Expense\"\n                            sectionKey=\"taxExpense\"\n                            statements={plStatements}\n                            className=\"bg-yellow-50/50 dark:bg-yellow-950/20\"\n                            prefix=\"pl\"\n                            calculateTotal={true}\n                            totalFields={TAX_EXPENSE_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Tax Expense\n                              </TableCell>\n                              {plStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-taxExpense`}\n                                  value={statement.taxExpense}\n                                  itemId={statement.id}\n                                  field=\"taxExpense\"\n                                  reportType=\"pl\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Net Income */}\n                          <TableRow className=\"bg-green-100/80 dark:bg-green-900/40 border-t-4 border-green-500\">\n                            <TableCell className=\"sticky left-0 bg-green-200/80 dark:bg-green-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              Net Income\n                            </TableCell>\n                            {plStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-netIncome`}\n                                value={statement.netIncome}\n                                itemId={statement.id}\n                                field=\"netIncome\"\n                                reportType=\"pl\"\n                                isEditable={false}\n                                className=\"bg-green-200/60 dark:bg-green-800/40 font-bold text-lg\"\n                              />\n                            ))}\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </TabsContent>\n\n                {/* Balance Sheet Tab */}\n                <TabsContent value=\"bs\" className=\"m-0\" data-testid=\"tab-content-bs\">\n                  {bsLoading ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"loading-balance-sheet\">\n                      <div className=\"text-center\">\n                        <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent mx-auto mb-2\" />\n                        <p className=\"text-muted-foreground\">Loading Balance Sheet...</p>\n                      </div>\n                    </div>\n                  ) : balanceSheets.length === 0 ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"empty-balance-sheet\">\n                      <div className=\"text-center\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-lg font-medium text-foreground mb-2\">No Balance Sheet Data</p>\n                        <p className=\"text-muted-foreground\">No statements found for the selected filters.</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-auto max-h-[800px]\" data-testid=\"table-container-balance-sheet\">\n                      <Table className=\"relative\">\n                        <TableHeader className=\"sticky top-0 z-20\">\n                          <TableRow className=\"bg-muted/80 border-border/50\">\n                            <TableHead className=\"sticky left-0 bg-muted/80 z-30 border-r border-border/50 font-bold text-foreground py-4 px-6 min-w-[200px]\">\n                              Account / Period\n                            </TableHead>\n                            {balanceSheets.map(statement => (\n                              <TableHead \n                                key={statement.id} \n                                className=\"text-center font-bold text-foreground py-4 px-6 min-w-[150px]\"\n                                data-testid={`header-period-${statement.period}`}\n                              >\n                                <div>\n                                  <div className=\"text-sm\">{statement.topic}</div>\n                                  <div className=\"text-lg\">{statement.period}</div>\n                                </div>\n                              </TableHead>\n                            ))}\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {/* ASSETS SECTION */}\n                          <TableRow className=\"bg-blue-100/80 dark:bg-blue-900/40 border-t-4 border-blue-500\">\n                            <TableCell className=\"sticky left-0 bg-blue-200/80 dark:bg-blue-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              ASSETS\n                            </TableCell>\n                            {balanceSheets.map((statement) => (\n                              <TableCell \n                                key={`${statement.id}-assets-header`}\n                                className=\"text-center font-bold bg-blue-200/60 dark:bg-blue-800/40 py-4 px-6 text-foreground text-lg\"\n                              >\n                                —\n                              </TableCell>\n                            ))}\n                          </TableRow>\n\n                          {/* Current Assets Section */}\n                          <CollapsibleTableSection\n                            title=\"Current Assets\"\n                            sectionKey=\"currentAssets\"\n                            statements={balanceSheets}\n                            className=\"bg-blue-50/50 dark:bg-blue-950/20\"\n                            prefix=\"bs\"\n                            calculateTotal={true}\n                            totalFields={CURRENT_ASSET_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Cash\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-cash`}\n                                  value={statement.cash}\n                                  itemId={statement.id}\n                                  field=\"cash\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Accounts Receivable\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-accountsReceivable`}\n                                  value={statement.accountsReceivable}\n                                  itemId={statement.id}\n                                  field=\"accountsReceivable\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Inventory\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-inventory`}\n                                  value={statement.inventory}\n                                  itemId={statement.id}\n                                  field=\"inventory\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Current Assets Total */}\n                          <TableRow className=\"bg-blue-50/50 dark:bg-blue-950/20 border-t-2 border-blue-300 dark:border-blue-700\">\n                            <TableCell className=\"sticky left-0 bg-blue-100/80 dark:bg-blue-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Total Current Assets\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-currentAssets`}\n                                value={statement.currentAssets}\n                                itemId={statement.id}\n                                field=\"currentAssets\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-blue-100/60 dark:bg-blue-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Non-Current Assets Section */}\n                          <CollapsibleTableSection\n                            title=\"Non-Current Assets\"\n                            sectionKey=\"nonCurrentAssets\"\n                            statements={balanceSheets}\n                            className=\"bg-purple-50/50 dark:bg-purple-950/20\"\n                            prefix=\"bs\"\n                            calculateTotal={true}\n                            totalFields={NON_CURRENT_ASSET_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Property, Plant & Equipment\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-propertyPlantEquipment`}\n                                  value={statement.propertyPlantEquipment}\n                                  itemId={statement.id}\n                                  field=\"propertyPlantEquipment\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Intangible Assets\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-intangibleAssets`}\n                                  value={statement.intangibleAssets}\n                                  itemId={statement.id}\n                                  field=\"intangibleAssets\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Non-Current Assets Total */}\n                          <TableRow className=\"bg-purple-50/50 dark:bg-purple-950/20 border-t-2 border-purple-300 dark:border-purple-700\">\n                            <TableCell className=\"sticky left-0 bg-purple-100/80 dark:bg-purple-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Total Non-Current Assets\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-nonCurrentAssets`}\n                                value={statement.nonCurrentAssets}\n                                itemId={statement.id}\n                                field=\"nonCurrentAssets\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-purple-100/60 dark:bg-purple-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Total Assets */}\n                          <TableRow className=\"bg-blue-100/80 dark:bg-blue-900/40 border-t-4 border-blue-500\">\n                            <TableCell className=\"sticky left-0 bg-blue-200/80 dark:bg-blue-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              TOTAL ASSETS\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-totalAssets`}\n                                value={statement.totalAssets}\n                                itemId={statement.id}\n                                field=\"totalAssets\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-blue-200/60 dark:bg-blue-800/40 font-bold text-lg\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* LIABILITIES & EQUITY SECTION */}\n                          <TableRow className=\"bg-red-100/80 dark:bg-red-900/40 border-t-4 border-red-500\">\n                            <TableCell className=\"sticky left-0 bg-red-200/80 dark:bg-red-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              LIABILITIES & EQUITY\n                            </TableCell>\n                            {balanceSheets.map((statement) => (\n                              <TableCell \n                                key={`${statement.id}-liabilities-header`}\n                                className=\"text-center font-bold bg-red-200/60 dark:bg-red-800/40 py-4 px-6 text-foreground text-lg\"\n                              >\n                                —\n                              </TableCell>\n                            ))}\n                          </TableRow>\n\n                          {/* Current Liabilities Section */}\n                          <CollapsibleTableSection\n                            title=\"Current Liabilities\"\n                            sectionKey=\"currentLiabilities\"\n                            statements={balanceSheets}\n                            className=\"bg-red-50/50 dark:bg-red-950/20\"\n                            prefix=\"bs\"\n                            calculateTotal={true}\n                            totalFields={CURRENT_LIABILITY_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Accounts Payable\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-accountsPayable`}\n                                  value={statement.accountsPayable}\n                                  itemId={statement.id}\n                                  field=\"accountsPayable\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Short-term Debt\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-shortTermDebt`}\n                                  value={statement.shortTermDebt}\n                                  itemId={statement.id}\n                                  field=\"shortTermDebt\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Current Liabilities Total */}\n                          <TableRow className=\"bg-red-50/50 dark:bg-red-950/20 border-t-2 border-red-300 dark:border-red-700\">\n                            <TableCell className=\"sticky left-0 bg-red-100/80 dark:bg-red-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Total Current Liabilities\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-currentLiabilities`}\n                                value={statement.currentLiabilities}\n                                itemId={statement.id}\n                                field=\"currentLiabilities\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-red-100/60 dark:bg-red-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Long-term Liabilities Section */}\n                          <CollapsibleTableSection\n                            title=\"Long-term Liabilities\"\n                            sectionKey=\"longTermLiabilities\"\n                            statements={balanceSheets}\n                            className=\"bg-orange-50/50 dark:bg-orange-950/20\"\n                            prefix=\"bs\"\n                            calculateTotal={true}\n                            totalFields={LONG_TERM_LIABILITY_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Long-term Debt\n                              </TableCell>\n                              {balanceSheets.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-longTermDebt`}\n                                  value={statement.longTermDebt}\n                                  itemId={statement.id}\n                                  field=\"longTermDebt\"\n                                  reportType=\"bs\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Long-term Liabilities Total */}\n                          <TableRow className=\"bg-orange-50/50 dark:bg-orange-950/20 border-t-2 border-orange-300 dark:border-orange-700\">\n                            <TableCell className=\"sticky left-0 bg-orange-100/80 dark:bg-orange-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Total Long-term Liabilities\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-longTermLiabilities`}\n                                value={statement.longTermLiabilities}\n                                itemId={statement.id}\n                                field=\"longTermLiabilities\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-orange-100/60 dark:bg-orange-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Total Liabilities */}\n                          <TableRow className=\"bg-red-100/80 dark:bg-red-900/40 border-t-4 border-red-500\">\n                            <TableCell className=\"sticky left-0 bg-red-200/80 dark:bg-red-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              TOTAL LIABILITIES\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-totalLiabilities`}\n                                value={statement.totalLiabilities}\n                                itemId={statement.id}\n                                field=\"totalLiabilities\"\n                                reportType=\"bs\"\n                                isEditable={false}\n                                className=\"bg-red-200/60 dark:bg-red-800/40 font-bold text-lg\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Shareholders' Equity */}\n                          <TableRow className=\"bg-green-50/50 dark:bg-green-950/20 border-t-2 border-green-300 dark:border-green-700\">\n                            <TableCell className=\"sticky left-0 bg-green-100/80 dark:bg-green-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Shareholders' Equity\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-shareholdersEquity`}\n                                value={statement.shareholdersEquity}\n                                itemId={statement.id}\n                                field=\"shareholdersEquity\"\n                                reportType=\"bs\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Retained Earnings */}\n                          <TableRow className=\"bg-green-50/50 dark:bg-green-950/20\">\n                            <TableCell className=\"sticky left-0 bg-green-100/80 dark:bg-green-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Retained Earnings\n                            </TableCell>\n                            {balanceSheets.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-retainedEarnings`}\n                                value={statement.retainedEarnings}\n                                itemId={statement.id}\n                                field=\"retainedEarnings\"\n                                reportType=\"bs\"\n                              />\n                            ))}\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </TabsContent>\n\n                {/* Cash Flow Tab */}\n                <TabsContent value=\"cf\" className=\"m-0\" data-testid=\"tab-content-cf\">\n                  {cfLoading ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"loading-cash-flow\">\n                      <div className=\"text-center\">\n                        <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent mx-auto mb-2\" />\n                        <p className=\"text-muted-foreground\">Loading Cash Flow statements...</p>\n                      </div>\n                    </div>\n                  ) : cashFlowStatements.length === 0 ? (\n                    <div className=\"flex items-center justify-center py-12\" data-testid=\"empty-cash-flow\">\n                      <div className=\"text-center\">\n                        <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                        <p className=\"text-lg font-medium text-foreground mb-2\">No Cash Flow Data</p>\n                        <p className=\"text-muted-foreground\">No statements found for the selected filters.</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"overflow-auto max-h-[800px]\" data-testid=\"table-container-cash-flow\">\n                      <Table className=\"relative\">\n                        <TableHeader className=\"sticky top-0 z-20\">\n                          <TableRow className=\"bg-muted/80 border-border/50\">\n                            <TableHead className=\"sticky left-0 bg-muted/80 z-30 border-r border-border/50 font-bold text-foreground py-4 px-6 min-w-[200px]\">\n                              Account / Period\n                            </TableHead>\n                            {cashFlowStatements.map(statement => (\n                              <TableHead \n                                key={statement.id} \n                                className=\"text-center font-bold text-foreground py-4 px-6 min-w-[150px]\"\n                                data-testid={`header-period-${statement.period}`}\n                              >\n                                <div>\n                                  <div className=\"text-sm\">{statement.topic}</div>\n                                  <div className=\"text-lg\">{statement.period}</div>\n                                </div>\n                              </TableHead>\n                            ))}\n                          </TableRow>\n                        </TableHeader>\n                        <TableBody>\n                          {/* Operating Activities Section */}\n                          <CollapsibleTableSection\n                            title=\"Operating Activities\"\n                            sectionKey=\"operatingActivities\"\n                            statements={cashFlowStatements}\n                            className=\"bg-blue-50/50 dark:bg-blue-950/20\"\n                            prefix=\"cf\"\n                            calculateTotal={true}\n                            totalFields={OPERATING_CASH_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Net Income\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-netIncome`}\n                                  value={statement.netIncome}\n                                  itemId={statement.id}\n                                  field=\"netIncome\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Depreciation\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-depreciation`}\n                                  value={statement.depreciation}\n                                  itemId={statement.id}\n                                  field=\"depreciation\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Change in Working Capital\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-changeInWorkingCapital`}\n                                  value={statement.changeInWorkingCapital}\n                                  itemId={statement.id}\n                                  field=\"changeInWorkingCapital\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Operating Cash Flow Total */}\n                          <TableRow className=\"bg-blue-50/50 dark:bg-blue-950/20 border-t-2 border-blue-300 dark:border-blue-700\">\n                            <TableCell className=\"sticky left-0 bg-blue-100/80 dark:bg-blue-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Operating Cash Flow\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-operatingCashFlow`}\n                                value={statement.operatingCashFlow}\n                                itemId={statement.id}\n                                field=\"operatingCashFlow\"\n                                reportType=\"cf\"\n                                isEditable={false}\n                                className=\"bg-blue-100/60 dark:bg-blue-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Investing Activities Section */}\n                          <CollapsibleTableSection\n                            title=\"Investing Activities\"\n                            sectionKey=\"investingActivities\"\n                            statements={cashFlowStatements}\n                            className=\"bg-purple-50/50 dark:bg-purple-950/20\"\n                            prefix=\"cf\"\n                            calculateTotal={true}\n                            totalFields={INVESTING_CASH_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Capital Expenditures\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-capitalExpenditures`}\n                                  value={statement.capitalExpenditures}\n                                  itemId={statement.id}\n                                  field=\"capitalExpenditures\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Acquisitions\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-acquisitions`}\n                                  value={statement.acquisitions}\n                                  itemId={statement.id}\n                                  field=\"acquisitions\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Investing Cash Flow Total */}\n                          <TableRow className=\"bg-purple-50/50 dark:bg-purple-950/20 border-t-2 border-purple-300 dark:border-purple-700\">\n                            <TableCell className=\"sticky left-0 bg-purple-100/80 dark:bg-purple-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Investing Cash Flow\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-investingCashFlow`}\n                                value={statement.investingCashFlow}\n                                itemId={statement.id}\n                                field=\"investingCashFlow\"\n                                reportType=\"cf\"\n                                isEditable={false}\n                                className=\"bg-purple-100/60 dark:bg-purple-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Financing Activities Section */}\n                          <CollapsibleTableSection\n                            title=\"Financing Activities\"\n                            sectionKey=\"financingActivities\"\n                            statements={cashFlowStatements}\n                            className=\"bg-green-50/50 dark:bg-green-950/20\"\n                            prefix=\"cf\"\n                            calculateTotal={true}\n                            totalFields={FINANCING_CASH_FIELDS}\n                          >\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Debt Issuance\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-debtIssuance`}\n                                  value={statement.debtIssuance}\n                                  itemId={statement.id}\n                                  field=\"debtIssuance\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Debt Repayment\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-debtRepayment`}\n                                  value={statement.debtRepayment}\n                                  itemId={statement.id}\n                                  field=\"debtRepayment\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                            <TableRow className=\"hover:bg-muted/30 transition-colors\">\n                              <TableCell className=\"sticky left-0 bg-background/95 z-10 border-r border-border/50 py-3 px-4 pl-12 text-foreground\">\n                                Dividends Paid\n                              </TableCell>\n                              {cashFlowStatements.map(statement => (\n                                <EditableCell\n                                  key={`${statement.id}-dividendsPaid`}\n                                  value={statement.dividendsPaid}\n                                  itemId={statement.id}\n                                  field=\"dividendsPaid\"\n                                  reportType=\"cf\"\n                                />\n                              ))}\n                            </TableRow>\n                          </CollapsibleTableSection>\n\n                          {/* Financing Cash Flow Total */}\n                          <TableRow className=\"bg-green-50/50 dark:bg-green-950/20 border-t-2 border-green-300 dark:border-green-700\">\n                            <TableCell className=\"sticky left-0 bg-green-100/80 dark:bg-green-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Financing Cash Flow\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-financingCashFlow`}\n                                value={statement.financingCashFlow}\n                                itemId={statement.id}\n                                field=\"financingCashFlow\"\n                                reportType=\"cf\"\n                                isEditable={false}\n                                className=\"bg-green-100/60 dark:bg-green-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Net Change in Cash */}\n                          <TableRow className=\"bg-yellow-50/50 dark:bg-yellow-950/20 border-t-2 border-yellow-300 dark:border-yellow-700\">\n                            <TableCell className=\"sticky left-0 bg-yellow-100/80 dark:bg-yellow-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Net Change in Cash\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-netChangeInCash`}\n                                value={statement.netChangeInCash}\n                                itemId={statement.id}\n                                field=\"netChangeInCash\"\n                                reportType=\"cf\"\n                                isEditable={false}\n                                className=\"bg-yellow-100/60 dark:bg-yellow-900/30\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Beginning Cash Balance */}\n                          <TableRow className=\"bg-gray-50/50 dark:bg-gray-950/20\">\n                            <TableCell className=\"sticky left-0 bg-gray-100/80 dark:bg-gray-900/40 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground\">\n                              Beginning Cash Balance\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-beginningCashBalance`}\n                                value={statement.beginningCashBalance}\n                                itemId={statement.id}\n                                field=\"beginningCashBalance\"\n                                reportType=\"cf\"\n                              />\n                            ))}\n                          </TableRow>\n\n                          {/* Ending Cash Balance */}\n                          <TableRow className=\"bg-cyan-100/80 dark:bg-cyan-900/40 border-t-4 border-cyan-500\">\n                            <TableCell className=\"sticky left-0 bg-cyan-200/80 dark:bg-cyan-800/60 z-10 border-r border-border/50 font-bold py-4 px-6 text-foreground text-lg\">\n                              Ending Cash Balance\n                            </TableCell>\n                            {cashFlowStatements.map(statement => (\n                              <EditableCell\n                                key={`${statement.id}-endingCashBalance`}\n                                value={statement.endingCashBalance}\n                                itemId={statement.id}\n                                field=\"endingCashBalance\"\n                                reportType=\"cf\"\n                                isEditable={false}\n                                className=\"bg-cyan-200/60 dark:bg-cyan-800/40 font-bold text-lg\"\n                              />\n                            ))}\n                          </TableRow>\n                        </TableBody>\n                      </Table>\n                    </div>\n                  )}\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":107186},"client/src/components/SectionDivider.tsx":{"content":"interface SectionDividerProps {\n  variant?: 'default' | 'gradient' | 'dots';\n  className?: string;\n}\n\nexport default function SectionDivider({ variant = 'default', className = '' }: SectionDividerProps) {\n  if (variant === 'gradient') {\n    return (\n      <div className={`relative py-12 ${className}`}>\n        <div className=\"absolute inset-0 flex items-center\">\n          <div className=\"w-full h-px bg-gradient-to-r from-transparent via-border to-transparent\"></div>\n        </div>\n        <div className=\"relative flex justify-center\">\n          <div className=\"bg-background px-6\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 bg-chart-1 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-chart-2 rounded-full animate-pulse [animation-delay:0.2s]\"></div>\n              <div className=\"w-2 h-2 bg-chart-3 rounded-full animate-pulse [animation-delay:0.4s]\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (variant === 'dots') {\n    return (\n      <div className={`flex justify-center py-8 ${className}`}>\n        <div className=\"flex items-center gap-3\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div\n              key={i}\n              className={`w-2 h-2 rounded-full ${\n                i === 2 ? 'bg-primary' : 'bg-muted-foreground/30'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`relative py-8 ${className}`}>\n      <div className=\"absolute inset-0 flex items-center\">\n        <div className=\"w-full h-px bg-border\"></div>\n      </div>\n    </div>\n  );\n}","size_bytes":1671}},"version":1}